[atlprovui.dll]
100 = atlprov
2000 = Unknown error #%1$d
2004 = Out of memory processing attributes.
2007 = Requires inclusion of header %1$s.h.
2010 = Undeclared identifier "%1$s".
2011 = Only 1 inline unnamed attribute allowed per scope.
2012 = Missing attribute db_accessor(%1$d).
2013 = class "%1$s" contains a COLUMN_MAP. Attribute cannot be used on the class
2014 = class "%1$s" contains a PARAM_MAP. Attribute cannot be used on the class
2015 = Attribute cannot be used on a class that has constructor and/or destructor
2020 = Unknown root key format, no acceptable root key found in "%1$s"
2021 = Subkey syntax - (\) not allowed in values
2023 = Attribute should be used with a real array with storage backing it and not just a simple pointer.
2024 = Attribute should be used with a 4 byte storage data type for a DWORD key.
2025 = Failed to compile RGS, Unknown Root key "%1$s" specified.
2026 = Failed to compile RGS, Syntax error - expecting a {, found "%1$s".
2027 = Failed to compile RGS, Out of memory.
2028 = Failed to compile RGS, RGS tree contains unparseable constructs.
2029 = Failed to compile RGS, Syntax error - [!ifexist] not followed by [!endif]
2030 = Failed to compile RGS, Syntax error - closing ')' not found to match '(' in ifexist block.
2031 = Failed to compile RGS, Syntax error - illegal else without matching if.
2032 = Failed to compile RGS, Attribute "%1$s" specified in the script not found in attribute block.
2033 = Failed to compile RGS, Value "%1$s" specified in script not found in attribute block.
2034 = Failed to compile RGS, Script file "%1$s" not found.
2035 = Attribute must be associated with a data member
2050 = Attribute cannot be specified on a class that indirectly derives from  CComCoClass.
2054 = Unknown interface "%1$s" used with attribute.
2055 = Interface "%1$s" does not have a UUID associated with it.
2056 = Derive from either "%1$s" or "%2$s", not both.
2057 = Derive from either "%1$s" or "%2$s<%3$s>", not both.
2070 = "%1$s" cannot be used in attributed project
2207 = "%1$s" parameter of method "%1$s" has too many indirections.  Fixed size arrays cannot have indirections.
2209 = "%1$s" parameter of method "%2$s" has an illegal size_is attribute.  The size_is attribute is only allowed on variable length out arrays.
2210 = "%1$s" parameter of method "%2$s" has more than size_is parameter.  Only one dimensional variable length arrays are supported.
2211 = "%1$s" parameter of method "%2$s" is missing a size_is attribute.  Variable length out arrays require the size_is attribute.
2212 = The "%1$s" size_is parameter for the "%2$s" parameter of method "%3$s" must be an out parameter.
2213 = "%1$s" parameter of method "%2$s" has too many indirections.  In parameters cannot have more than 1 indirection.
2214 = "%1$s" parameter of method "%2$s" has too many indirections.  Out parameters cannot have more than 2 indirections.
2215 = "%1$s" parameter of method "%2$s" has an illegal size_is attribute. The size_is attribute is only allowed on variable length arrays.
2246 = The "%1$s" size_is parameter for the "%2$s" parameter of method "%3$s" must be an in parameter.
4000 = Unknown warning #%1$d
4001 = Cannot inject full attribute code due to duplicate member: %1$s
4002 = Cannot inject full attribute code due to duplicate base class: %1$s
4003 = Cannot inject full attribute code due to duplicate global: %1$s
4005 = Attributes are not supported on nested classes
4051 = class "%1$s" derives from CComObjectRoot(Ex). Not injecting base class. Ignoring threading attribute.
4052 = Attribute cannot be specified on a class that indirectly derives from CComObjectRoot(Ex)
4053 = class "%1$s" derives from CComCoClass. Not injecting base class.
4058 = "%1$s" is not an interface defined in embedded IDL. It will not be replaced with the corresponding IDispatchImpl
4071 = class "%1$s" derives from "%2$s". Not injecting base class.

[bscmakeui.dll]
1500 = unknown error; consult documentation for technical support options
1501 = unknown character '%c' in option '%s'
1502 = incomplete specification for option '%s'
1503 = cannot write to file '%s'
1504 = cannot position in file '%s'
1505 = cannot read from file '%s'
1506 = cannot open file '%s'
1507 = cannot open temporary file '%s'
1508 = cannot delete temporary file '%s'
1509 = out of heap space
1510 = corrupt .SBR file '%s'
1511 = invalid response file specification
1512 = %s: capacity exceeded
1513 = nonincremental update requires all .SBR files
1514 = all .SBR files truncated, none found in %s
1515 = '%s': incompatible version; cannot incrementally update
1516 = '%s' corrupt; cannot incrementally update
1517 = source file for '%s' compiled with both /Yc and /Yu
1518 = '%s' has patches generated by incremental compiler, this is not compatible with the bscmake '/n' option
1519 = '%s' has patches that could not be applied to the .bsc file, delete the .sbr file and recompile
1520 = internal limit exceeded; cannot generate source database file; please consider removing option /FR or /Fr from compiler command line
1521 = failed to calculate SHA-256 hash value
2000 = Microsoft (R) Browse Information Maintenance Utility
2001 = usage: bscmake <options> <file.sbr> ...
2002 =   @<file>        Get arguments from specified file
2003 =   /E...          Exclude:
2004 =      s                system files
2005 =      i <file>         named include file <file>
2006 =      i ( <files> )    named include file list <files>
2007 =      r <symbol>       named symbol <symbol>
2008 =      r ( <symbols> )  named symbol list <symbols>
2009 =      l                local variables
2010 =      m                macro expanded symbols
2011 =   /errorreport:... Deprecated. Mode to report errors to Microsoft
2012 =      none             don't send error report
2013 =      prompt           ask before sending error report
2014 =      queue            queue error report
2015 =      send             send error report
2016 =   /I...          Include:
2017 =      u                unreferenced symbols
2018 =   /S <file>      <file> is 'simple', process once then exclude
2019 =   /S ( <files> ) named <files> are simple as above
2020 =   /o <file>      output source database name
2021 =   /n             no incremental (full builds, .sbr's preserved)
2022 =   /v             verbose output
2023 =   /nologo        don't emit startup banner
2024 =   /?, /help      summary of options (what you're reading)
4500 = unknown warning; consult documentation for technical support options
4501 = ignoring unknown option '%s'
4502 = truncated .SBR file '%s' not in %s
4503 = minor error in .SBR file '%s' ignored
4504 = file contains too many references; ignoring further references from this source
4505 = must read and agree to the Data Collection Policy at %s before using /errorreport:send

[clui.dll]
103 = cl : Command line %s D%d : 
105 = usage: cl [ option... ] filename... [ /link linkoption... ]
	
107 = Copyright (C) Microsoft Corporation.  All rights reserved.
	
	
110 = Compiler Passes:
	
111 = Version
112 = CIL Version
113 = (press <return> to continue)
120 = , 
121 =  or 
130 = Skipping... (no relevant changes detected)
	
131 = Compiling...
	
132 = Processing...
	
133 = Generating Code...
	
134 = Microsoft (R) C/C++ Optimizing Compiler Version %s
	
135 = for Microsoft (R) .NET Framework
136 = Common Language Runtime
139 = Microsoft (R) C/C++ Optimizing Compiler
140 = Microsoft (R) C/C++ Optimizing Compiler Version %s for MIPS R-Series
	
141 = Microsoft (R) MIPS Assembler Version %s
	
142 = Microsoft (R) C/C++ Optimizing Compiler Version %s for Renesas SH
	
143 = Microsoft (R) C/C++ Optimizing Compiler Version %s for ARM
	
144 = Microsoft (R) C/C++ Standard Compiler Version %s for x86
	
145 = Microsoft (R) C/C++ Optimizing Compiler Version %s for x86
	
146 = Microsoft (R) 32-bit C/C++ Optimizing Compiler Version %s for PowerPC
	
147 = Microsoft (R) C/C++ Optimizing Compiler Version %s for Itanium
	
148 = Microsoft (R) C/C++ Optimizing Compiler Version %s for x64
	
149 = Microsoft (R) C/C++ Optimizing Compiler Version %s for ARM64
	
150 = Running Code Analysis for C/C++...
	
151 = Experimental features are provided as a preview of proposed language features,
	and we're eager to hear about bugs and suggestions for improvements. However,
	note that these experimental features are non-standard, provided as-is without
	support, and subject to breaking changes or removal without notice. See
	http://go.microsoft.com/fwlink/?LinkID=691081 for details.
	
	
152 = for Microsoft (R) .NET Core
153 =  version %s
	
154 = /std:c++latest is provided as a preview of language features from the latest C++
	working draft, and we're eager to hear about bugs and suggestions for improvements.
	However, note that these features are provided as-is without support, and subject
	to changes or removal as the working draft evolves. See
	https://go.microsoft.com/fwlink/?linkid=2045807 for details.
	
	
160 = Merging Modules...
	
161 = Merging Analysis Modules...
	
180 = mipsasm : Command line %s D%d : 
181 = usage: mipsasm [ option... ] filename... [ /link linkoption... ]
	
182 = Assembler Passes:
	
183 = Assembling...
	
186 = Microsoft (R) MIPS Assembler
210 = compiler generated
211 = compiler intermediate
212 = source
221 = functions containing setjmp are not supported
223 = inline native assembly not supported
224 = varargs not supported
225 = virtual-call thunks are native with /clr
226 = cannot generate native code for static functions
227 = missing metadata for function definition
228 = cannot generate native code for functions using value types/managed classes or managed EH constructs
229 = a low-level intrinsic was found
230 = aligned data types not supported in managed code
231 = functions with direct calls to naked functions or thunks are not supported
232 = found an intrinsic not supported in managed code
234 = functions containing references to __ImageBase are not supported
235 = file may have been deleted or moved
236 = not enough memory to open metadata
237 = cannot generate native code for functions using app domain data
238 = local variable whose reference is returned from the function has had its address taken
239 = reference is from an unknown source
240 = exception handling will clear the stack
241 = definition of returned local not found in basic block
242 = returning a by reference argument is not verifiable
243 = returning a reference to a local or argument is not verifiable
244 = __ptr32 pointer types not supported in managed code
245 = __ptr64 pointer types not supported in managed code
246 = initializers must be managed
247 = returning a reference to a member of a value type that may not be in the GC heap
250 = ******************************** PGU Divergence Report ************************************
251 = PGD Name: %s
252 = %c%d of %d profiled functions (%4.1f%%) were optimized using profile data
253 = %c%I64d of %I64d total dynamic instructions (%4.1f%%) were optimized using profile data
254 = ******* Profiled functions not optimized using profile data *******
255 = %-30.30s                   dynamic     %%
256 = %-30.30s      Reason         instr  total
257 = Function Name
258 = Not found
259 = Modified
260 = Profile data found for %d of %d compiled functions (%4.1f%%)
261 = ******* Compiled functions for which no profile data was found *******
262 = %c%d call sites were inlined
263 = %c%d of %d compiled functions (%4.1f%%) will be compiled for speed
264 = %c%c Phase:: %s, Functions: %d, Size: %d
265 = Merged PGD: %s
266 = Merged Hot Region Threshold: %I64d
267 = Callsite Matching Details:
268 = %lu of %lu (%4.1f%%) original invalid call sites were matched.
269 = %lu new call sites were added.
270 = Couldn't open %s, continuing without source annotations
271 = SPD Name: %s
272 = %c%d of %d compiled functions (%4.1f%%) had valid profile data
278 = loop unswitched
280 = loop vectorized
281 = loop parallelized
282 = distributed
283 = loop not vectorized due to reason '%d'
284 = loop not parallelized due to reason '%d'
285 = Analyzing function
286 = unable to associate loop with
287 = permuted
288 = block vectorized
289 = unswitched
290 = C++ Exception Handling in coroutines
291 = Omp simd loop vectorized
292 = Omp simd loop not vectorized due to reason '%d'
306 = bad suffix on number
307 = unknown
308 = <Unknown>
320 = first operand
321 = second operand
322 = third operand
323 = opcode
334 = member
335 = enumerator
336 = inaccessible
337 = input
339 = compiler intermediate
340 = compiler generated
341 = source
343 = include
344 = precompiled header
345 = overloaded function type
347 = single_inheritance
348 = multiple_inheritance
349 = virtual_inheritance
354 = program database
355 = bad path
356 = debug
357 = browser
358 = type library
359 = CLR runtime data
360 = brace '{'
361 = parenthesis '('
362 = bracket '['
364 = angle-bracket '<'
365 = type dependent on a template parameter
366 = namespace
367 = typedef
368 = formerly unknown identifier
370 = default constructor
371 = copy constructor
372 = assignment operator
373 = destructor
374 = function
375 = empty declaration
376 = static data member
377 = data
378 = function through pointer
382 = data member
383 = bitfield
384 = tag
385 = member function
386 = data variable
387 = formal parameter
388 = base class
389 = template parameter
394 = FastCall(/Gr)
395 = Unsigned char(/J)
396 = PM representation(/vmb)
397 = PM representation(/vmg)
398 = general PM representation(/vm[smv])
399 = vtordisp(/vd[012])
400 = DLL library (/MD)
402 = Optimizations (one or more of /Oawstgp[y]) or debug checks (one or more of /GZ, /RTCcsu)
403 = C++ Exception Handling Unwinding
404 = Generate Browser Info
405 = Library PCH Identifier (/Yl)
406 = structure packing (/Zp)
407 = C++ Run-Time Type Identification Data
408 = Note: including file:%s%s
	
410 = StdCall(/Gz)
411 = CDecl(/Gd)
413 = Support for type 'wchar_t' (/Zc:wchar_t)
415 = Static library (/ML)
416 = Static MT library (/MT)
417 = Debug DLL library (/MDd)
418 = Debug static library (/MLd)
419 = Debug static MT library (/MTd)
421 = For loop scope conformance (/Zc:forScope)
422 = Warning level (/W<n>)
423 = All warnings enabled (/Wall)
424 = assembly
425 = module
426 = link-time code generation (/GL)
427 = support for OpenMP (/openmp or /openmp:llvm)
428 = support for new floating-point model (/FP)
429 = support for security checks (/GS)
430 = Kernel mode (/kernel)
431 = VectorCall (/Gv)
504 = true
505 = false
508 = int
510 = template-parameter-list
511 = template-argument-list
512 = interfaces
513 = pure virtual functions
514 = template
515 = generic
517 = generic-argument-list
518 = template-id
519 = generic-class-id
520 = class
521 = alias
522 = literal operator template
523 = literal operator
524 = data member
525 = variable template
526 = constexpr
527 = consteval
599 = PCH header file
600 = end of file
601 = <internal>
602 = identifier
603 = string
604 = <class-head>
605 = enum [tag]
606 = type
607 = right-side modifier
608 = assignment operator
609 = type cast
610 = constant
612 = equality operator
613 = increment operator
614 = initializing
615 = left-side modifier
616 = relational operator
617 = shift operator
618 = struct/union operator
619 = operator <op>
620 = user-defined conversion
621 = qualified-name
622 = function-style cast
623 = <tag>::*
624 = expression
625 = declarator
626 = 'symbol'
627 = inline function header
628 = resolved identifier
630 = bit field
631 = based reference
632 = deseg
633 = argument
634 = entry
635 = function
636 = intrinsic
642 = on/off
643 = force include
644 = CompileTime directive
645 = force include assembly
647 = deduction guide
648 = 3-way comparison operator
649 = property
650 = event
651 = a scoped enumeration
652 = an unscoped enumeration
653 = default argument
654 = member initializer
655 = unsigned long long
656 = long double
657 = const char *
658 = const wchar_t *
659 = Note: resolved %s to '%s'
	
660 = in any non-global scope
661 = in an 'export' declaration sequence
662 = directly in a linkage specification
663 = partition
664 = 'Version' field missing or not of string type
665 = 'Version' did not match the expected value of '%s'
666 = 'BuildAsHeaderUnits' field missing or not of array type
667 = Entry at index %z is not of string type
668 = 'Filemapping' entry at index is not of object type
669 = 'Original' field missing or not of string type
670 = 'Substitute' field missing or not of string type
671 = Duplicate entry for 'Original'
672 = 'Mappings' field missing or not of array type
673 = Input file not found. Json not loaded.
700 = element of a managed array
701 = member of a managed class
702 = an unboxed value type
703 = a dereferenced gc pointer
704 = pointer to __gc class or __gc interface
705 = handle type
706 = __gc class or __gc interface
707 = ref class or interface class
708 = __gc array
709 = managed array
710 = __gc class
711 = ref class
712 = __gc new
713 = new
714 = gcnew
715 = __gc interfaces
716 = interface classes
718 = value class
719 = declaration within #pragma unmanaged
721 = non-virtual
722 = array
723 = Platform::Array
751 =  Discarding /** comment with no closing */ 
752 =  <include> tag requires '%s' attribute. 
753 =  Cannot access '%s'. 
754 =  Cannot select XPath '%s' in doc '%s'. 
755 =  <include> nesting limit reached. 
756 =  Parameter name '%s' already referenced. 
757 =  '%s' is not a parameter named in the declaration of this function. 
763 =  Discarding badly formed XML document comment for member '%s'. 
764 =  Discarding XML document comment for invalid target. 
765 =  COM error, cannot create XML document handles. 
767 =  MSXML 3.0 (or later) not registered 
768 =  path resulted in empty nodelist 
769 =  document comment too long, XML was discarded
770 =  applied to '%s'
781 = cannot use no_registry with %s
782 = static/thread_local structured bindings
902 = Note: %$M %s
	
904 = compiler options have changed, all functions will be recompiled
908 = reusing persistent precompiled header
910 = Note: non-fatal system error releasing memory (%d)
	
915 = constructor
916 = finally
917 = __finally
918 = finalizer
919 = ~
920 = !
921 = was declared deprecated
923 = managed
924 = WinRT
929 = System::
930 = Platform::
931 = Platform::Metadata::
932 = Windows::Foundation::Metadata::
933 = CLR
934 = ref new
936 = compiling source file
938 = init-capture
939 = command line
940 = current compilation
941 = /std:c++14
942 = /std:c++latest
943 = nested-namespace-definition
944 = language feature
951 = /std:c++20
952 = terse static assert
953 = copy assignment operator
954 = move constructor
955 = move assignment operator
956 = special member function
957 = constexpr lambdas
958 = structured bindings
961 = init-statements in if/switch
962 = %1$P: Translated include: '#include %2s' -> 'import %3s ;' using header unit '%4$F'
963 = %1$P: Translated include: '#include %2s' -> 'import %3s ;' using header unit included in PCH
964 = %1$P: Translated include: '#include %2s' -> 'import %3s ;' using entry provided in '%4$F'
980 = offsetof applied to member function '%$S'
981 = offsetof applied to static data member '%$S'
983 = offsetof applied to non-standard-layout type '%$S'
985 = compound member designator used in offsetof
986 = offsetof applied to a member of a virtual base
987 = attribute namespace prefix
988 = two-phase name lookup is not supported for C++/CLI or C++/CX; use /Zc:twoPhase-
989 = id-expression
990 = statement
991 = expression
992 = type specifier
993 = declaration
994 = typename
995 = /std:c++17
996 = pack expansions in using-declarations
997 = passing arguments to ellipsis of an inherited constructor
998 = header unit
999 = UNKNOWN MESSAGE %$N Please choose the Technical Support command on the Visual C++ %$N Help menu, or open the Technical Support help file for more information
1000 = UNKNOWN FATAL ERROR
	    Please choose the Technical Support command on the Visual C++
	    Help menu, or open the Technical Support help file for more information
1001 = Internal compiler error.
	(compiler file '%s', line %d)
	 To work around this problem, try simplifying or changing the program near the locations listed above.
	If possible please provide a repro here: https://developercommunity.visualstudio.com 
	Please choose the Technical Support command on the Visual C++ 
	 Help menu, or open the Technical Support help file for more information
1002 = compiler is out of heap space in pass 2
1003 = error count exceeds %d; stopping compilation
1004 = unexpected end-of-file found
1005 = string too big for buffer
1006 = write error on compiler intermediate file
1007 = unrecognized flag '%s' in '%s'
1008 = no input file specified
1009 = compiler limit: macros nested too deeply
1010 = unexpected end of file while looking for precompiled header. Did you forget to add '#include %c%s%c' to your source?
1011 = cannot locate standard module interface. Did you install the library part of the C++ modules feature in VS setup?
1012 = unmatched parenthesis: missing '%c'
1013 = compiler limit: too many open parentheses
1014 = too many include files: depth = %d
1015 = header-names '%s' and '%s' identify the same header and cannot be used as both /headerUnit:quoted and /headerUnit:angle arguments; please provide this header-name only once
1016 = #if[n]def expected an identifier
1017 = invalid integer constant expression
1018 = unexpected #elif
1019 = unexpected #else
1020 = unexpected #endif
1021 = invalid preprocessor command '%s'
1022 = expected #endif
1023 = '%s': unexpected error with pch, try rebuilding the pch
1025 = too many nested lambdas
1026 = parser stack overflow, program too complex
1030 = WMMX types not allowed in the function signature by the calling convention
1032 = __eabi requires VFP code generation (/QRfpe-)
1033 = cannot open program database '%s'
1034 = %s: no include path set
1035 = expression too complex; simplify expression
1036 = cannot overwrite earlier program database format, delete '%s' and recompile
1037 = cannot open object file '%s'
1039 = more arguments of intrinsic type than allowed by the calling convention
1040 = intrinsic function or type not allowed in Thumb mode
1041 = cannot open program database '%s'; if multiple CL.EXE write to the same .PDB file, please use /FS
1042 = cannot open compiler intermediate file - no such file or directory
1043 = cannot open compiler intermediate file
1044 = out of disk space for compiler intermediate file
1045 = compiler limit: linkage specifications nested too deeply
1046 = compiler limit: %$B nested too deeply
1047 = The object or library file '%s' was created by a different version of the compiler than other objects like '%s'; rebuild all objects and libraries with the same compiler
1049 = invalid numerical argument '%s'
1051 = program database file, '%s', has an obsolete format, delete it and recompile
1052 = program database file, '%s', was generated by the linker with /DEBUG:fastlink; compiler cannot update such PDB files; please delete it or use /Fd to specify a different PDB filename
1053 = '%s': function too large
1054 = compiler limit: initializers nested too deeply
1055 = compiler limit: out of keys
1056 = cannot update the time date stamp field in '%s'; error code %u
1057 = unexpected end of file in macro expansion
1058 = compiler limit: too many attributes on symbol '%1$S'
1060 = compiler is out of heap space
1061 = compiler limit: blocks nested too deeply
1063 = compiler limit: compiler stack overflow
1064 = compiler limit: token overflowed internal buffer
1065 = compiler limit: out of tags
1067 = compiler limit: 64K limit on size of a type record has been exceeded
1068 = cannot open file '%s'
1069 = cannot read compiler command line
1070 = mismatched #if/#endif pair in file '%s'
1071 = unexpected end of file found in comment
1074 = 'IDB' is illegal extension for PDB file: %s
1075 = '%$L': no matching token found
1076 = compiler limit: internal heap limit reached
1077 = compiler limit: cannot have more than %d command line options
1080 = compiler limit: command line option exceeded limit of %z characters
1081 = '%s': file name too long
1082 = Cannot close %$M file: '%s': %$*
1083 = Cannot open %$M file: '%s': %$*
1084 = Cannot read %$M file: '%s': %$*
1085 = Cannot write %$M file: '%s': %$*
1086 = Cannot seek %$M file: '%s': %$*
1087 = Cannot tell %$M file: '%s': %$*
1088 = Cannot flush %$M file: '%s': %$*
1089 = Cannot truncate %$M file: '%s': %$*
1090 = PDB API call failed, error code '%d': %ws
1091 = compiler limit: string exceeds %z bytes in length
1092 = Edit and Continue does not support changes to data types; build required
1093 = API call '%s' failed '0x%x': %$O
1098 = Version mismatch with Edit and Continue engine
1099 = Edit and Continue engine terminating compile
1100 = unable to initialize OLE: %$O
1101 = cannot create handler for attribute '%$I'
1102 = unable to initialize: '%$O'
1103 = fatal error importing progid: '%s'
1104 = fatal error importing libid: '%s'
1105 = %s: %$O
1107 = could not find assembly '%s': please specify the assembly search path using /AI or by setting the LIBPATH environment variable
1108 = unable to find DLL: '%s'
1109 = unable to find '%s' in DLL '%s'
1110 = too many nested %$[TEMPLATE GENERIC] definitions
1111 = too many %$[TEMPLATE GENERIC] parameters
1112 = compiler limit: '%d' too many macro arguments, only '%d' allowed
1113 = #using failed on '%s'
1114 = '%s': WinRT does not support #using of a managed assembly
1115 = too many nested lambdas
1116 = unrecoverable error importing %1$M '%2s'.  Specialization of '%3$S' with arguments '%4$U'
1117 = unrecoverable error importing %1$M '%2s': symbol '%3$I' has already been defined
1118 = cannot expand the environment variable %%s% in %s filename in object file '%s'
1119 = unrecoverable error importing symbol' %$I' from module '%s'
1120 = call to GetProcAddress failed for '%s'
1121 = call to CryptoAPI failed
1126 = automatic allocation exceeds %s
1127 = %s requires %s
1128 = number of sections exceeded object file format limit: compile with /bigobj
1189 = #error: %s
1190 = System::Object not found, missing /clr option or missing import of standard assemblies?
1191 = '%s' can only be imported at global scope
1192 = #using failed on '%s'%$N'%s'
1193 = an error expected in %s(%d) not reached
1194 = checkpoint '%s' expected in %s(%d) not reached
1195 = use of /Yu and /Yc on the same command line is incompatible with the /clr option
1196 = '%s': identifier found in type library '%s' is not a valid C++ identifier
1197 = cannot reference '%s' as the program has already referenced '%s'
1198 = %s will be supported in a future release
1199 = missing reference to IFC file to resolve an import-declaration; please ensure the proper value for a '/reference' or '/headerUnit' option is provided
1201 = unable to continue after syntax error in class template definition
1202 = recursive type or function dependency context too complex
1203 = invalid symbol name or value specification in #pragma extern_absolute
1204 = symbol '%s' specified in #pragma extern_absolute has different values: 0x%x and 0x%x
1212 = Input file was modified by another process while building: '%s'
1213 = Header units are unsupported without /Zc:preprocessor
1214 = Modules conflict with non-standard behavior requested via '%1s'
1300 = error accessing program database %s (%s)
1301 = error accessing program database %s, invalid format, please delete and rebuild
1302 = no profile data for module '%s' in profile database '%s'
1303 = profile data corrupt in profile database '%s'
1304 = profile data version mismatch in profile database '%s'
1305 = profile database '%s' is for a different architecture
1306 = last change to profile data base '%s' was not
	optimization analysis; optimization decisions may be out of date
1307 = program has been edited since profile data was collected
1308 = %s: linking assemblies is not supported
1309 = Mismatched versions of C2.DLL and pgodb120.DLL
1310 = profile guided optimizations are not available with OpenMP
1311 = COFF format cannot statically initialize '%s' with %d byte(s) of an address
1312 = Too many conditional branches in function.  Simplify or refactor source code.
1313 = compiler limit: %s blocks may not be nested deeper than %d levels.
1350 = error loading dll '%s': dll not found
1351 = error loading dll '%s': incompatible version
1352 = Invalid or corrupt MSIL in function '%s' from module '%s'
1353 = metadata operation failed: runtime not installed or version mismatch
1354 = error accessing previous object file %s (%s)
1355 = unable to find entrypoint '%s' in %s
1356 = unable to find %s
1357 = C2.DLL unsupported flag combination %s
1358 = module (key=0x%x) information unavailable
1382 = the PCH file '%s' has been rebuilt since '%s' was generated. Please rebuild this object
1383 = compiler option /GL is incompatible with the installed version of common language runtime
1384 = Incorrect setting for PGO_PATH_TRANSLATION when linking '%s'
1385 = profile guided optimizations not available for Thumb; compile '%s' as ARM or Thumb-2.
1386 = Warbird failed to initialize (0x%x)
1387 = Warbird failed to register data symbol '%s' (0x%x)
1388 = Warbird failed to register function symbol '%s' (0x%x)
1389 = Warbird failed to register data type '%s' (0x%x)
1390 = Warbird failed to register data type field '%s' (0x%x)
1391 = Warbird failed to transform function '%s' (0x%x)
1392 = Warbird %s
1451 = Failed to generate debug information when compiling the call graph for the concurrency::parallel_for_each at: '%s'
1505 = unrecoverable parser look-ahead error
1506 = unrecoverable block scoping error
1507 = previous user errors and subsequent error recovery halt further compilation
1508 = compiler limit: '%$S': more than 65535 argument bytes
1600 = unsupported data type
1601 = unsupported inline assembly opcode
1602 = unsupported intrinsic
1603 = inline assembly branch target out of range by %d bytes
1604 = fatal lambda parsing error: see the lambda definition beginning on line %d
1605 = compiler limit: object file size cannot exceed 4 GB
1852 = '%s' is not a valid precompiled header file
1853 = '%s' precompiled header file is from a different version of the compiler, or the precompiled header is C++ and you are using it from C (or vice versa)
1854 = cannot overwrite information formed during creation of the precompiled header in object file: '%s'
1900 = Il mismatch between '%s' version '%d' and '%s' version '%d'
1902 = Program database manager mismatch; please check your installation
1903 = unable to recover from previous error(s); stopping compilation
1904 = bad provider interaction: %s
1905 = Front end and back end not compatible (must target same processor).
1906 = assembly reference '%ws' not resolved for type '%ws'; missing option '-FU %ws.dll' ?
1907 = unable to recover from previous error(s); stopping compilation
1999 = UNKNOWN FATAL ERROR %$N Please choose the Technical Support command on the Visual C++ %$N Help menu, or open the Technical Support help file for more information
2000 = UNKNOWN ERROR%$N    Please choose the Technical Support command on the Visual C++%$N    Help menu, or open the Technical Support help file for more information
2001 = newline in constant
2002 = invalid wide-character constant
2003 = expected 'defined id'
2004 = expected 'defined(id)'
2005 = #line expected a line number, found '%s'
2006 = '%s': expected "FILENAME" or <FILENAME>
2007 = #define syntax
2008 = '%c': unexpected in macro definition
2009 = cannot reuse macro parameter name '%s'
2010 = '%c': unexpected in macro parameter list
2011 = '%$pS': '%$B' type redefinition
2012 = missing name following '<'
2013 = missing '>'
2014 = preprocessor command must start as first nonwhite space
2015 = too many characters in constant
2016 = C requires that a struct or union have at least one member
2017 = illegal escape sequence
2018 = unknown character '0x%x'
2019 = expected preprocessor directive, found '%c'
2020 = '%$I': '%$B' member redefinition
2021 = expected exponent value, not '%c'
2022 = '%d': too big for character
2023 = '%$I': Alignment (%d) different from prior declaration (%d)
2024 = 'alignas' attribute applies to variables, data members and tag types only
2025 = invalid or corrupted binary module interface file: '%s'
2026 = string too big, trailing characters truncated
2027 = use of undefined type '%$pS'
2028 = struct/union member must be inside a struct/union
2030 = a destructor with 'protected private' accessibility cannot be a member of a class declared 'sealed'
2031 = a virtual destructor with '%s' accessibility is not allowed for this type
2032 = '%$S': function cannot be member of %$B '%$C'
2033 = '%$S': bit field cannot have indirection
2034 = '%$S': type of bit field too small for number of bits
2035 = a non-virtual destructor with '%s' accessibility is not allowed for this type
2036 = '%$T': unknown size
2037 = left of '%$I' specifies undefined struct/union '%$S'
2038 = the std namespace cannot be inline
2039 = '%1$*': is not a member of '%2$pS'
2040 = '%$*': '%$T' differs in levels of indirection from '%$T'
2041 = illegal digit '%c' for base '%d'
2042 = signed/unsigned keywords mutually exclusive
2043 = illegal break
2044 = illegal continue
2045 = '%$I': label redefined
2046 = illegal case
2047 = illegal default
2048 = more than one default
2049 = '%$S': non-inline namespace cannot be reopened as inline
2050 = switch expression not integral
2051 = case expression not constant
2052 = '%$T': illegal type for case expression
2053 = '%$S': wide string mismatch
2054 = expected '(' to follow '%$*'
2055 = expected formal parameter list, not a type list
2056 = illegal expression
2057 = expected constant expression
2058 = constant expression is not integral
2059 = syntax error: '%$*'
2060 = syntax error: end of file found
2061 = syntax error: identifier '%$I'
2062 = type '%$T' unexpected
2063 = '%$S': not a function
2064 = term does not evaluate to a function taking %d arguments
2065 = '%$I': undeclared identifier
2066 = cast to function type is illegal
2067 = cast to array type is illegal
2068 = illegal use of overloaded function. Missing argument list?
2069 = cast of 'void' term to non-'void'
2070 = '%$T': illegal sizeof operand
2071 = '%$S': illegal storage class
2072 = '%$S': initialization of a function
2074 = '%$S': '%$B' initialization requires a brace-enclosed initializer list
2075 = '%1$I': initialization requires a brace-enclosed initializer list
2076 = a brace-enclosed initializer list cannot be used in a new-expression whose type contains '%$T'
2077 = non-scalar field initializer '%$pS'
2078 = too many initializers
2079 = '%$S' uses undefined %$B '%$S'
2080 = '%$I': the type for '%$T' can only be deduced from a single initializer expression
2081 = '%$S': name in formal parameter list illegal
2082 = redefinition of formal parameter '%$I'
2083 = %$B comparison illegal
2084 = function '%$pD' already has a body
2085 = '%$I': not in formal parameter list
2086 = '%$pD': redefinition
2087 = '%$I': missing subscript
2088 = '%$L': illegal for %$B
2089 = '%$S': '%$B' too large
2090 = function returns array
2091 = function returns function
2092 = '%$I' array element type cannot be function or abstract class type
2093 = '%$S': cannot be initialized using address of automatic variable '%$pS'
2094 = label '%$S' was undefined
2095 = '%s': actual parameter has type 'void': parameter %d
2096 = '%$I': A data member cannot be initialized with a parenthesized initializer
2097 = illegal initialization
2098 = unexpected token after data member '%$I'
2099 = initializer is not a constant
2100 = illegal indirection
2101 = '%$L' on constant
2102 = '%$L' requires l-value
2103 = '%$L' on register variable
2104 = '%$L' on bit field ignored
2105 = '%$L' needs l-value
2106 = '%$L': left operand must be l-value
2107 = illegal index, indirection not allowed
2108 = subscript is not of integral type
2109 = subscript requires array or pointer type
2110 = '%$L': cannot add two pointers
2111 = '%$L': pointer addition requires integral operand
2112 = '%$L': pointer subtraction requires integral or pointer operand
2113 = '%$L': pointer can only be subtracted from another pointer
2114 = '%$L': pointer on left; needs integral value on right
2115 = '%$L': incompatible types
2116 = '%$pS': function parameter lists do not match between declarations
2117 = '%$pS': array bounds overflow
2118 = negative subscript
2119 = '%$I': the type for '%$T' cannot be deduced from an empty initializer
2120 = 'void' illegal with all types
2121 = '#': invalid character: possibly the result of a macro expansion
2122 = '%$*': prototype parameter in name list illegal
2123 = '%$I': alias templates cannot be explicitly or partially specialized
2124 = divide or mod by zero
2127 = '%$S': illegal initialization of '%$L' entity with a non-constant expression
2128 = '%$pS': alloc_text/same_seg applicable only to functions with C linkage
2129 = static function '%$pD' declared but not defined
2130 = #line expected a string containing the filename, found '%$L'
2131 = expression did not evaluate to a constant
2132 = syntax error: unexpected identifier
2133 = '%$S': unknown size
2135 = '%$L': this operation is not supported on a bit-field
2136 = authoring API contract not allowed
2137 = empty character constant
2138 = illegal to define an enumeration without any members
2139 = '%$pS': an undefined class is not allowed as an argument to compiler intrinsic type trait '%$L'
2140 = '%$T': a type that is dependent on a generic type parameter is not allowed as an argument to compiler intrinsic type trait '%$L'
2141 = array size overflow
2142 = function declarations differ, variable parameters specified only in one of them
2143 = syntax error: missing '%$L' before '%$*'
2144 = syntax error: '%$*' should be preceded by '%$L'
2145 = syntax error: missing '%$L' before identifier
2146 = syntax error: missing '%$L' before identifier '%$I'
2147 = syntax error: '%$L' is a new keyword
2148 = total size of array must not exceed 0x%X bytes
2149 = '%$S': named bit field cannot have zero width
2150 = '%$S': bit field must have type 'int', 'signed int', or 'unsigned int'
2151 = more than one language attribute
2152 = '%$L': pointers to functions with different attributes
2153 = integer literals must have at least one digit
2154 = '%$T': only enumeration type is allowed as an argument to compiler intrinsic type trait '%$L'
2155 = '?': invalid left operand, expected arithmetic or pointer type
2156 = pragma must be outside function
2157 = '%$I': must be declared before use in pragma list
2158 = '%$S': #pragma make_public directive is currently supported for native non-template types only
2159 = more than one storage class specified
2160 = '##' cannot occur at the beginning of a macro definition
2161 = '##' cannot occur at the end of a macro definition
2162 = expected macro formal parameter
2164 = '%$S': intrinsic function not declared
2165 = '%$L': cannot modify pointers to data
2166 = l-value specifies const object
2167 = '%s': too many actual parameters for intrinsic function
2168 = '%s': too few actual parameters for intrinsic function
2169 = '%$S': intrinsic function, cannot be defined
2170 = '%$I': not declared as a function, cannot be intrinsic
2171 = '%$L': illegal on operands of type '%$T'
2172 = '%s': actual parameter is not a pointer: parameter %d
2173 = '%s': actual parameter is not a pointer: parameter %d, parameter list %d
2174 = '%s': actual parameter has type 'void': parameter %d, parameter list %d
2175 = '%s': invalid locale
2176 = a return statement cannot appear in the handler of a function-try-block associated with a constructor
2177 = constant too big
2178 = '%1$S' cannot be declared with '%2$L' specifier
2179 = '%$T': an attribute argument cannot use type parameters
2180 = controlling expression has type '%$T'
2181 = illegal else without matching if
2182 = '%$I': this use of 'void' is not valid
2183 = syntax error: translation unit is empty
2184 = '%$T': illegal type for __except expression
2185 = '%$S': illegal based allocation
2186 = '%$L': illegal operand of type 'void'
2187 = syntax error: '%1$*' was unexpected here
2188 = '%d': too big for wide character
2189 = 'alignas' attribute cannot be applied to a bit-field, a function parameter, an exception declaration, or a variable declared with 'register' storage class
2190 = first parameter list longer than second
2191 = second parameter list longer than first
2192 = parameter '%d' declaration different
2193 = '%$pS': already in a segment
2194 = '%$S': is a text segment
2195 = '%$S': is a data segment
2196 = case value '%$*' already used
2197 = '%$*': too many arguments for call
2198 = '%$*': too few arguments for call
2199 = syntax error: found '%$* (' at global scope (was a declaration intended?)
2200 = '%$pS': function has already been defined
2201 = '%$S': must have external linkage in order to be exported/imported
2202 = '%s': not all control paths return a value
2203 = delete operator cannot specify bounds for an array
2204 = '%$S': type definition found within parentheses
2205 = '%$S': cannot initialize extern variables with block scope
2206 = '%$S': typedef cannot be used for function definition
2207 = '%$S': a member of a class template cannot acquire a function type
2208 = '%$T': no members defined using this type
2209 = '%$S': aliases cannot be used in constructor declarations
2210 = '%$S': pack expansions cannot be used as arguments to non-packed parameters in alias templates
2211 = A non-virtual destructor in a ref class derived from a ref class with a public destructor must also be public
2212 = '%$S': __based not available for pointers to functions
2213 = '%$I': illegal argument to __based
2214 = pointers based on 'void' require the use of:>
2215 = '%$L' cannot be used with '/arch:SSE'
2216 = '%$L' cannot be used with '%$L'
2217 = '%$L' requires '%$L'
2218 = '%$L' cannot be used with '/arch:IA32'
2219 = syntax error: type qualifier must be after '*'
2220 = the following warning is treated as an error
2222 = unexpected type '%$T': a base-class or member was expected
2223 = left of '->%$I' must point to struct/union
2224 = left of '.%$I' must have struct/union type
2225 = invalid epilogue branch instruction
2226 = syntax error: unexpected type '%$S'
2227 = left of '->%$I' must point to class/struct/union/generic type
2228 = left of '.%$I' must have class/struct/union
2229 = %$B '%$C' has an illegal zero-sized array
2230 = could not find module '%s'
2231 = '.%$*': left operand points to '%$B', use '->'
2232 = '->%$*': left operand has '%$B' type, use '.'
2233 = '%$I': arrays of objects containing zero-size arrays are illegal
2234 = '%$I': arrays of references are illegal
2235 = mismatching target architecture for compiled module interface for '%s' from '%s'
2236 = unexpected token '%$*'. Did you forget a ';'?
2237 = multiple module declaration
2238 = unexpected token(s) preceding '%$L'
2239 = '%$D': attempting to delete a __declspec(dllexport) function
2240 = 'export module %s;' is no longer supported: use 'export import %s;' instead
2241 = '%$pS': member access is restricted
2243 = '%$L': conversion from '%$T' to '%$T' exists, but is inaccessible
2244 = '%$pS': unable to match function definition to an existing declaration
2245 = non-existent member function '%$S' specified as friend (member function signature does not match any overload)
2246 = '%$S': illegal static data member in locally defined class
2247 = '%$pS' not accessible because '%$pC' uses '%s' to inherit from '%$pC'
2248 = '%$pS': cannot access %s %s declared in class '%$pC'
2249 = '%$pS': no accessible path to %s %s declared in virtual base '%$pC'
2250 = '%$S': ambiguous inheritance of '%$D'
2251 = namespace '%$S' does not have a member '%$I' - Did you mean '%$S'?
2252 = an explicit instantiation of a template can only occur at namespace scope
2253 = '%$*': pure specifier or abstract override specifier only allowed on virtual function
2254 = '%$S': pure specifier or abstract override specifier not allowed on friend function
2255 = '%$L': not allowed outside of a class definition
2256 = illegal use of friend specifier on '%$S'
2257 = '%$L': specifier not allowed in trailing return type
2258 = illegal pure syntax, must be '= 0'
2259 = '%$pS': cannot instantiate abstract class
2260 = '%s': invalid InternalsVisibleToAttribute friend assembly specifier
2261 = '%s': assembly reference is invalid and cannot be resolved
2262 = '%s': InternalsVisibleTo declarations cannot have a version, culture, or processor architecture specified
2263 = '%s': a translation unit cannot be imported into itself
2264 = '%$S': error in function definition or declaration; function not called
2266 = '%$S': reference to a non-constant bounded array is illegal
2267 = '%$S': static functions with block scope are illegal
2268 = '%s' is a compiler predefined library helper. Library helpers are not supported with /GL; compile object file '%s' without /GL.
2269 = cannot create a pointer or reference to a qualified function type (requires pointer-to-member)
2270 = '%$I': modifiers not allowed on nonmember functions
2271 = '%$I': new/delete cannot have formal list modifiers
2272 = '%$I': modifiers not allowed on static member functions
2273 = '%$L': illegal as right side of '->' operator
2274 = '%$L': illegal as right side of '.' operator
2275 = '%$*': expected an expression instead of a type
2276 = '%$*': illegal operation on bound member function expression
2277 = '%$pS': cannot take address of this member function
2278 = '__has_cpp_attribute' requires an identifier
2279 = exception specification cannot appear in a typedef declaration
2280 = '%$pD': attempting to reference a deleted function
2281 = '%$pD': a function can only be deleted on the first declaration
2282 = '%$S' cannot override '%$S'
2283 = '%$S': pure specifier or abstract override specifier not allowed on unnamed %$B
2284 = '%s': illegal argument to intrinsic function, parameter %d
2285 = pointers to members representation has already been determined - pragma ignored
2286 = pointers to members of '%$pC' representation is already set to %$M - declaration ignored
2287 = '%$pS': inheritance representation: '%$M' is less general than the required '%$M'
2288 = preprocessing number '%s' is not a valid integer or floating literal
2289 = same type qualifier used more than once
2290 = C++ '%$L' syntax ignored. Use __asm.
2291 = An anonymous namespace cannot be exported.
2292 = '%$pS': best case inheritance representation: '%$M' declared but '%$M' required
2293 = '%$pS': illegal to have a member variable as a __based specifier
2294 = cannot export symbol '%$S' because it has internal linkage
2295 = escaped '%c': is illegal in macro definition
2296 = '%1$L': not valid as left operand has type '%2$T'
2297 = '%1$L': not valid as right operand has type '%2$T'
2298 = missing call to bound pointer to member function
2299 = '%$S': behavior change: an explicit specialization cannot be a copy constructor or copy assignment operator
2300 = '%1$C': class does not have a %2$[FINALIZER DTOR] called '%3$[EXCLAIM TILDE]%4$I'
2301 = left of '->%$[EXCLAIM TILDE]%$I' must point to class/struct/union
2302 = left of '.%$[EXCLAIM TILDE]%$I' must have class/struct/union type
2303 = Structured exception handling cannot be used in a coroutine
2304 = '%$L' cannot be used inside of a catch block
2305 = '%s' does not contain debugging information for this module
2306 = '%s' does not contain the most recent debugging information for this module
2308 = concatenating mismatched strings
2309 = catch handler expected a parenthesized exception declaration
2310 = catch handlers must specify one type
2311 = '%$T': is caught by '...' on line %d
2312 = '%$T': is caught by '%$T' on line %d
2313 = '%$T': is caught by reference ('%$T') on line %d
2314 = keyword '%$L' is deprecated: use '%$L' instead
2315 = '%$T': reference is caught by '%$T' on line %d
2316 = '%$T': cannot be caught as the destructor and/or copy constructor are inaccessible or deleted
2317 = 'try' block starting on line '%d' has no catch handlers
2318 = no try block associated with this catch handler
2319 = '%$L' must be followed by a compound statement. Missing '{'
2320 = expected ':' to follow access specifier '%$L'
2321 = '%$I' is a keyword, and cannot be used in this context
2322 = '%$S': address of dllimport '%$pS' is not static
2323 = '%$S': non-member operator new or delete functions may not be declared static or in a namespace other than the global namespace
2324 = '%$I': unexpected to the right of '%$L%$[EXCLAIM TILDE]'
2325 = '%$T': unexpected type to the right of '%$L%$[EXCLAIM TILDE]': expected '%$T'
2326 = '%$D': function cannot access '%$S'
2327 = '%$pS': is not a type name, static, or enumerator
2328 = '%$I': keyword is not yet supported
2329 = '%$S': __ptr64 not available for pointers to functions
2330 = 'implementation_key( )' is only valid in a region bounded by #pragma start_map_region/stop_map_region
2331 = access to '%$pS' now defined to be '%s', previously it was defined to be '%s'
2332 = '%s': missing tag name
2333 = '%$S': error in function declaration; skipping function body
2334 = unexpected token(s) preceding '%$L'; skipping apparent function body
2335 = '%$S': a type cannot be introduced in a function parameter list
2337 = '%$I': attribute not found
2338 = static_assert failed: '%1s'
2339 = '%$S': illegal type in embedded-IDL
2340 = '%$S': 'static' can only be used within a class definition
2341 = '%s': segment must be defined using #pragma data_seg, code_seg or section prior to use
2342 = syntax error: conflicting type qualifiers
2343 = '%s': conflicting section attributes
2344 = align(%ld): alignment must be power of two
2345 = align(%ld): illegal alignment value
2346 = '%s' cannot be compiled as native: '%s'
2348 = '%$S': is not a C-style aggregate, cannot be exported in embedded-IDL
2349 = '%s' cannot be compiled as managed: '%s'; use #pragma unmanaged
2350 = '%$pS' is not a static member
2351 = obsolete C++ constructor initialization syntax
2352 = '%1$pS': a call of a non-static member function requires an object
2353 = exception specification is not allowed
2355 = 'this': can only be referenced inside non-static member functions or non-static data member initializers
2356 = initialization segment must not change during translation unit
2357 = '%$I': must be a function of type '%$T'
2358 = '%$pS': a static property cannot be defined outside of a class definition
2360 = initialization of '%$pS' is skipped by 'case' label
2361 = initialization of '%$pS' is skipped by 'default' label
2362 = initialization of '%1$S' is skipped by 'goto %2$pS'
2363 = compiler intrinsic numeric limit function requires a string literal argument
2364 = '%$T': illegal type for custom attribute
2365 = '%$pS': redefinition; previous definition was '%$M'
2366 = '%$pS': redefinition; different implementation_key specifiers
2368 = '%$pS': redefinition; different allocation specifiers
2369 = '%$pS': redefinition; different subscripts
2370 = '%$pS': redefinition; different storage class
2371 = '%$pS': redefinition; different basic types
2372 = '%$pS': redefinition; different types of indirection
2373 = '%$pS': redefinition; different type modifiers
2374 = '%$pS': redefinition; multiple initialization
2375 = '%$pS': redefinition; different linkage
2376 = '%$pS': redefinition; different based allocation
2377 = '%$pS': redefinition; typedef cannot be overloaded with any other symbol
2378 = '%$pS': redefinition; symbol cannot be overloaded with a typedef
2379 = formal parameter %d has different type when promoted
2380 = type(s) preceding '%$*' (constructor with return type, or illegal redefinition of current class-name?)
2381 = '%$pS': redefinition; 'noreturn' differs
2382 = '%$pS': redefinition; different exception specifications
2383 = '%$S': default-arguments are not allowed on this symbol
2384 = '%$S': cannot apply thread_local or __declspec(thread) to a member of a %$&[MANAGED WINRT] class
2385 = ambiguous access of '%$I'
2386 = '%$I': a symbol with this name already exists in the current scope
2387 = '%$I': ambiguous base class
2388 = '%$S': a symbol cannot be declared with both __declspec(appdomain) and __declspec(process)
2389 = '%$L': illegal operand 'nullptr'
2390 = '%$S': incorrect storage class '%$L'
2391 = '%$S': 'friend' cannot be used during type definition
2392 = '%$D': covariant returns types are not supported in %$&[MANAGED WINRT] types, otherwise '%$pD' would be overridden
2393 = '%$S': per-appdomain symbol cannot be allocated in segment '%$S'
2394 = '%$S': %$&[CLR WINRT] operator not valid. At least one parameter must be of the following types:%$N	 %s, where T = '%$S'
2395 = '%$S': %$&[CLR WINRT] operator not valid. At least one parameter must be of the following types:%$N	 %s, where T = '%$S'
2396 = '%$S': %$&[CLR WINRT] user-defined conversion function not valid. Must either convert from or convert to:%$N	 %s, where T = '%$S'
2397 = conversion from '%$T' to '%$T' requires a narrowing conversion
2398 = Element '%1d': conversion from '%2$T' to '%3$T' requires a narrowing conversion
2400 = inline assembler syntax error in '%$M'; found '%s'
2401 = '%$I': register must be base in '%$M'
2402 = '%$I': register must be index in '%$M'
2403 = '%$I': register must be base/index in '%$M'
2404 = '%$I': illegal register in '%$M'
2405 = illegal short forward reference with offset
2406 = '%$I': name undefined in '%$M'
2407 = illegal 'float' register in '%$M'
2408 = illegal type on PTR operator in '%$M'
2409 = illegal type used as operator in '%$M'
2410 = '%$I': ambiguous member name in '%$M'
2411 = '%$I': illegal struct/union member in '%$M'
2412 = '%$pS': case-insensitive label redefined
2413 = '%$I': illegal align size
2414 = illegal number of operands
2415 = improper operand type
2416 = attribute '%s' cannot be applied in this context
2417 = divide by zero in '%$M'
2418 = cannot delete browser file: %s
2419 = mod by zero in '%$M'
2420 = '%$I': illegal symbol in %$M
2421 = PTR operator used with register in '%$M'
2422 = illegal segment override in '%$M'
2423 = '%d': illegal scale
2424 = '%s': improper expression in '%$M'
2425 = '%s': non-constant expression in '%$M'
2426 = '%s': illegal operator in '%$M'
2427 = '%$pS': cannot define class in this scope
2428 = '%$L': not allowed on operand of type 'bool'
2429 = %$M '%$M' requires compiler flag '%$M'
2430 = more than one index register in '%$M'
2431 = illegal index register in '%$M'
2432 = illegal reference to 16-bit data in '%$M'
2433 = '%$S': '%$L' not permitted on data declarations
2434 = '%$S': a symbol declared with __declspec(process) cannot be dynamically initialized in /clr:pure mode
2435 = '%$S': dynamic initialization requires managed CRT, cannot compile with /clr:safe
2436 = '%$I': member function or nested class in constructor initializer list
2437 = '%$I': has already been initialized
2438 = '%$I': cannot initialize static class data via constructor
2439 = '%$pS': member could not be initialized
2440 = '%$L': cannot convert from '%$T' to '%$T'
2441 = '%$S': a symbol declared with __declspec(process) must be const in /clr:pure mode
2442 = '%$I': nested-namespace-definition cannot be inline or have attributes
2443 = operand size conflict
2444 = '%$pS': used ANSI prototype, found 'type', expected '{' or ';'
2445 = result type of conditional expression is ambiguous: types '%$T' and '%$T' can be converted to multiple common types
2446 = '%$L': no conversion from '%$T' to '%$T'
2447 = '%$L': missing function header (old-style formal list?)
2449 = found '{' at file scope (missing function header?)
2450 = a switch expression of type '%1$T' is not valid
2451 = a conditional expression of type '%1$T' is not valid
2452 = '%$T': invalid source type for safe_cast
2453 = '%$T': invalid target type for safe_cast
2454 = '%$I': namespace alias name cannot be declared using a qualified name
2455 = '%$S' a WinRT ref class that derives from an imported base class cannot be abstract.
2456 = '%$S' an unsealed ref class cannot have a public visible constructor. Seal the class, or specify constructor as 'internal', 'protected private' or 'private' instead.
2457 = '%$I': predefined macro cannot appear outside of a function body
2458 = '%$pS': redefinition within definition
2459 = '%$pS': is being defined; cannot add as an anonymous member
2460 = '%$S': uses '%$pS', which is being defined
2461 = '%$S': constructor syntax missing formal parameters
2462 = '%$S': cannot define a type in a 'new-expression'
2464 = '%$T': cannot use 'new' to allocate a reference
2465 = cannot define an anonymous type inside parentheses
2466 = cannot allocate an array of constant size 0
2467 = illegal declaration of anonymous '%$B'
2468 = constructor cannot be '%$[CONSTEXPR CONSTEVAL]' in a class or struct with virtual base classes
2469 = 'new': cannot allocate 'void' objects
2470 = '%$S': looks like a function definition, but there is no parameter list; skipping apparent body
2471 = cannot update program database '%s'
2472 = '%s' cannot be generated in managed code: '%s'; compile with /clr to generate a mixed image
2473 = '%$I': looks like a function definition, but there is no parameter list.
2474 = '%$I': missing an adjacent semicolon, could be either keyword or identifier.
2475 = '%$pS': redefinition; '%$L' specifier mismatch
2477 = '%$S': static data member cannot be initialized via derived class
2479 = '%$S': 'allocate( )' is only valid for data items of static extent
2480 = '%$S': 'thread' is only valid for data items of static extent
2481 = '%$S': thread_local is only valid on static members and variables at namespace or block scope
2482 = '%$S': dynamic initialization of thread local data not allowed in %$&[MANAGED WINRT] code
2483 = '%$S': object with destructor or non-aggregate type cannot be declared with thread storage duration in %$&[MANAGED WINRT] code
2485 = '%$I': unrecognized extended attribute
2486 = '__LOCAL_SIZE' only allowed in function with the 'naked' attribute
2487 = '%$S': member of dll interface class may not be declared with dll interface
2488 = '%$S': 'naked' can only be applied to non-member function definitions
2489 = '%$S': initialized auto or register variable not allowed at function scope in 'naked' function
2490 = '%$*' not allowed in function with 'naked' attribute
2491 = '%$S': definition of dllimport %$M not allowed
2492 = '%$S': data with thread storage duration may not have dll interface
2493 = illegal form of __based
2494 = '%1s' cannot be called from within a filter expression or %2$^[__FINALLY FINALLY] block
2495 = '%$S': '__declspec(%s)' can only be applied to function declarations or definitions
2496 = '%$S': 'selectany' can only be applied to data items with external linkage
2497 = '%$S': 'implementation_key' can only be applied to function declarations
2498 = '%$S': 'novtable' can only be applied to class declarations or definitions
2499 = '%$S': a class cannot be its own base class
2500 = '%$S': '%$pS' is already a direct base class
2501 = '%$S': '__declspec(%s)' can only be applied to structs, unions, classes, or unsigned bit field members
2502 = '%$S': too many access modifiers on the base class
2503 = '%$S': base classes cannot contain zero-sized arrays
2504 = '%$*': base class undefined
2505 = '%$S': '__declspec(%s)' can only be applied to declarations or definitions of global objects or static data members
2506 = '%$S': '__declspec(%s)' cannot be applied to this symbol
2507 = '%$S': too many virtual modifiers on the base class
2508 = '%$I': '__declspec(%s)' cannot be combined with '__declspec(%s)'
2509 = '%$I': member function not declared in '%$pC'
2510 = '%$I': left of '::' must be a class/struct/union
2511 = '%$D': overloaded member function not found in '%$pC'
2512 = '%$S': no appropriate default constructor available
2513 = '%$*': no variable declared before '='
2514 = '%$pC': class template cannot be constructed
2515 = '%$S': 'vtguard' can only be applied to class declarations or definitions
2516 = '%$pS': is not a legal base class
2518 = keyword '%$L' is invalid in a base class list; expected a class name
2519 = '%$S': WinRT attributes may only contain public fields
2521 = a %$[FINALIZER DTOR] does not take any arguments
2522 = '%$I': Overload identifier cannot be used on '%$D' as it's already specified on '%$D'
2523 = '%$C::%$[EXCLAIM TILDE]%$I': %$[FINALIZER DTOR] tag mismatch
2524 = '%$S': a %$[FINALIZER DTOR] must have a 'void' parameter list
2525 = '%$S': The parameter '%$I' is named '%$I' on the base function and must be matched in a published implementation
2526 = '%$S': C linkage function cannot return C++ class '%$pS'
2527 = '%$S': DefaultOverload cannot be specified on both '%$D' and '%$D'. Remove one specification or rename the function during implementation
2528 = '%$I': you cannot create a pointer to a reference
2529 = '%$I': you cannot create a reference to a reference
2530 = '%$S': references must be initialized
2531 = '%$S': you cannot bind a reference to a bit-field
2532 = '%$L': illegal modifier for reference
2533 = '%$S': constructors not allowed a return type
2534 = '%$pS': constructor cannot return a value
2535 = '%$pD': member function already defined or declared
2537 = '%s': illegal linkage specification
2540 = non-constant expression as array bound
2541 = '%$L': cannot delete objects that are not pointers
2542 = '%$S': class object has no constructor for initialization
2543 = expected ']' for operator '[]'
2544 = expected ')' for operator '()'
2545 = '%$L': unable to find overloaded operator
2546 = '%$S': when a type is defined in both a PIA and a no-PIA the PIA must be referenced first
2547 = '%$S': All parameters of a published method must be explicitly named on the declaration
2548 = '%$S': missing default argument for parameter %d
2549 = '%1$T': a conversion function cannot specify a return type
2550 = '%$S': constructor initializer lists are only allowed on constructor definitions
2551 = 'void *' type needs explicit cast
2552 = '%$S': non-aggregates cannot be initialized with an initializer list
2553 = '%$D': overriding virtual function return type differs from '%$pD'
2554 = '%$*': 'constinit' only allowed on a variable declaration with static or thread storage duration
2555 = '%$S': overriding virtual function return type differs and is not covariant from '%$pS'
2556 = '%$D': overloaded function differs only by return type from '%$pD'
2557 = '%$S': private and protected members cannot be initialized without a constructor
2558 = %$B '%$C': no copy constructor available or copy constructor is declared 'explicit'
2559 = '%$D': cannot overload a member function without ref-qualifier with a member function with ref-qualifier
2560 = '%$D': cannot overload a member function with ref-qualifier with a member function without ref-qualifier
2561 = '%$pS': function must return a value
2562 = '%$pS': 'void' function returning a value
2563 = mismatch in formal parameter list
2565 = '%$S': ref-qualifier is illegal for constructors/destructors
2566 = overloaded function in conditional expression
2567 = unable to open metadata in '%s', %s
2568 = '%$L': unable to resolve function overload
2569 = '%$pS': enum/union cannot be used as a base class
2570 = '%$S': union cannot have base classes
2571 = '%$S': virtual function cannot be in union '%$S'
2572 = '%$pS': redefinition of default argument: parameter %d
2573 = '%$pC': cannot delete pointers to objects of this type; the class has no non-placement overload for 'operator delete'.%$NUse::delete, or add 'operator delete(void*)' to the class
2574 = '%$D': cannot be declared static
2575 = '%$S': only member functions and bases can be virtual
2576 = '%$S': cannot introduce a new virtual method as 'public'. Consider making the method non-virtual, or change the accessibility to 'internal' or 'protected private'
2577 = '%$S': a %$[FINALIZER DTOR] cannot have a return type
2578 = '%$S': type cannot have a 'protected' or 'protected public' constructor
2579 = unable to resolve type %s (0x%x). It is expected in %s
2580 = '%$D': multiple versions of a defaulted special member functions are not allowed
2581 = '%$C': static 'operator =' function is illegal
2582 = 'operator %$L' function is unavailable in '%$C'
2583 = '%$S': '%$L' 'this' pointer is illegal for constructors/destructors
2584 = '%$S': direct base '%$pS' is inaccessible; already a base of '%$pS'
2586 = incorrect user-defined conversion syntax: illegal indirections
2587 = '%$pS': illegal use of local variable as default parameter
2588 = '::%$[EXCLAIM TILDE]%$I': illegal global %$[FINALIZER DTOR]
2589 = '%$L': illegal token on right side of '::'
2590 = '%$I': only a constructor can have a base/member initializer list
2591 = ExclusiveTo cannot use '%$T' as an argument. Only a 'ref class' is a valid argument
2592 = '%$S': '%$S' is inherited from '%$S' and cannot be re-specified
2593 = 'operator %1$*' is ambiguous
2594 = '%$L': ambiguous conversions from '%$T' to '%$T'
2595 = '%$S' A WinRT attribute type must be sealed
2596 = '%$I' A WinRT attribute field can only be a 'public enum class', 'int', 'unsigned int', 'bool', 'Platform::Type', 'Platform::String' or 'Windows::Foundation::HResult'
2597 = illegal reference to non-static member '%$pS'
2598 = linkage specification must be at global scope
2599 = '%$I': the forward declaration of a %$&[MANAGED WINRT] enum is not allowed
2600 = '%$S': cannot define a compiler-generated special member function (must be declared in the class first)
2601 = '%$S': local function definitions are illegal
2602 = '%$pS' is not a member of a base class of '%$pC'
2603 = '%$S': Too many block scope static objects with constructor/destructors in function
2604 = '%$S': Cannot implement more than one interface method
2605 = '%$I': this method is reserved within a %$&[MANAGED WINRT] class
2606 = '%$S': cannot re-implement '%$S', as it is inherited from runtime base '%$S'
2607 = static assertion failed
2608 = invalid token '%s' in macro parameter list
2609 = missing ')' in macro parameter list
2610 = '%$D': is not a special member function or comparison operator which can be defaulted
2611 = '%$L': illegal following '%$[EXCLAIM TILDE]' (expected identifier)
2612 = trailing '%$L' illegal in base/member initializer list
2613 = trailing '%$L' illegal in base class list
2614 = '%$S': illegal member initialization: '%$I' is not a base or member
2615 = 'offsetof' cannot be applied to non-class type '%$T'
2616 = '%$L': cannot implicitly convert a non-lvalue '%$T' to a '%$T' that is not const
2617 = '%$pS': inconsistent return statement
2618 = illegal member designator in offsetof
2619 = '%$S': a static data member is not allowed in an anonymous %$B
2624 = '%$S': local classes cannot be used to declare 'extern' variables
2625 = '%$S': illegal union member; type '%$T' is reference type
2626 = '%1$S': a %2s data member is not allowed in an anonymous %3$B
2627 = '%$I': member function not allowed in anonymous union
2628 = '%$*' followed by '%s' is illegal (did you forget a ';'?)
2629 = '%$pS': an anonymous %$B cannot declare a nested type
2630 = '%$*' found in what should be a comma-separated list
2631 = '%$I': a class or enum cannot be defined in an alias template
2632 = '%s' followed by '%s' is illegal
2633 = '%$S': 'inline' is the only legal storage class for constructors
2634 = '&%$C::%$pS': pointer to reference member is illegal
2635 = cannot convert a '%$pC*' to a '%$pC*'; conversion from a virtual base class is implied
2636 = '%$I': pointer to reference member is illegal
2637 = '%$L': cannot modify pointers to data members
2638 = '%$S': __based modifier illegal on pointer to member
2639 = trailing return type '%1$T' of deduction guide should be a specialization of '%2$S'
2640 = '%$S': __based modifier illegal on reference
2641 = cannot deduce template arguments for '%$T'
2642 = two deduction guide declarations for the same class template cannot have equivalent parameter list and template head
2643 = deduction guide should be declared in the same scope as the corresponding class template '%$S'
2644 = deduction guide should have the same access as the corresponding class template '%$S'
2646 = an anonymous %$B at global or namespace scope must be declared static
2647 = '%$L': cannot dereference a '%$T' on a '%$T'
2648 = '%$pS': use of member as default parameter requires static member
2649 = '%s': is not a '%s'
2650 = '%$S': cannot be a virtual function
2651 = '%$T': left of '::' must be a class, struct or union
2652 = '%$S': illegal copy constructor: first parameter must not be a '%$pS'
2653 = '%$p*': is not a class or namespace name
2654 = '%$pS': attempt to access member outside a member function
2655 = '%$pS': definition or redeclaration illegal in current scope
2656 = '%$S': function not allowed as a bit field
2657 = '%$C::*' found at the start of a statement (did you forget to specify a type?)
2658 = '%$pS': redefinition in anonymous struct/union
2659 = '%$L': function as left operand
2660 = '%$*': function does not take %d arguments
2661 = '%$*': no overloaded function takes %d arguments
2662 = '%$*': cannot convert 'this' pointer from '%$T' to '%$T'
2663 = '%$*': no overloaded function has valid conversion for 'this' pointer
2664 = '%$*': cannot convert argument %d from '%$T' to '%$T'
2665 = '%$*': no overloaded function could convert all the argument types
2666 = '%$*': overloaded functions have similar conversions
2667 = '%$*': no overloaded function has a best conversion
2668 = '%$*': ambiguous call to overloaded function
2669 = member function not allowed in anonymous union
2670 = '%$*': the function template cannot convert parameter %d from type '%$T'
2671 = '%$S': static member functions do not have 'this' pointers
2672 = '%$S': no matching overloaded function found
2673 = '%$S': global functions do not have 'this' pointers
2674 = a generic declaration is not allowed in this context
2675 = unary '%$L': '%$T' does not define this operator or a conversion to a type acceptable to the predefined operator
2676 = binary '%$L': '%$T' does not define this operator or a conversion to a type acceptable to the predefined operator
2677 = binary '%$L': no global operator found which takes type '%$T' (or there is no acceptable conversion)
2678 = binary '%$L': no operator found which takes a left-hand operand of type '%$T' (or there is no acceptable conversion)
2679 = binary '%$L': no operator found which takes a right-hand operand of type '%$T' (or there is no acceptable conversion)
2680 = '%$T': invalid target type for %$L
2681 = '%$T': invalid expression type for %$L
2682 = cannot use '%$*' to convert from '%$T' to '%$T'
2683 = '%$L': '%$pC' is not a polymorphic type
2684 = '%$D': deleted and defaulted functions are not supported in %$&[MANAGED WINRT] classes
2685 = '%$D': deleted and defaulted functions are not supported with explicit restriction specifiers
2686 = cannot overload static and non-static member functions with the same parameter types
2687 = '%$T': exception-declaration cannot be 'void' or denote an incomplete type or pointer or reference to an incomplete type
2688 = '%$pS': covariant returns with multiple or virtual inheritance not supported for varargs functions
2689 = '%$S': a friend function cannot be defined within a local class
2690 = '%$L': cannot perform pointer arithmetic on a %$&[MANAGED WINRT] array
2691 = '%$T': a %$&[MANAGED WINRT] array cannot have this element type
2692 = '%s': fully prototyped functions required in C compiler with the '/clr' option
2693 = '%$L': illegal comparison for references to a %$&[MANAGED WINRT] array
2694 = '%$pD': overriding virtual function has less restrictive exception specification than base class virtual member function '%$pD'
2695 = '%$S': overriding virtual function differs from '%$pS' only by calling convention
2696 = Cannot create a temporary object of %$^[GC_CLASS REF_CLASS] type '%$T'
2698 = the using-declaration for '%$S' cannot co-exist with the existing using-declaration for '%$S'
2699 = %s
2700 = '%$T': cannot be thrown (use /W4 for more info)
2701 = '%$S': a function %$[TEMPLATE GENERIC] cannot be a friend of a local class
2702 =  __except may not appear in termination block
2703 = illegal __leave statement
2704 = '%$S': __va_start intrinsic only allowed in varargs
2705 = '%$*': illegal jump into '%$L' scope
2706 = illegal __except without matching __try (missing '}' in __try block?)
2707 = '%s': bad context for intrinsic function
2708 = '%$pS': actual parameters length in bytes differs from previous call or reference
2709 = '%$pS': formal parameters length in bytes differs from previous declaration
2710 = '%$S': '__declspec(%s)' can only be applied to a function returning a pointer
2711 = '%$S': this function cannot be compiled as managed, consider using #pragma unmanaged
2712 = Cannot use __try in functions that require object unwinding
2713 = Only one form of exception handling permitted per function
2714 = alignof(void) is not allowed
2715 = '%$T': cannot throw or catch this type
2718 = '%$T': actual parameter with requested alignment of %d won't be aligned
2719 = '%$S': formal parameter with requested alignment of %d won't be aligned
2720 = '%$S': '%s' storage-class specifier illegal on members
2721 = '%$L': storage-class specifier illegal between operator keyword and type
2723 = '%$S': '%$L' specifier illegal on function definition
2724 = '%$S': 'static' should not be used on member functions defined at file scope
2725 = '%$T': unable to throw or catch a %$&[MANAGED WINRT] object by value or reference
2726 = '%$^[GC_NEW GCNEW]' may only be used to create an object with %$&[MANAGED WINRT] type
2728 = '%$T': a native array cannot contain this type
2730 = '%$S': cannot be a base class of itself
2731 = '%$pS': function cannot be overloaded
2732 = linkage specification contradicts earlier specification for '%$pS'
2733 = '%1$I': you cannot overload a function with 'extern "C"' linkage
2734 = '%$S': 'const' object must be initialized if not 'extern'
2735 = '%$L' keyword is not permitted in formal parameter type specifier
2736 = '%$L' keyword is not permitted in cast
2737 = '%1$*': %2$L object must be initialized
2738 = 'operator %$T': is ambiguous or is not a member of '%$pS'
2739 = '%ld': explicit %$&[MANAGED WINRT] array dimensions must be between 1 and 32
2740 = value of operand '%d' is out of range '%d - %d'
2741 = frame size too large
2743 = '%$T': cannot catch a native type with __clrcall destructor or copy constructor
2744 = '%$S' is not a valid %$&[CLR WINRT] operator
2745 = '%$L': this token cannot be converted to an identifier
2748 = %$&[MANAGED WINRT] array creation must have array size or array initializer
2749 = '%$T': can only throw or catch handle to a managed class with /clr:safe
2750 = '%$S': cannot use 'new' on the reference type; use 'gcnew' instead
2751 = '%$S': the name of a function parameter cannot be qualified
2752 = '%$S': more than one partial specialization matches the template argument list
2753 = '%$S': partial specialization cannot match argument list for primary template
2754 = '%$S': a partial specialization cannot have a dependent non-type template parameter
2755 = '%$S': non-type parameter of a partial specialization must be a simple identifier
2756 = '%$pS': default template arguments not allowed on a partial specialization
2757 = '%$I': a symbol with this name already exists and therefore this name cannot be used as a namespace name
2759 = in-line assembler reports: %s
2760 = syntax error: '%1$*' was unexpected here; expected '%2$*'
2761 = '%$D': redeclaration of member is not allowed
2762 = '%1$qS': invalid expression as a template argument for '%2$S'
2763 = '%1$qS': invalid use of a string literal as a template argument for '%2$S'
2764 = '%$S': template parameter not used or deducible in partial specialization '%$S'
2765 = '%$S': an explicit specialization or instantiation of a function template cannot have any default arguments
2766 = explicit specialization; '%$p*' has already been defined
2767 = %$&[MANAGED WINRT] array dimension mismatch: expected %d argument(s) - %z provided
2768 = '%$S': illegal use of explicit template arguments
2769 = you cannot brace initialize a %$&[MANAGED WINRT] array in a base/member initializer list
2770 = invalid explicit %1$[TEMPLATE GENERIC] argument(s) for '%2$qD'
2771 = #import only permitted at global or namespace scope
2773 = #import and #using available only in C++ compiler
2774 = '%$pS': no 'put' method is associated with this property
2775 = '%$pS': no 'get' method is associated with this property
2776 = only one 'get' method can be specified per property
2777 = only one 'put' method can be specified per property
2778 = improperly formed GUID in __declspec(uuid())
2779 = '%$pD': property methods can only be associated with non-static data members
2780 = '%1$qD': expects %2d arguments - %3d provided
2781 = '%1$qD': expects at least %2d argument - %3d provided
2782 = '%1$qD': %2$[TEMPLATE GENERIC] parameter '%3$I' is ambiguous
2783 = '%1$qD': could not deduce %2$[TEMPLATE GENERIC] argument for '%3$I'
2784 = '%1$qD': could not deduce %2$[TEMPLATE GENERIC] argument for '%3$T' from '%4$T'
2785 = '%1$qD' and '%2$pD' have different return types
2786 = '%$T': invalid operand for __uuidof
2787 = '%$S': no GUID has been associated with this object
2788 = '%$S': more than one GUID associated with this object
2789 = '%$pS': an object of const-qualified type must be initialized
2790 = 'super': this keyword can only be used within the body of class member function
2791 = illegal use of 'super': '%$S' does not have any base classes
2792 = 'super': this keyword must be followed by '::'
2793 = '%$L': unexpected token following '::', identifier or keyword 'operator' expected
2794 = '%$I': is not a member of any direct or indirect base class of '%$S'
2795 = 'super::%$S' is not a member function
2796 = 'ref new' may only be used to create an instance of a WinRT type
2797 = '%$S': list initialization inside member initializer list or non-static data member initializer is not implemented
2798 = 'super::%$I' is ambiguous
2799 = '%$pS': an object of const-qualified class type without a user-provided default constructor must be initialized
2800 = 'operator %$L' cannot be overloaded
2801 = '%$S' must be a non-static member
2802 = static member 'operator %$L' has no formal parameters
2803 = 'operator %$L' must have at least one formal parameter of class type
2804 = binary 'operator %$L' has too many parameters
2805 = binary 'operator %$L' has too few parameters
2806 = 'operator %$L' has too many formal parameters
2807 = the second formal parameter to postfix 'operator %$L' must be 'int'
2808 = unary 'operator %$L' has too many formal parameters
2809 = 'operator %$L' has no formal parameters
2810 = '%$S': an interface can only inherit from another interface
2811 = '%$S': cannot inherit from '%$S', a %$^[GC_CLASS REF_CLASS] can only inherit from a %$^[GC_CLASS_OR_INTERFACE REF_CLASS_OR_INTERFACE]
2812 = #import is not supported with /clr:pure and /clr:safe
2813 = #import is not supported with /MP
2814 = '%1$S': a native type cannot be nested within a %2$&[MANAGED WINRT] type '%3$pC'
2815 = 'operator delete': first formal parameter must be 'void *', but '%$T' was used
2816 = invocation of function-like macro '%$I' is missing terminating ')'
2817 = return type for 'operator delete' must be 'void'
2818 = application of overloaded 'operator ->' is recursive through type '%$pC'
2819 = type '%$pC' does not have an overloaded member 'operator ->'
2821 = first formal parameter to 'operator new' must be 'size_t'
2822 = local unwind is not supported on this platform
2823 = a typedef %$[TEMPLATE GENERIC] is illegal
2824 = return type for 'operator new' must be 'void *'
2825 = '%$S': must be a class or namespace when followed by '::'
2829 = 'operator %$L' cannot have a variable parameter list
2830 = only placement parameters to 'operator new' can have default values
2831 = 'operator %$L' cannot have default parameters
2832 = '%$pS': a reference type cannot be value-initialized
2833 = 'operator %$*' is not a recognized operator or type
2835 = user-defined conversion '%$S' takes no formal parameters
2836 = '%$S': only one non-static data member of a union may have a default member initializer
2837 = '%s': cannot use OpenMP directives and #pragma loop(hint_parallel) in same function
2838 = '%$I': illegal qualified name in member declaration
2839 = invalid return type '%$T' for overloaded 'operator ->'
2840 = instruction word argument not constant
2841 = register argument not constant
2842 = '%$S': a %$&[MANAGED WINRT] type may not define its own 'operator new' or 'operator delete'
2843 = '%$S': cannot take the address of a non-static data member or method of a %$&[MANAGED WINRT] type
2844 = '%$I': cannot be a member of interface '%$S'
2845 = '%$T': pointer arithmetic not allowed on this type
2846 = '%$S': an interface cannot have a constructor
2847 = cannot apply sizeof to %$&[MANAGED WINRT] type '%$S'
2848 = '%$S': a %$&[MANAGED WINRT] type cannot be a member of a union
2849 = '%$S': an interface cannot have a destructor
2850 = '%$L': only allowed at file scope; may not be in a nested construct
2851 = '%$S': A public WinRT enum can only use 'int' or 'unsigned int' as a base type
2852 = '%$S': only data members can be initialized within a class
2853 = '%$I': a non-static data member cannot have a type that contains 'auto'
2854 = syntax error in #pragma hdrstop
2855 = command-line option '%s' inconsistent with precompiled header
2856 = #pragma hdrstop cannot be inside an #if block
2857 = '#include' statement specified with the /Yc%s command-line option was not found in the source file
2859 = %s is not the %s file that was used when this precompiled header was created, recreate the precompiled header.
2860 = 'void' cannot be used as a function parameter except for '(void)'
2861 = '%$D': an interface member function cannot be defined
2862 = '%$S': an interface can only have public members
2863 = '%$S': an interface cannot have friends
2864 = '%$S': a static %$[DATA_MEMBER VARIABLE_TEMPLATE] with an in-class initializer must have non-volatile const integral type or be specified as 'inline'
2865 = '%$L': illegal comparison for %$^[WHOLE_OBJECT_PTR HANDLE_TYPE]
2867 = '%$pS': is not a namespace
2868 = '%1$S': ill-formed using-declaration; expected a qualified-name
2869 = '%$pS': has already been defined to be a namespace
2870 = '%$I': a namespace definition must appear either at file scope or immediately within another namespace definition
2871 = '%$I': a namespace with this name does not exist
2872 = '%$I': ambiguous symbol
2873 = '%$p*': symbol cannot be used in a using-declaration
2874 = using-declaration causes a multiple declaration of '%1$p*'
2876 = '%$pS': not all overloads are accessible
2877 = '%$pS' is not accessible from  '%$pC'
2878 = '%$I': a namespace or class of this name does not exist
2879 = '%$pS': only an existing namespace can be given an alternative name by a namespace alias definition
2880 = __swi or __hvc requires a valid constant as first argument (SWI number)
2881 = '%$I': is already used as an alias for '%$pC'
2882 = '%$I': illegal use of namespace identifier in expression
2883 = '%$S': function declaration conflicts with '%$pS' introduced by using-declaration
2884 = '%$pS': introduced by using-declaration conflicts with local function '%$pS'
2885 = '%$pS': not a valid using-declaration at non-class scope
2886 = '%$pS': symbol cannot be used in a member using-declaration
2887 = __swi or __hvc cannot have more than five arguments (SWI number, r0 - r3)
2888 = '%$*': symbol cannot be defined within namespace '%$I'
2889 = '%$S': a %$&[MANAGED WINRT] class type cannot be a virtual base class
2890 = '%$S': a %$^[GC_CLASS REF_CLASS] can only have one non-interface base class
2891 = '%$pS': cannot take the address of a template parameter
2892 = a template cannot be a member of a local class
2893 = Failed to specialize function template '%1$qD'
2894 = templates cannot be declared to have 'C' linkage
2895 = '%$pD': cannot explicitly instantiate a function template that has been declared with dllimport
2897 = a %$[FINALIZER DTOR] cannot be a function template
2898 = '%$D': member function templates cannot be virtual
2900 = '%$D': member function templates in WinRT classes must be 'private', 'internal' or 'protected private'
2901 = '%$S': A generic interface or delegate cannot be public
2903 = '%$I': symbol is neither a class %$[TEMPLATE GENERIC] nor a function %$[TEMPLATE GENERIC]
2904 = '%$I': name already used for a template in the current scope
2906 = '%1$*': explicit specialization requires 'template <>'
2907 = register argument '%ld' does not specify a valid register number
2908 = explicit specialization; '%$*' has already been instantiated
2909 = '%$I': explicit instantiation of function template requires return type
2910 = '%$S': cannot be explicitly specialized
2911 = '%$S': cannot be declared or defined in the current scope
2912 = explicit specialization '%$D' is not a specialization of a function template
2913 = explicit specialization; '%$S' is not a specialization of a class template
2915 = '%$I': '%s' cannot be directly used on the published surface of a WinRT type. Use 'Platform::Object^' instead to pass this type
2916 = '%$S': [FlagsAttribute] must (only) be specified on a public enum with an 'unsigned int' underlying type
2918 = '%$S': Indexed properties cannot be used on the published surface of a WinRT type
2919 = '%$S': Operators cannot be used on the published surface of a WinRT type
2920 = redefinition: '%$pS': %$[CLASS ALIAS] %$[TEMPLATE GENERIC] has already been declared as '%s%s%$pD'
2921 = redefinition: '%$pS': %$[CLASS ALIAS] %$[TEMPLATE GENERIC] is being redeclared as '%s%s%$pD'
2922 = '%$S': A WinRT interface cannot contain static members
2923 = '%1$S': '%2$pS' is not a valid %3$[TEMPLATE GENERIC] type argument for parameter '%4$S'
2924 = __declspec(interrupt) routine argument not in R2
2925 = __declspec(interrupt) routine cannot use floating-point
2926 = '%$S': a default member initializer is not allowed for a member of an anonymous struct within a union
2927 = '%$*': a function template must be called with at least one argument
2928 = explicit instantiation; '%$S' is not a function or static data member of template-class '%$pC'
2929 = '%$D': explicit instantiation; cannot explicitly force and suppress instantiation of template-class member
2930 = '%$pS': %$[TEMPLATEID GENERICID] redefined as an enumerator of 'enum %$S'
2938 = '%$S' : Failed to specialize alias template
2945 = explicit instantiation does not refer to a template-class specialization
2946 = explicit instantiation; '%$T' is not a template-class specialization
2947 = expecting '>' to terminate %$[GENERICARGS TEMPLATEARGS TEMPLATEPARAMS], found '%$L'
2948 = explicit instantiation; storage class specifier '%$L' not permitted on specialization
2949 = thread_local is not supported with /kernel
2951 = %$[TEMPLATE GENERIC] declarations are only permitted at global, namespace, or class scope
2952 = '%$S': %$[TEMPLATE GENERIC] declaration missing %$[TEMPLATE GENERIC] parameter list
2953 = '%$pS': class template has already been defined
2954 = instruction word argument not in range
2955 = '%$pS': use of %$[CLASS ALIAS] %$[TEMPLATE GENERIC] requires %$[TEMPLATE GENERIC] argument list
2956 = usual deallocation function '%1$D' would be chosen as placement deallocation function.
2957 = '%$L': invalid left delimiter: expected '<'
2958 = the left %s found at '%s(%d)' was not matched correctly
2959 = a generic class or function may not be a member of a template
2961 = '%$S': inconsistent explicit instantiations, a previous explicit instantiation did not specify '%s'
2962 = syntax error: '%$L': expected template-class member function definition to end with '}'
2965 = __declspec(%s) is not supported with /kernel
2968 = '%$I': recursive alias declaration
2969 = syntax error: '%$L': expected member function definition to end with '}'
2970 = '%1$qS': template parameter '%2$S': '%3$pS': an expression involving objects with internal linkage cannot be used as a non-type argument
2971 = '%1$qS': template parameter '%2$S': '%3$pS': a variable with non-static storage duration cannot be used as a non-type argument
2972 = '%1$pS': template parameter '%2$S': the type of non-type argument is invalid
2973 = '%1$p*': invalid template argument '%2$*'
2974 = '%1$qS': invalid %2$[TEMPLATE GENERIC] argument for '%3$S', type expected
2975 = '%1$qS': invalid template argument for '%2$S', expected compile-time constant expression
2976 = '%1$pS': too few %2$[TEMPLATE GENERIC] arguments
2977 = '%1$qS': too many %2$[TEMPLATE GENERIC] arguments
2978 = syntax error: expected '%$L' or '%$L'; found type '%$T'; non-type parameters are not supported in generics
2979 = explicit specializations are not supported in generics
2980 = C++ exception handling is not supported with /kernel
2981 = the dynamic form of '%$L' is not supported with /kernel
2982 = '%$pS': different __declspec(code_seg(...)) used: was '%$I' now '%$I'
2983 = '%$pS': a definition must have the same __declspec(code_seg(...)) as the prior declaration
2985 = '%s': the argument to __declspec(code_seg(...)) must be a text section
2986 = '%$I': __declspec(code_seg(...)) can only be applied to a class or a function
2987 = a declaration cannot have both __declspec(code_seg('%$I')) and __declspec(code_seg('%s'))
2988 = unrecognizable template declaration/definition
2989 = '%$pS': class %$[TEMPLATE GENERIC] has already been declared as a non-class %$[TEMPLATE GENERIC]
2990 = '%$pS': non-class %$[TEMPLATE GENERIC] has already been declared as a class %$[TEMPLATE GENERIC]
2991 = redefinition of %$[TEMPLATE GENERIC] parameter '%$pS'
2992 = '%$pS': invalid or missing %$[TEMPLATE GENERIC] parameter list
2993 = '%$T': is not a valid type for non-type template parameter '%$I'
2994 = unnamed class in template parameter list
2995 = '%$pD': function template has already been defined
2996 = '%$pS': recursive function template definition
2997 = '%$pS': array bound cannot be deduced from a default member initializer
2998 = '%$D': cannot be a template definition
2999 = UNKNOWN ERROR %$N Please choose the Technical Support command on the Visual C++ %$N Help menu, or open the Technical Support help file for more information
3000 = '%$pS': use of class template requires template argument list. Argument deduction is not allowed in non-static data member
3001 = '%s': expected an OpenMP directive name
3002 = '%s %s': multiple OpenMP directive names
3003 = '%s': OpenMP directive name not allowed after directive clauses
3004 = '%s': clause not valid on OpenMP '%s' directive
3005 = '%s': unexpected token encountered on OpenMP '%s' directive
3006 = '%s': clause on OpenMP '%s' directive is missing an expected argument
3007 = '%s': clause on OpenMP '%s' directive does not take an argument
3008 = '%s': argument is missing closing ')' on OpenMP '%s' directive
3009 = '%$*': jump into OpenMP structured block not allowed
3010 = '%$*': jump out of OpenMP structured block not allowed
3011 = inline assembly not allowed directly within a parallel region
3012 = '%$S': intrinsic function not allowed directly within a parallel region
3013 = '%s': clause may only appear once on OpenMP '%s' directive
3014 = expected a for loop following OpenMP '%s' directive
3015 = initialization in OpenMP 'for' statement has improper form
3016 = '%$S': index variable in OpenMP 'for' statement must have signed integral type
3017 = termination test in OpenMP 'for' statement has improper form
3018 = '%$S': OpenMP 'for' test or increment must use index variable '%$S'
3019 = increment in OpenMP 'for' statement has improper form
3020 = '%$S': index variable of OpenMP 'for' loop cannot be modified in loop body
3021 = '%s': argument is empty on OpenMP '%s' directive
3022 = '%s': invalid schedule kind of '%s' on OpenMP '%s' directive
3023 = '%s': unexpected token encountered in argument to OpenMP '%s' clause
3024 = 'schedule(runtime)': chunk_size expression is not allowed
3025 = '%s': integral expression expected
3026 = '%1s': constant expression must be positive instead of '%2$d'
3027 = '%s': arithmetic or pointer expression expected
3028 = '%$S': only a variable or static data member can be used in a data-sharing clause
3029 = '%$S': can only appear once in data-sharing clauses in an OpenMP directive
3030 = '%$S': variable in '%s' clause/directive cannot have reference type
3031 = '%$S': variable in 'reduction' clause must have scalar arithmetic type
3032 = '%$S': variable in '%s' clause cannot have incomplete type '%$T'
3033 = '%$S': variable in '%s' clause cannot have const-qualified type
3034 = OpenMP '%s' directive cannot be directly nested within '%s' directive
3035 = OpenMP 'ordered' directive must bind directly to a 'for' or 'parallel for' directive with the 'ordered' clause
3036 = '%s': invalid operator token in OpenMP 'reduction' clause
3037 = '%$S': variable in '%s' clause must be shared in enclosing context
3038 = '%$S': variable in 'private' clause cannot be a reduction variable in enclosing context
3039 = '%$S': index variable in OpenMP 'for' statement cannot be a reduction variable
3040 = '%$S': type of variable in 'reduction' clause is incompatible with reduction operator '%s'
3041 = '%$S': variable in 'copyprivate' clause must be private in enclosing context
3042 = 'copyprivate' and 'nowait' clauses cannot appear together on OpenMP '%s' directive
3043 = OpenMP 'critical' directive cannot be nested in 'critical' directive with same name
3044 = 'section': only allowed directly nested under an OpenMP 'sections' directive
3045 = Expected a compound statement following OpenMP 'sections' directive. Missing '{'
3046 = Missing structured block in an OpenMP '#pragma omp sections' region
3048 = '#pragma omp atomic%1s': expression or block-statement following pragma does not conform to the OpenMP specification
3049 = '%s': invalid argument in OpenMP 'default' clause
3050 = '%$S': a ref class cannot inherit from '%$S'
3052 = '%$S': variable reference occurs under a default(none) clause and must have explicitly specified data sharing attributes
3053 = '%$S': 'threadprivate' is only valid for global or static data items
3055 = '%$S': symbol cannot be referenced before it is used in 'threadprivate' directive
3056 = '%$S': symbol is not in the same scope with 'threadprivate' directive
3057 = '%$S': dynamic initialization of 'threadprivate' symbols is not currently supported
3058 = '%$S': symbol not declared as 'threadprivate' before it is used in the 'copyin' clause
3059 = '%$S': 'threadprivate' symbol cannot be used in the '%s' clause
3060 = '%$S': a friend function may not be defined inside a class using a qualified name (it may only be declared)
3061 = operator '%1$L': not allowed on enumeration '%2$T' with underlying type '%3$T'
3062 = '%$I': enumerator requires value since the underlying type is '%$T'
3063 = operator '%$L': all operands must have the same enumeration type
3064 = '%$I': must be a simple type or resolve to one
3065 = property declaration at non-class scope is not allowed
3066 = there are multiple ways that an object of this type can be called with these arguments
3067 = an initializer list cannot be used with the built-in operator[]
3068 = '%$S': a 'naked' function cannot contain objects that would require unwinding if a C++ exception occurred
3069 = operator '%$L': not allowed for enumeration type
3070 = '%$S': property does not have a 'set' method
3071 = operator '%$L' can only be applied to an instance of a ref class or a value-type
3072 = operator '%$L' cannot be applied to an instance of a ref class%$Nuse the unary '%%' operator to convert an instance of a ref class to a handle type
3073 = '%$S': ref class does not have a user-defined copy constructor
3074 = an array cannot be initialized with a parenthesized initializer
3075 = '%$S': you cannot embed an instance of a reference type, '%$S', in a value-type
3076 = '%$S': you cannot embed an instance of a reference type, '%$S', in a native type
3077 = '%$S': a finalizer can only be a member of a reference type
3078 = array size must be specified in new expressions without an initializer
3079 = an initializer list cannot be used as the right operand of this assignment operator
3080 = '%$L': a finalizer cannot have a storage-class-specifier
3083 = '%$I': the symbol to the left of a '::' must be a type
3084 = '%$S': a %$[FINALIZER DTOR] cannot be '%$L'
3085 = '%$S': a constructor cannot be '%$L'
3086 = cannot find 'std::initializer_list': you need to #include <initializer_list>
3087 = '%$I': call of '%$pD' already initializes this member
3088 = '%$pS': attribute constructor must have named formal arguments
3089 = '%$I': parameter name does not match any data member's name
3090 = '%$pS': attribute class cannot be a template
3091 = '%$pS': attribute class cannot have base classes
3092 = '%$pS': attribute class member cannot be a bit field, 'static' or 'const'
3093 = '%$T': type not allowed for attribute class member '%$pS'
3094 = '%$pS': anonymous usage not allowed
3095 = '%$pS': attribute cannot be repeated
3096 = '%$pS': attribute is allowed on data members of attribute classes only
3097 = '%$pS': attribute must be scoped with 'assembly:' or 'module:'
3098 = '%$S': attribute has no user-defined constructors
3099 = '%$S': use [%$&[SYSTEM WINDOWSMETADATA]AttributeUsageAttribute] for %$&[MANAGED WINRT] attributes
3100 = '%$I': unknown attribute qualifier
3101 = illegal expression for named attribute argument '%$I'
3103 = '%$I': repeated named argument
3104 = illegal attribute argument
3105 = '%$S': cannot be used as an attribute
3106 = '%$S': unnamed arguments must precede named arguments
3107 = '%$S': member functions of native attributes cannot be defined
3108 = cannot deduce a type as an initializer list is not an expression
3109 = '%$I': interface methods must use either the '__stdcall' or '__cdecl' calling convention
3110 = '%$pD': you cannot overload a COM interface method
3111 = An initializer list cannot be used as the default argument for a template parameter
3112 = '%$S': an interface can only be declared at global or namespace scope
3113 = an '%$L' cannot be a %$[TEMPLATE GENERIC]
3114 = '%$I': not a valid named attribute argument
3115 = '%$pS': this attribute is not allowed on '%s'
3116 = '%$L': invalid storage class for interface method
3117 = '%$S': an interface can only have one base class
3118 = '%$S': interfaces do not support virtual inheritance
3119 = alignas(void) is not allowed
3120 = '%$I': interface methods cannot take a variable argument list
3121 = cannot change GUID for class '%$pS'
3122 = '%$S': a WinRT generic interface cannot have GUID
3123 = WinRT generic interface cannot have constraints
3124 = 'signed char' is not a valid WinRT data type. Use 'unsigned char', 'wchar_t' or 'signed short' instead.
3125 = '%$S': type cannot directly or indirectly derive from 'Platform::Exception'
3126 = cannot define a union '%1$S' inside of %2$&[MANAGED WINRT] type '%3$pC'
3127 = '%$T': '%$L' trait can only be used on a WinRT ref class
3128 = '%$T' does not have a vtable that was introduced by '%$T'
3129 = '%$T': __default_vptr_for_base can only be used on locally defined polymorphic types and bases
3130 = Internal Compiler Error: failed to write injected code block to PDB
3131 = project must have a 'module' attribute with a 'name' property
3132 = '%$S': parameter arrays can only be applied to a formal argument of type 'single-dimensional %$&[MANAGED WINRT] array'
3133 = Attributes cannot be applied to C++ varargs
3134 = '%s': value of attribute argument '%s.%s' does not have valid type '%s'
3135 = '%$I': a property cannot have a 'const' or 'volatile' type
3136 = '%$S': a COM interface can only inherit from another COM interface, '%$S' is not a COM interface
3137 = '%$I': a property cannot be initialized
3138 = '%$I': a '%s' interface must inherit from IDispatch, or from an interface that inherits from IDispatch
3139 = '%$S': cannot export a UDT without members
3140 = cannot have multiple 'module' attributes in the same compilation unit
3141 = '%$S': interfaces only support public inheritance
3142 = '%$S': you cannot take the address of a property
3143 = '%s.%s': attribute argument cannot have multiple values
3144 = '%s': attribute requires explicit arguments, '%s' is unnamed
3145 = '%$S': global or static variable may not have %$&[MANAGED WINRT] type '%$T'
3149 = '%$T': cannot use this type here without a top-level '%$L'
3150 = '%$*': '%$L' can only be applied to a class, struct, interface, array or pointer
3152 = '%$S': '%$L' can only be applied to a class, struct, or virtual member function
3153 = '%$S': you cannot create an instance of an interface
3154 = Expected ',' before ellipsis.  Non-comma separated ellipsis not supported on parameter array functions.
3155 = attributes are not allowed in a property indexer
3156 = '%$S': you cannot have a local definition of a %$&[MANAGED WINRT] type
3157 = ParamArray attribute can only be applied to the last parameter
3158 = '%$S': '%$L' can only be applied to a virtual member function
3159 = '%$I': array of pointers to value type cannot be declared
3160 = '%$T': a data member of a %$&[MANAGED WINRT] class cannot have this type
3161 = '%$S': nesting class, struct, or interface in an interface is illegal; nesting interface in a class or struct is illegal
3162 = '%$T': a reference type which has a destructor cannot be used as the type of static data member '%$S'
3163 = '%$pS': attributes inconsistent with previous declaration
3165 = '%s': cannot convert to an integral or floating point value
3166 = '%$T': a data member of a %$&[MANAGED WINRT] class cannot have type '%s to interior %s'
3167 = Unable to initialize .NET Framework: make sure it is installed
3168 = '%$T': illegal underlying type for enum
3169 = '%$T': cannot deduce type for 'auto' from '%$T'
3170 = cannot have different module identifiers in a project
3171 = '%s': cannot specify different module attributes in a project
3172 = '%$I': cannot specify different idl_module attributes in a project
3173 = version mismatch in idl merge
3174 = module attribute was not specified
3175 = '%$S': cannot call a method of a managed type from unmanaged function '%$S'
3176 = '%$S': cannot declare local value type
3179 = an unnamed %$&[MANAGED WINRT] type is not allowed
3180 = '%s': name exceeds meta-data limit of '%d' characters
3181 = '%$T': invalid operand for %$L
3182 = '%$S': a member using-declaration or access declaration is illegal within a %$&[MANAGED WINRT] type
3183 = cannot define unnamed class, struct or union inside of %$&[MANAGED WINRT] type '%$pS'
3185 = 'typeid': used on %$&[MANAGED WINRT] type '%$T', use '%s%$T%s' instead
3187 = '%$I': is only available within the body of a function
3190 = '%$D' with the provided template arguments is not the explicit instantiation of any member function of '%$S'
3192 = syntax error: '^' is not a prefix operator (did you mean '*'?)
3193 = '%$*': requires '/clr' or '/ZW' command line option
3194 = '%$S': a value-type cannot have an assignment operator
3195 = '%$I': is reserved and cannot be used as a member of a ref class or value type. %$&[CLR WINRT] operators must be defined using the 'operator' keyword
3196 = '%$I': used more than once
3197 = '%s': can only be used in definitions
3198 = invalid use of floating-point pragmas: fenv_access pragma operates only in precise mode
3199 = invalid use of floating-point pragmas: exceptions are not supported in non-precise mode
3200 = '%$T': invalid template argument for template parameter '%$S', expected a class template
3201 = the template parameter list for class template '%$S' does not match the template parameter list for template parameter '%$S'
3202 = '%$I': invalid default argument, expected a class template
3203 = '%1$I': unspecialized %2$[CLASS ALIAS] %3$[TEMPLATE GENERIC] can't be used as a %4$[TEMPLATE GENERIC] argument for %5$[TEMPLATE GENERIC] parameter '%6$S', expected a real type
3204 = '%$S' cannot be called from within a catch block
3205 = argument list for template template parameter '%$I' is missing
3206 = '%1$qS': invalid %2$[TEMPLATE GENERIC] argument for '%3$S', missing %4$[TEMPLATE GENERIC] argument list on class %5$[TEMPLATE GENERIC] '%6$S'
3207 = '%1$qS': invalid template argument for '%2$S', class template expected
3208 = '%1$qS': template parameter list for class template '%2$S' does not match template parameter list for template template parameter '%3$S'
3209 = '%$S': generic class must be a %$&[MANAGED WINRT] class
3210 = '%$I': a member using-declaration can only be applied to a base class member
3211 = '%$pS': explicit specialization is using partial specialization syntax, use template <> instead
3212 = '%$pS': an explicit specialization of a template member must be a member of an explicit specialization
3213 = base class '%$pS' is less accessible than '%$I'
3214 = '%1$T': invalid type argument for generic parameter '%2$S' of generic '%3$pS', does not meet constraint '%4$T'
3215 = '%$S': generic type parameter already constrained by '%$*'
3216 = constraint must be a generic parameter, not '%$I'
3217 = '%$S': generic parameter cannot be constrained in this declaration
3218 = '%$T': type not allowed as a constraint
3219 = '%$S': generic parameter cannot be constrained by multiple non-interfaces: '%$T'
3220 = '%$S': interface cannot have progid
3221 = '%s': multiple 'default' and 'case' attributes not allowed on a member
3222 = '%$S': cannot declare default arguments for member functions of a %$&[MANAGED WINRT] type or generic functions
3223 = '%$S': you cannot apply 'typeid' to a property
3224 = '%$S': no overloaded generic class takes '%d' generic type arguments
3225 = generic type argument for '%$I' cannot be '%$T', it must be a value type or a handle to a reference type
3226 = A template declaration is not allowed inside a generic declaration
3227 = '%$T': cannot use '%$L' to allocate a generic type
3228 = '%1$qS': generic type argument for '%2$I' cannot be '%3$T', it must be a value type or handle type
3229 = '%$T': indirections on a generic type parameter are not allowed
3230 = '%1$qS': template type argument for '%2$I' cannot contain a generic type parameter: '%3$T'
3231 = '%$T': template type argument cannot use a generic type parameter
3232 = '%$S': a generic type parameter cannot be used in a qualified name
3233 = '%$S': generic type parameter already constrained
3234 = a generic class may not derive from a generic type parameter
3235 = '%$S': explicit or partial specialization of a generic class is not allowed
3236 = explicit instantiation of a generic is not allowed
3237 = '%$S': a generic class cannot be a custom attribute
3238 = '%$S': a type with this name has already been forwarded to assembly '%$I'
3239 = '%$T': %s to interior/pin pointer is disallowed by the common language runtime
3240 = '%$I': must be a non-overloaded abstract member function of '%$S'
3241 = '%$pD': this method was not introduced by '%$S'
3242 = '%$S': you can only explicitly override virtual functions
3243 = none of the overload functions were introduced by '%$S'
3244 = '%$*': this method was introduced by '%$S' not by '%$S'
3245 = '%$pS': use of a variable template requires template argument list
3246 = '%1$S': cannot inherit from '%2$pS' as it has been declared as '%3$I'
3247 = '%$S': a coclass cannot inherit from another coclass '%$pS'
3248 = '%1$pS': function declared as '%2s' cannot be overridden by '%3$S'
3252 = '%$S': cannot reduce accessibility of a virtual method in a %$&[MANAGED WINRT] type
3253 = '%$I': error with explicit override
3254 = '%$S': class contains explicit override '%$*' but does not derive from an interface that contains the function declaration
3255 = '%$S': cannot dynamically allocate this value type object on native heap
3260 = '%$L': skipping unexpected token(s) before lambda body
3261 = a function returning a %$&[MANAGED WINRT] array must have array brackets at the end of the declaration: '%$I(...) []'
3262 = invalid array indexing: %1d dimension(s) specified for %2d-dimensional '%3$T'
3264 = '%$I': a class-constructor cannot have a return type
3265 = cannot declare a managed '%$I' in an unmanaged '%$S'
3266 = '%$S': a class-constructor must have a 'void' parameter list
3268 = '%$S': a generic function or a member-function of a generic class cannot have a variable parameter list
3269 = '%$S': a member-function of a %$&[MANAGED WINRT] type cannot be declared with '...'
3270 = '%$S': the FieldOffset attribute can only be used in the context of StructLayout(LayoutKind::Explicit)
3271 = '%$S': invalid value '%d' for the FieldOffset attribute
3272 = '%$S': symbol requires FieldOffset, as it is a member of %$B %$pS defined with StructLayout(LayoutKind::Explicit)
3273 = '%$L': not allowed on C++ try block
3274 = %$^[__FINALLY FINALLY] without matching try
3276 = '%$*': jump out of %$^[__FINALLY FINALLY] block has undefined behavior during termination handling
3277 = cannot define an unmanaged enum '%$S' inside managed '%$S'
3278 = direct call of interface or pure method '%$S' will fail at runtime
3279 = partial and explicit specializations as well as explicit instantiations of class templates declared in the cli namespace are disallowed
3280 = '%$S': a member-function of a managed type cannot be compiled as an unmanaged function
3281 = '%$S': global operator cannot have %$&[MANAGED WINRT] type '%$T' in signature
3282 = generic parameter lists can only appear on %$&[MANAGED WINRT] classes, structs, or functions
3283 = '%$S': an interface cannot have an instance constructor
3284 = the constraints for generic parameter '%1$S' of function '%2$D'%$Nmust match the constraints for generic parameter '%3$S' of function '%4$D'
3285 = for each statement cannot operate on variables of type '%$T'
3286 = A for-range-declaration cannot have a storage class other than 'constexpr'
3287 = the type '%$T' (return type of GetEnumerator) must have a suitable public MoveNext member function and public Current property
3288 = '%$T': illegal dereference of a handle type
3289 = '%$I': a trivial property cannot be indexed
3290 = '%$T': a trivial property cannot have reference type
3291 = 'default': cannot be the name of a trivial property
3292 = the cli namespace cannot be reopened
3293 = '%$I': use 'default' to access the default property (indexer) for class '%$S'
3295 = '#pragma %s' can only be used at global or namespace scope
3296 = '%$pS': a property with this name already exists
3297 = '%$S': cannot use '%$S' as a constraint because '%$S' has the value constraint
3298 = '%$S': cannot use '%$S' as a constraint because '%$S' has the ref constraint and '%$S' has the value constraint
3299 = '%$S': cannot specify constraints, they are inherited from the base method
3300 = '%s': improper format for IDL '%s'
3301 = '%$S': coclass cannot be a '%s' interface
3302 = '%s': identifier has more than %d characters
3303 = '%s': attribute can only be used on '%s'
3306 = '%$S': unnamed class %$[TEMPLATE GENERIC] is not allowed
3307 = '%$S': unable to create IDL module
3308 = '%$S': direct call through imported class is not supported
3309 = '%$s': module name cannot be a macro or a keyword
3310 = '%$pS': module name conflict
3311 = module attribute must be defined at global scope
3312 = no callable '%1$I' function found for type '%2$T'
3313 = '%$I': variable cannot have the type '%$T'
3314 = '%$S': not a supported IDL module type
3315 = '%$S': must be a member function
3316 = '%$T': an array of unknown size cannot be used in a range-based for statement
3317 = '%$I': an overload function cannot be used as the expression in a range-based for statement
3318 = '%$T': an array cannot have an element type that contains 'auto'
3320 = '%s': type cannot have the same name as the module 'name' property
3321 = an initializer list is unexpected in this context
3322 = '%s': is not a valid property for attribute '%s'
3324 = '%s': property occurs more than once in attribute '%s'
3325 = '%s': attribute has too many arguments
3326 = '%s': is not a valid value for property '%s' of attribute '%s'
3327 = '%s': must specify value for property of attribute '%s'
3328 = '%s': attribute does not have enough arguments
3329 = syntax error: expected '%$L' not '%$L'
3330 = '%$S': a function cannot return an array '%$T'
3331 = '%$I': attributes on parameters are only allowed on COM interfaces and coclasses
3332 = '%s': grammar inconsistent, property '%s' is both required and has a default
3333 = '%s': cannot #import corrupt type library
3334 = cannot #import corrupt type library
3335 = '%$I': There can be at most one default interface for a coclass '%$S'
3336 = This operation must be performed at class scope
3337 = '%$I': defaultvtable must be an event source for a coclass '%$S'
3338 = '%$I': There can be at most one default interface that is also an event source for a coclass '%$S'
3339 = template template parameter requires either 'class' or 'typename' after the parameter list
3340 = '%$I': interface cannot be both 'restricted' and 'default' in coclass '%$S'
3341 = '%$S': a defaultvtable interface must be either 'dual' or 'custom'
3342 = '%$I': ambiguous attribute
3343 = '%s::%s': attribute identifier has too many characters
3344 = you cannot define an explicit specialization nor a partial specialization of '%$S'
3345 = '%s': invalid identifier for module name
3346 = exported declaration at non-namespace scope
3347 = '%s': required argument is not specified in attribute %s
3348 = exported templates are not part of the current C++ standards
3349 = '%s::%s': multicast attribute has already been implemented by provider %s
3350 = '%$S': a delegate constructor expects %d argument(s)
3351 = '%$S': if you pass a NULL object instance to a delegate constructor you must also pass the address of a static member function
3352 = '%$*': the specified function does not match the delegate type '%$T'
3353 = '%$I': a delegate can only be created from a global function or a member function of a %$&[MANAGED WINRT] type
3354 = '%$I': the function used to create a delegate cannot have return type '%$T'
3355 = '%s::%s': multicast attribute listens to provider '%s', but is implemented by provider '%s'
3356 = '%$I': cannot call a multicast attribute with a fully qualified name
3357 = '%s': attribute is ambiguous, must use fully qualified name
3358 = '%s': symbol not found
3359 = '%s': cannot specialize template
3360 = '%s': cannot create %s
3361 = there is no context in which to %s
3362 = '%s::%s': multicast attribute has not been implemented
3363 = '%$S': 'typeid' can only be applied to a type
3364 = '%$S': invalid argument for delegate constructor; delegate target needs to be a pointer to a member function
3365 = operator '%$L': differing operands of type '%$T' and '%$T'
3366 = '%$S': static data members of %$&[MANAGED WINRT] types must be defined within the class definition
3367 = '%$S': cannot use static function to create an unbound delegate
3368 = '%$D': invalid calling convention for IDL
3369 = '%$I': idl_module already defined
3370 = '%$I': idl_module not yet defined
3371 = 'idl_module': only the 'name' property is allowed here
3372 = must specify at least 1 interface for attribute '%s' on a coclass
3373 = attribute '%s' takes no arguments except on a coclass
3374 = can't take address of '%$S' unless creating delegate instance
3375 = '%$I': ambiguous delegate function
3376 = '%$S': only static data member templates are allowed
3378 = a declaration can be exported only from a module interface unit
3379 = '%$S': a nested class cannot have an assembly access specifier as part of its declaration
3380 = '%$S': invalid assembly access specifier - only 'public' or 'private' are allowed
3381 = '%$S': assembly access specifiers are only available in code compiled with a /clr option
3382 = 'sizeof' is not supported with /clr:safe
3383 = 'operator new' is not supported with /clr:safe
3384 = '%$S': the value constraint and the ref constraint are mutually exclusive
3385 = '%$S': a function that has a DllImport custom attribute cannot return an instance of a class
3386 = '%$S': __declspec(dllexport)/__declspec(dllimport) cannot be applied to a %$&[MANAGED WINRT] type
3387 = '%$I': __declspec(dllexport)/__declspec(dllimport) cannot be applied to a member of a %$&[MANAGED WINRT] type
3388 = '%$L': not allowed as a constraint, assuming '%$L' to continue parsing
3389 = __declspec(%s) cannot be used with /clr:pure or /clr:safe
3390 = '%1$T': invalid type argument for generic parameter '%2$S' of generic '%3$pS', must be a reference type
3391 = '%1$T': invalid type argument for generic parameter '%2$S' of generic '%3$pS', must be a non-nullable value type
3392 = '%1$T': invalid type argument for generic parameter '%2$S' of generic '%3$pS', must have a public parameterless constructor
3393 = syntax error in constraint clause: '%$I' is not a type
3394 = syntax error in constraint clause: found '%$L' expected a type
3395 = '%$S': __declspec(dllexport) cannot be applied to a function with the __clrcall calling convention
3396 = '%s.%s': custom attribute not found in '%s'
3397 = Aggregate initialization is not allowed in default arguments
3398 = '%$L': cannot convert from '%$T' to '%$T'. Source expression must be a function symbol
3399 = '%$T': cannot provide arguments when creating an instance of a generic parameter
3400 = circular constraint dependency involving '%$S' and '%$S'
3401 = '%$S': invalid assembly access specifier - only 'private' is allowed on class templates
3402 = '%s': cannot resolve overload except in the current scope
3403 = thread_local cannot be used with /clr:pure or /clr:safe
3404 = '%s': unexpected syntax error
3405 = '%s': cannot resolve overload without complete descriptor
3406 = '%$L': cannot be used in an elaborated type specifier
3407 = '%$T' cannot be used in this context
3408 = '%$S': attribute is not allowed on template definitions
3409 = empty attribute block is not allowed
3410 = '%$I': the type of the explicit instantiation '%$T' does not match the type of the variable template '%$T'
3411 = '%$T' is not valid as the size of an array as it is not an integer type
3412 = '%$S': cannot specialize template in current scope
3413 = '%$S': invalid explicit instantiation
3414 = '%$S': imported member function can't be defined
3415 = multiple '%1$pS' sections found with different attributes ('0x%2x')
3417 = '%$D': value types cannot contain user-defined special member functions
3418 = access specifier '%$L %$L:' is not supported
3420 = '%$S': a finalizer cannot be virtual
3421 = '%$S': you cannot call the finalizer for this class as it is either inaccessible or it does not exist
3422 = '%1$qD': mismatched types '%2$T' and '%3$T'
3424 = '%$T': a function-style cast to an array type is not allowed
3425 = cannot throw pointer to object of incomplete type '%$T'
3426 = cannot throw object of incomplete type '%$T'
3427 = '%$S': '%s' cannot be used with layout_version(%d)
3428 = '%$S': '%s' can only be applied to class declarations or definitions
3429 = '%$S': '%s' cannot be applied to a union
3430 = a scoped enumeration must have a name
3431 = '%$*': %$M cannot be redeclared as %$M
3432 = '%$I': a forward declaration of an unscoped enumeration must have an underlying type
3433 = '%$I': all declarations of an enumeration must have the same underlying type, was '%$T' now '%$T'
3434 = '%$S': enumerator value '%D' cannot be represented as '%$T', value is '%D'
3435 = character set '%s' is not supported
3436 = #pragma setlocale is not supported when /source-charset, /execution-charset, or /utf-8 has been specified
3437 = #pragma execution_character_set is not supported when /source-charset, /execution-charset, or /utf-8 has been specified
3438 = '%$S': '%s' cannot be applied to a %$&[MANAGED WINRT] class
3439 = layout_version(%d): invalid version number
3440 = '%$S': layout_version(%d) incompatible with a prior declaration
3441 = '%$S': '%s' cannot be applied after the class has been defined
3442 = Initializing multiple members of union: '%$S' and '%$S'
3443 = The default member initializer for '%$S' is recursive
3444 = Empty aggregate class '%$S' must be initialized with '{}'
3445 = copy-list-initialization of '%$T' cannot use an explicit constructor
3446 = '%$S': a default member initializer is not allowed for a member of a value class
3447 = %$M to the conditional operator ?: is of type 'void', but the %$M is neither a throw-expression nor of type 'void'
3448 = the number of identifiers must match the number of array elements or members in a structured binding declaration
3449 = the number of identifiers must match the value of 'std::tuple_size<%$T>::value' in a structured binding of tuple-like type
3450 = '%$pS': not an attribute; cannot specify [%$&[SYSTEM WINDOWSMETADATA]AttributeUsageAttribute]
3451 = '%$pS': cannot apply unmanaged attribute to '%$S'
3452 = list argument member not constant
3453 = '%$S': attribute not applied because qualifier '%s' did not match
3454 = [attribute] not allowed on class declaration
3455 = '%$S': none of the attribute constructors matched the arguments
3456 = [source_annotation_attribute] not allowed on %$&[MANAGED WINRT] class declaration
3457 = '%$S': attribute does not support unnamed arguments
3458 = '[%$S]': attribute '[%$S]' already specified for '%$S'
3459 = '[%$S]': attribute allowed only on class indexer (default indexed property)
3460 = '%$T': only a user-defined type can be forwarded
3461 = '%$S': only a %$&[MANAGED WINRT] type can be forwarded
3462 = '%$S': only an imported type can be forwarded
3463 = '%$T': type not allowed in attribute 'implements'
3464 = '%$S' a nested type cannot be forwarded
3465 = to use type '%$S' you must reference the assembly '%$I'
3466 = '%$S': a specialization of a generic class cannot be forwarded
3467 = '%$S': this type has already been forwarded
3468 = '%$S': you can only forward a type to an assembly:%$N	'%s' is not an assembly
3469 = '%$S': a generic class cannot be forwarded
3470 = '%$S': a class cannot have both an indexer (default indexed property) and an operator[]
3471 = new module name %s (set on command line) conflicts with previous name %s
3472 = new output file name %s (set on command line) conflicts with previous file name %s
3473 = no output pathname or module name specified.
3474 = could not open output file '%s'
3475 = syntax error in input file '%s'
3476 = could not open file '%s' for input
3477 = a lambda can only appear in an unevaluated context with '%1$M' or later
3478 = '%$I': an array of unknown bounds cannot be captured by copy
3479 = SAL annotations on lambdas are not supported
3480 = '%1$S': a lambda capture must be a variable from an enclosing function scope
3481 = '%$I': lambda capture variable not found
3482 = 'this' can only be used as a lambda capture within a non-static member function
3483 = '%$I' is already part of the lambda capture list
3484 = syntax error: expected '->' before the return type
3487 = '%$T': all return expressions must deduce to the same type: previously it was '%$T'
3488 = '&%$I' cannot be explicitly captured when the default capture mode is by reference (&)
3489 = '&%$I' is required when the default capture mode is by copy (=)
3490 = '%$I' cannot be modified because it is being accessed through a const object
3491 = '%$I': a by copy capture cannot be modified in a non-mutable lambda
3492 = '%$I': you cannot capture a member of an anonymous union
3493 = '%$I' cannot be implicitly captured because no default capture mode has been specified
3494 = 'this' cannot be explicitly captured because an enclosing capture mode does not allow it
3495 = '%1$I': a simple capture must be a variable with automatic storage duration declared in the reaching scope of the lambda
3496 = 'this' is always captured by copy: '&' ignored
3497 = cannot construct an instance of this lambda
3498 = '%$S': you cannot capture a variable that has a %$&[MANAGED WINRT] type
3499 = a lambda that has been specified to have a void return type cannot return a value
3500 = invalid ProgID '%s'
3501 = there is no typelib registered for ProgID '%s'
3502 = cannot obtain LIBID for ProgID '%s'
3503 = character '0x%x' is not allowed in a raw string literal
3504 = cannot create GUID from string '%s'
3505 = cannot load type library '%s'
3506 = there is no typelib registered for LIBID '%s'
3507 = a ProgID can have no more than 39 characters '%s'; nor contain any punctuation apart from '.'; nor start with a digit
3508 = '%$T': is not a valid Automation type
3509 = '%$T': invalid Automation return type; when a parameter is marked 'retval', the return type must be 'void', 'HRESULT' or 'SCODE'
3510 = cannot locate dependent type library %s
3511 = '%$S': a call to a delegating constructor shall be the only member-initializer
3512 = the delimiting character sequence for a raw string literal shall have no more than 16 characters
3513 = '%c': unsupported raw string literal delimiter character
3514 = '%c' (%d): unsupported raw string literal delimiter character
3515 = if an argument for a class template partial specialization is a pack expansion it shall be the last argument
3516 = unexpected end-of-file found while processing the raw string literal; delimiter sequence '%s' was not matched
3517 = '%$I' an alias-declaration cannot have a type that contains 'auto'
3518 = '%$I': in a direct-list-initialization context the type for '%$T' can only be deduced from a single initializer expression
3519 = '%s': invalid parameter to embedded_idl attribute
3520 = '%$I': parameter pack must be expanded in this context
3521 = '%$I' is not a parameter pack
3522 = '%$T': parameter pack cannot be expanded in this context
3523 = 'sizeof...' requires as its argument an unexpanded parameter pack
3524 = '%$I': 'sizeof' cannot be applied to a parameter pack. Did you mean to use 'sizeof...'?
3525 = '%$pS': if a class template has a template parameter pack it must appear at the end of the template parameter list
3526 = '...' cannot be applied to 'this'
3527 = '%$S' is not a valid operand for 'sizeof...'. Did you mean to use 'sizeof'?
3528 = '%$I': the number of elements in this pack expansion does not match the number of elements in '%$I'
3529 = '%$S': a template parameter pack cannot have a default argument
3530 = '%$T' cannot be combined with any other type-specifier
3531 = '%$I': a symbol whose type contains '%$T' must have an initializer
3532 = the element type of an array cannot be a type that contains '%$T'
3533 = a parameter cannot have a type that contains '%$T'
3535 = cannot deduce type for '%$T' from '%$T'
3536 = '%$S': cannot be used before it is initialized
3537 = you cannot cast to a type that contains '%$T'
3538 = in a declarator-list '%$T' must always deduce to the same type
3539 = a template-argument cannot be a type that contains '%$T'
3540 = sizeof cannot be applied to a type that contains '%$T'
3541 = typeid cannot be applied to a type that contains '%$T'
3542 = '%$S': a virtual member function shall not have a return type that contains '%$T'
3543 = '%$T': does not contain a parameter pack
3544 = '%$S': parameter pack expects a type template argument
3545 = '%$S': parameter pack expects a non-type template argument
3546 = '...': there are no parameter packs available to expand
3547 = template parameter '%$pS' cannot be used because it follows a template parameter pack and cannot be deduced from the function parameters of '%$S'
3548 = '%$I': parameter pack cannot be used in this context
3549 = '%d': a function parameter pack cannot have a default argument
3550 = only plain 'decltype(auto)' is allowed in this context
3551 = if a trailing return type is used then the leading return type shall be the single type-specifier 'auto' (not '%$T')
3552 = expected 'decltype(auto)'
3553 = decltype expects an expression not a type
3554 = 'decltype' cannot be combined with any other type-specifier
3555 = incorrect argument to 'decltype'
3556 = '%$S': incorrect argument to 'decltype'
3559 = recursive call to '%s': recursion is detected when compiling the call graph for the concurrency::parallel_for_each at: '%s'
3560 = '%s': IL is not available when compiling the call graph for the concurrency::parallel_for_each at: '%s'
3561 = tile barrier operation found in control flow that is not tile-uniform when compiling the call graph for the concurrency::parallel_for_each at: '%s'
3562 = intrinsic function '%s' is limited to have no more than %d parameters
3563 = Infinite loop detected when compiling the call graph for the concurrency::parallel_for_each at: '%s'
3564 = reading uninitialized value when compiling the call graph for the concurrency::parallel_for_each at: '%s'
3565 = The total amount of tile_static memory (%d bytes) exceeds the limit of %d bytes when compiling the call graph for the concurrency::parallel_for_each
3566 = blocks with side effects nested too deeply when compiling the call graph for the concurrency::parallel_for_each at: '%s'
3567 = divide or mod by zero detected when compiling the call graph for the concurrency::parallel_for_each at: '%s'
3568 = sum of registers exceeds the limit of %d when compiling the call graph for the concurrency::parallel_for_each. Please simplify your program
3569 = race condition detected when compiling the call graph for the concurrency::parallel_for_each at: '%s'
3570 = illegal use of amp restricted scope when compiling with /clr
3571 = '%$T': illegal compute domain argument; not a class type
3572 = '%$T': illegal compute domain argument; missing public member: 'static const int rank' or rank value is non-positive
3573 = The number of instances of concurrency::graphics::sampler passed to concurrency::parallel_for_each cannot exceed %d
3574 = '%$T': illegal tile extents: must be positive and (1) Z <= %d; (2) Z*Y*X <= %d
3575 = '%$T': illegal compute domain argument; missing public member: 'concurrency::index<%z> _map_index(const concurrency::index<%z>&) restrict(amp)'
3576 = '%$T': concurrency::details::_Parallel_for_each argument #%d has unsupported type
3577 = concurrency::parallel_for_each kernel argument is illegal: cannot resolve call to member 'void operator()(%$T) restrict(amp)'
3578 = The size of the function object passed to concurrency::parallel_for_each cannot exceed %d bytes
3579 = The number of read-only instances of concurrency::array and concurrency::graphics::texture passed to concurrency::parallel_for_each cannot exceed %d
3580 = The number of writable instances of concurrency::array and concurrency::graphics::texture passed to concurrency::parallel_for_each cannot exceed %d
3581 = '%$T': unsupported type in amp restricted code
3583 = '%$S': the size of the variable (%d bytes) is larger than the maximum size (%d bytes) supported in amp restricted code
3584 = unsupported usage of tile_static on '%$S'
3585 = '%$S' has unsupported storage class in amp restricted code
3586 = '%$pS': using global or static variables is unsupported in amp restricted code
3587 = dynamic_cast is unsupported in amp restricted code
3588 = casting from '%$T' to '%$T' is unsupported in amp restricted code
3589 = '%s': unsupported usage of string literals in amp restricted code
3590 = capture of '%$*' is unsupported if the lambda is amp restricted
3591 = typeid operator is unsupported in amp restricted code
3592 = Inline native assembly ('__asm') is unsupported in amp restricted code
3593 = 'goto' is unsupported in amp restricted code
3594 = exception handling (try, catch, throw etc.) is unsupported in amp restricted code
3595 = constant value is out of supported range in amp restricted code
3596 = '%$I' ('%$T'): variable captured by lambda has unsupported type in amp restricted code
3597 = '%$I': '%s' is not allowed to be captured by copy if the lambda is amp restricted
3598 = label statement is unsupported in amp restricted code
3599 = '%$L': cannot perform pointer arithmetic on pointer to bool in amp restricted code
3600 = '%s': use of tile_static memory detected when compiling the call graph for the non-tiling concurrency::parallel_for_each at: '%s'
3601 = '%$T': is invalid argument type for amp diagnostic function '%$pS'
3602 = Unsupported control flow detected when compiling the call graph for the concurrency::parallel_for_each at: '%s'
3603 = '%$S': type '%$T' not yet supported
3604 = '%$S': can only create a managed object on the gc heap
3605 = The total number of samplers (%d captured and %d predefined) exceed %d when compiling the call graph for the concurrency::parallel_for_each at: '%s'
3606 = intrinsic function '%s' cannot be mapped to HLSL
3609 = '%$S': a '%$L' function must be virtual
3610 = '%$S': value type must be 'boxed' before method '%$S' can be called
3611 = '%$S': a sealed function cannot have a pure-specifier
3612 = '%$S': a sealed class cannot have any pure virtual methods
3613 = missing return type after '->' ('int' assumed)
3614 = Differing values for pack size within the same class; previous was was '%u', new value is '%u'
3615 = %2$[CONSTEXPR CONSTEVAL] function '%1$S' cannot result in a constant expression
3617 = initializers of structured bindings must be of array or non-union class type; type '%$T' is not permitted
3618 = '%$D': a method marked DllImport cannot be defined
3619 = a template cannot be declared within a %$&[MANAGED WINRT] type
3620 = '%$pS': setting the alignment is not allowed on WinRT types
3621 = '%$pS': only the default packing value (%d) is allowed for WinRT types
3622 = '%$pS': a class declared as '%$L' cannot be instantiated
3623 = '%$S': bit fields are not supported in %$&[MANAGED WINRT] types
3624 = '%s': use of this type requires a reference to %$M '%$I'
3625 = '%$S': a native type cannot derive from a %$&[MANAGED WINRT] type '%$pS'
3626 = '%s': '%$L' keyword can only be used on COM interfaces, member functions and data members that are pointers to delegates
3627 = Only a value type can be boxed
3628 = '%$S': %$&[MANAGED WINRT] classes only support public inheritance
3629 = '%$L': a capture default can only appear at the beginning of a lambda capture list
3631 = '%$*': cannot overload %$&[MANAGED WINRT] events
3632 = '%$D': illegal style of event for %$M
3633 = cannot define '%$I' as a member of managed '%$S'
3634 = '%$D': cannot define an abstract method of a %$&[MANAGED WINRT] class
3635 = '%$I': cannot be applied to a %$&[MANAGED WINRT] class (use '%$I' instead)
3636 = '%$I': cannot be applied to this type
3637 = '%$S': a friend function definition cannot be a specialization of a function %$[TEMPLATE GENERIC]
3638 = '%$S': the standard boxing and unboxing conversion operators cannot be redefined
3639 = a lambda that is part of a default argument can only have an init-capture
3640 = '%$S': a referenced or virtual member function of a local class must be defined
3641 = '%$S': invalid calling convention '%s' for function compiled with /clr:pure or /clr:safe
3642 = '%$*': cannot call a function with __clrcall calling convention from native code
3643 = '%$S': cannot decompose type with non-static data-members in both '%$S' and '%$S'
3644 = '%$S': cannot compile the function to generate managed code
3645 = '%$S': __clrcall cannot be used on functions compiled to native code
3646 = '%$I': unknown override specifier
3648 = this explicit override syntax is not supported for managed types
3649 = this explicit override syntax is not allowed with /ZW
3650 = '%$pS': cannot be used as an explicit override, must be a virtual member function of a base class
3651 = '%$pS': cannot be used as an explicit override, must be a member of a base class
3652 = '%$pS': a function that explicitly overrides must be virtual
3653 = '%$I': cannot be used as a named override: a function being overridden not found; did you forget to name the function explicitly, using a:: operator?
3654 = '%$L': syntax error in explicit override
3655 = '%$pS': function already explicitly overridden
3656 = '%$L': override specifier cannot be repeated
3657 = a %$[FINALIZER DTOR] cannot explicitly override or be explicitly overridden
3659 = '%$S': override specifier '%$L' is not supported
3660 = '%$S': hides inherited member '%$S'
3661 = explicit override list did not find any methods to override
3662 = '%$S': override specifier '%$L' only allowed on member functions of %$&[MANAGED WINRT] classes
3664 = '%$S': cannot be used as an explicit override, must have 'public' or 'protected' accessibility
3665 = '%$S': override specifier '%$L' not allowed on a %$[FINALIZER DTOR]
3666 = '%$S': override specifier '%$L' not allowed on a constructor
3667 = '%s': attribute does not support pack expansion
3668 = '%$S': method with override specifier 'override' did not override any base class methods
3669 = '%$S': override specifier 'override' not allowed on static member functions or constructors
3670 = '%$S': cannot override inaccessible base class method '%$S'
3671 = '%$S': function does not override '%$S'
3672 = pseudo-destructor expression can only be used as part of a function call
3673 = '%$S': class does not have a copy-constructor
3674 = could not find standard library module '%s'
3675 = '%$S': is reserved because '%$S' is defined
3676 = '%$S': ref class and base class have incompatible attributes '[%$S]'
3677 = string literal after 'operator' cannot have an encoding prefix
3678 = string literal after 'operator' must be the empty string '""'
3679 = expected a literal suffix identifier after 'operator ""'
3680 = cannot concatenate user-defined string literals with mismatched literal suffix identifiers
3681 = 'fallthrough': attribute may only appear in an enclosing switch statement
3682 = 'operator %$I': %$[LITERALOP LITERALOPTEMPLATE] cannot be declared to have 'C linkage'
3683 = cannot define both raw literal operator and literal operator template with the same literal suffix identifier
3684 = 'operator %$I': declaration of literal operator has an invalid parameter list
3685 = 'operator %$I': a literal operator template cannot have any function parameters
3686 = 'operator %$I': a literal operator template must have a single non-type template parameter
3687 = 'operator %$I': a numeric literal operator template must have a single non-type template parameter pack of type 'char'
3688 = invalid literal suffix '%s'; literal operator or literal operator template 'operator %$I' not found
3689 = 'operator %$I': %$[LITERALOP LITERALOPTEMPLATE] must be in a global or namespace scope
3690 = expected a string literal, but found a user-defined string literal instead
3691 = invalid literal prefix '%s'
3692 = non-scalar type '%$T' cannot be used in a pseudo-destructor expression
3693 = '%$I': bit-fields cannot be captured by reference
3694 = a structured binding declaration can contain no specifiers other than 'static', 'thread_local', 'auto', and cv-qualifiers
3695 = '%$S': cannot decompose a type containing an anonymous union or struct
3696 = '%$L': cannot use this qualifier on '%%'
3697 = '%$L': cannot use this qualifier on '^'
3698 = '%$T': cannot use this type as argument of '%$M'
3699 = '%$t': cannot use this indirection on type '%$T'
3700 = filename is missing terminating '%c'
3701 = '%$S': event source has no events
3702 = ATL is required for COM events
3703 = '%$pD': an event handler method must have the same storage class as the source '%$pD'
3704 = '%$pS': a vararg method cannot fire events
3705 = '%s': cannot find eventing interface
3706 = '%s': must be a COM interface to fire COM events
3707 = '%$pS': dispinterface method must have a dispid
3708 = '%s': improper use of '%$L'; must be a member of a compatible event source
3709 = '%s': improper syntax for specifying event in __hook/__unhook
3710 = '%s': improper syntax for specifying event handler in __hook/__unhook
3711 = '%$D': a non-managed event source method must return void or an integral type
3712 = '%$pD': an event handler method must return the same type as the source '%$pD'
3713 = '%$pS': an event handler method must have the same function parameters as the source '%$pS'
3714 = '%$pD': an event handler method must have the same calling convention as the source '%$pD'
3715 = '%s': must be a pointer to '%$T'
3716 = '%$L': building precompiled header with module constructs is not allowed
3717 = '%$pS': a method that fires events cannot be defined
3718 = can only call '__%s' in the context of a member function of the receiving class
3719 = '%$pS': an interface based event source can only be used for COM events
3720 = '%$pS': can only implement IDispatch on a dual or dispinterface
3721 = '%$pD': incompatible signature for event
3722 = a generic event is not allowed
3723 = '%$pS': could not resolve event
3724 = must #include <windows.h> to use multi-threading with events
3726 = Could not apply SecureHotPatch transformations to '%s'.  %s
3727 = '%$D': a managed event must be a member function or a data member that is a pointer to a delegate
3728 = '%$D': event does not have a raise method
3729 = attribute specifier cannot contain both using namespace prefix and scoped attribute
3731 = incompatible event '%$D' and handler '%$D'; event source and event handler must have the same event type
3732 = '%$pS': a custom interface that fires COM events cannot inherit from IDispatch
3733 = '%$*': improper syntax for specifying a COM event; did you forget '__interface'?
3734 = '%$pS': a %$&[MANAGED WINRT] class cannot be a coclass
3735 = template or generic redefined
3736 = '%$pS': must be a method or, in the case of managed events, optionally a data member
3737 = '%$I': a delegate may not have an explicit calling convention
3738 = '%s': the calling convention of the explicit instantiation must match that of the template being instantiated
3739 = '%s': syntax is only supported when the 'layout_dependent' parameter of event_receiver is true
3740 = '%$pS': templates cannot source or receive events
3741 = '%$S': must be a coclass when the 'layout_dependent' parameter of event_receiver is true
3742 = '%$L': unbalanced token sequence in attribute argument of '%s', expected '%$L'
3743 = can only hook/unhook an entire interface when the 'layout_dependent' parameter of event_receiver is true
3744 = __unhook must have at least 3 arguments for managed events
3745 = '%$D': only an event can be 'raised'
3746 = attribute '%$I' may appear at most once in an attribute list
3747 = missing default %$[TEMPLATE GENERIC] parameter: parameter %d
3748 = '%$S': unmanaged interfaces may not fire events
3749 = '%$pS': a custom attribute may not be used inside a function
3750 = '%$L': unexpected token in attribute specifier
3751 = '%$I': unexpected identifier in attribute specifier
3753 = a generic property is not allowed
3754 = delegate constructor: member function '%$S' cannot be called on an instance of type '%$T'
3755 = '%$I': a delegate may not be defined
3758 = '%$S': virtual function cannot be declared '%$[CONSTEXPR CONSTEVAL]'
3760 = please use __property keyword to declare property in %1$&[MANAGED WINRT] '%2$S'
3761 = '%$pD': 'retval' can only appear on the last argument of a function
3762 = unable to process attribute '%s'
3763 = '%$T': 'retval' and 'out' can only appear on a data-pointer type
3764 = '%$S': cannot override base class method '%$S'
3765 = '%$D': cannot define an event in a class/struct '%$pS' marked as an event_receiver
3766 = '%$S' must provide an implementation for the interface method '%$pD'
3767 = '%$*': candidate function(s) not accessible
3768 = cannot take the address of a virtual vararg function in pure managed code
3769 = '%$I': a nested class cannot have the same name as the immediately enclosing class
3770 = '%$T': is not a valid base class
3771 = '%$I': friend declaration cannot be found in the nearest namespace scope
3772 = '%$S': invalid friend template declaration
3773 = Use of '%1$I' in this context is a non-conforming extension in C++%2u
3774 = cannot find '%$S::%$I': Please include %s header
3775 = return type of '%$I' should not be '%$T'
3776 = cannot return an expresssion of type void in a coroutine with non-void eventual return type
3777 = '%$pS': a coroutine cannot take a variable argument list
3778 = alloca: cannot be used in a coroutine
3779 = '%$pS': a function that returns '%$T' cannot be used before it is defined
3780 = '%$pD': a conversion function that returns '%$T' cannot be used before it is defined
3781 = %$T: a coroutine's promise must declare either '%$I' or '%$I'
3782 = %$T: a coroutine's promise cannot contain both '%$I' and '%$I'
3783 = '%$I': cannot be a coroutine
3784 = %$L cannot appear in this context
3785 = the first template argument to 'std::integer_sequence' must be an integer type
3786 = the second template argument to 'std::make_integer_sequence' must be an integer constant greater than or equal to zero
3787 = cannot deduce the return type of this coroutine
3788 = this function cannot be a coroutine: '%$T' is not a class
3789 = this function cannot be a coroutine: '%$T' does not declare the member '%$I()'
3790 = capturing '*this' requires '%1$M'
3791 = 'this' cannot be explicitly captured when the default capture mode is by copy (=)
3792 = unrecognized hash algorithm '%$I'
3793 = hash value for algorithm '%$I' must be exactly %u characters long
3794 = file '%$S' specified in #pragma file_hash is also part of the current compilation unit
3795 = multiple conflicting hash values for file '%$S'
3796 = 'operator %$I': is neither a string literal operator template nor a numeric literal operator template
3797 = '%$L': event declaration cannot have override specifier (should be placed on event add/remove/raise methods instead)
3798 = '%$L': property declaration cannot have override specifier (should be placed on property get/set methods instead)
3799 = indexed property cannot have an empty parameter list
3800 = '%$pD': cannot mix properties and events
3801 = '%s': attribute may not have an argument clause
3803 = '%$pD': property has a type which is incompatible with one of its accessors '%$pD'
3804 = '%$pS': the accessor methods for a property must either be all static or all non-static
3805 = '%$L': unexpected token, expected either '}' or a ','
3806 = '%$L': unexpected token, expected either a '{' or a member-initializer
3807 = '%$S': a class with the ComImport attribute cannot derive from '%$S', only interface implementation is allowed
3808 = '%$S': a class with the ComImport attribute cannot define member '%$S', only abstract or dllimport functions are allowed
3809 = '%$S': a %$&[MANAGED WINRT] type cannot have any friend functions/classes/interfaces
3810 = '%1$S': cannot decompose type with ambiguous base class '%2$S'
3812 = '__property' must be the first token in a property declaration
3813 = a property declaration can only appear within the definition of a %$&[MANAGED WINRT] type
3815 = return type of method '%$pS' must match type of the last parameter of a setter
3816 = '%$B %$pS' was previously declared or defined with a different %$&[MANAGED WINRT] modifier
3817 = '%$S': property can only be applied to a function
3818 = array property declaration '%$pS' shall not overload an index property '%$pS'
3820 = '%$S': initializers must be managed
3821 = '%$*': managed type or function cannot be used in an unmanaged function
3824 = '%$T': this type cannot appear in this context (function parameter, return type, or a static member)
3825 = '%$S': a %$&[MANAGED WINRT] class can only support %$&[MANAGED WINRT] events
3827 = standard attribute '%1$I' may have either no arguments or one string literal describing the reason
3828 = placement arguments cannot be specified for a '%1$L' expression for type '%2$T'
3829 = '%1s' may only be applied to a function
3830 = '%$S': cannot inherit from '%$S', value types can only inherit from %$^[GC_INTERFACES INTERFACE_CLASSES]
3831 = '%$I': '%$S' cannot have a pinned data member or a member function returning a pinning pointer
3832 = '%s': type library looks as if it was built for 32-bit pointers; please change the 'ptrsize' qualifier
3833 = '%$T': invalid target type for %$I
3834 = illegal explicit cast to a pinning pointer; use a pinned local variable instead
3835 = unsupported behavior: %$s
3836 = a static constructor is not allowed to have a member initializer list
3837 = attributes are not allowed in this context
3838 = cannot inherit from '%$S'
3839 = cannot change alignment in a %$&[MANAGED WINRT] type
3842 = '%$I': 'const' and 'volatile' qualifiers on member functions of %$&[MANAGED WINRT] types are not supported
3843 = '%$I': ref-qualifiers on member functions of %$&[MANAGED WINRT] types are not supported
3844 = '%$I': cannot import symbol from '%s': as '%$pS' already exists in the current scope
3846 = '%$I': cannot import symbol from '%s': as '%$pS' has already been imported from another assembly '%s'
3847 = a noexcept-specifier on an explicit instantiation must match that of the template being instantiated
3848 = expression having type '%$T' would lose some const-volatile qualifiers in order to call '%$*'
3849 = function-style call on an expression of type '%$T' would lose const and/or volatile qualifiers for all operator overloads
3850 = '%s': a universal-character-name specifies an invalid character
3851 = '%s': a universal-character-name cannot designate a character in the basic character set
3852 = '%$S' having type '%$T': aggregate initialization could not initialize this member
3853 = '=': re-initializing a reference or assignment through a reference-to-function is illegal
3854 = expression to left of '=' evaluates to a function. Cannot assign to a function (a function is not an l-value)
3855 = '%$S': %$[TEMPLATE GENERIC] parameter '%$I' is incompatible with the declaration
3856 = '%1$*': symbol is not a class %2$[TEMPLATE GENERIC]
3857 = '%1$S': multiple %2$[TEMPLATE GENERIC] parameter lists are not allowed
3858 = '%$pS': cannot be redeclared in current scope
3859 = Failed to create virtual memory for PCH
3860 = %1$[TEMPLATE GENERIC] argument list following class %2$[TEMPLATE GENERIC] name must list parameters in the order used in %3$[TEMPLATE GENERIC] parameter list
3861 = '%$I': identifier not found
3862 = '%$S': cannot compile an unmanaged function with /clr:pure or /clr:safe
3863 = array type '%$T' is not assignable
3864 = '%$S': requires clause is incompatible with the declaration
3865 = '%$L': can only be used on native member functions
3866 = %$[FINALIZER DTOR] call missing argument list
3867 = '%$S': non-standard syntax; use '&' to create a pointer to member
3868 = '%$S': constraints on generic parameter '%$I' differ from those on the declaration
3869 = gcnew constraint is missing empty parameter list '()'
3870 = '%$S': '__declspec(%s)' can only be applied to parameters of integral type
3871 = '%$S': '__declspec(guard(overflow))' is only supported on the first 64 parameters of a function
3872 = '0x%x': this character is not allowed in an identifier
3873 = '0x%x': this character is not allowed as a first character of an identifier
3874 = return type of '%$I' should be '%$M' instead of '%$T'
3875 = call of non-static member function missing argument list
3876 = hexadecimal floating literal requires an exponent
3877 = invalid type argument to the TypeForwardedTo attribute
3878 = syntax error: unexpected token '%1$L' following '%2s'
3879 = '%$S': cannot be an initonly data member
3880 = '%$S': cannot be a literal data member
3881 = can only inherit constructor from direct base
3882 = '%$S': constructor has already been inherited from '%$S'
3883 = '%$S': an initonly static data member must be initialized
3884 = '%$T': An array of unknown size cannot be value-initialized
3886 = '%$S': a literal data member must be initialized
3887 = '%$S': the initializer for a literal data member must be a constant expression
3888 = '%$S': the const expression associated with this literal data member is not supported by C++/CLI
3889 = call to object of class type '%$T': no matching call operator found
3890 = '%$S': you cannot take the address of a literal data member
3891 = '%$S': a literal data member cannot be used as an lvalue
3892 = '%$S': you cannot assign to a variable that is const
3893 = '%$S': l-value use of initonly data member is only allowed in an instance constructor of class '%$S'
3894 = '%$S': l-value use of initonly static data member is only allowed in the class constructor of class '%$S'
3895 = '%$S': %$L data members cannot be 'volatile'
3896 = '%$S': improper initializer: this literal data member can only be initialized with 'nullptr'
3898 = '%$S': %$L data members can only be members of managed types
3899 = '%$S': l-value use of initonly data member is not allowed directly within a parallel region in class '%$S'
3900 = '%$S': not allowed in current scope
3901 = '%$I': must have return type '%$T'
3902 = '%$I': type of last parameter must be '%$T'
3903 = '%$S': does not have set or get method
3904 = '%$S': must specify %z parameter(s)
3905 = unaligned accesses are not supported for intrinsic type '%s'
3906 = intrinsic type '%s' is not a supported return or argument type for vararg or unprototyped functions
3907 = cannot jump to a label that is in a different 'if constexpr' statement or substatement
3908 = access level less restrictive than that of '%$pS'
3909 = a %$&[MANAGED WINRT] event declaration must occur in a %$&[MANAGED WINRT] type
3910 = '%$S': must define member '%$I'
3911 = '%$S': function must have type '%$T'
3912 = '%$S': type of event must be a delegate type
3913 = a default property must be indexed
3914 = a default property cannot be static
3915 = '%$pS' has no default indexed property (class indexer)
3916 = function parameter with index %d and requested alignment of %d won't be aligned
3917 = '%$L': obsolete %s declaration style (did you mean to use '[' ']' instead?)
3918 = usage requires '%$pS' to be a data member
3919 = '%$S': function must have type '%$T (%$T)'
3920 = '%$S': cannot define a postfix increment/decrement %$&[CLR WINRT] operator%$N	Calling the postfix %$&[CLR WINRT] operator will call the corresponding prefix %$&[CLR WINRT] operator (op_Increment/op_Decrement), but with postfix semantics
3922 = '%s': argument must be a constant expression
3923 = '%$S': local class, struct or union definitions are not allowed in a member function of a %$&[MANAGED WINRT] class
3924 = error in argument #%1z of delegate constructor call '%2$S':
3925 = expected a loop (for, while, or do) following '%s' directive
3926 = invalid constant in 'parallel' directive
3927 = '->': trailing return type is not allowed after a non-function declarator
3928 = '->': trailing return type is not allowed after a parenthesized declarator
3929 = 'collapse(%1$d)' specified but found only %2$d loops following '#pragma omp for'
3930 = '%$*': no overloaded function has restriction specifiers that are compatible with the ambient context '%$*'
3931 = '%$T': cannot call a function that has restriction specifiers that are incompatible with the ambient context
3933 = '%$S': destructor's restriction specifiers must cover the union of restrictions on all constructors
3934 = a function that is in any form of 'main' cannot have restriction specifiers other than restrict(cpu)
3935 = '%$pS': redefinition; overlapping restriction specifiers
3936 = '%$I': unrecognized restriction specifier
3937 = empty restriction specifier is not allowed
3938 = '%$pS': multiple restriction specifiers are not supported on extern "C" functions
3939 = '%$I': pointer to member functions, function pointers, references to functions with 'amp' restriction specifier are not allowed
3940 = '%$I': identifier not found - possible mismatch between compiler and library versions. Please ensure vccorlib.h/.lib, vccorlib120.dll and c1xx.dll match
3941 = '%$*': requires '/clr' command line option
3942 = '#pragma omp atomic capture': expression on right of '=' must be an lvalue-expression of scalar type
3943 = '#pragma omp atomic': operator '%1$L' is overloaded; only built-in operators are allowed
3944 = '#pragma omp atomic': lvalue expression required as left operand of '%1$L'
3945 = '%$T': unable to throw or catch a winrt object which doesn't derive from Platform::Exception
3946 = '%$T': typeid cannot be applied to this type
3947 = '%$S': typeid cannot be applied to a pack expansion
3948 = '%$L': a pack expansion cannot appear in this context
3949 = a pack expansion, '...', cannot appear in a parenthesized abstract declarator
3951 = Cannot use pointer-to-member in projected WinRT type '%$T'. Use a delegate instead.
3952 = '%$T': WinRT does not support 'in/out' arrays. Use 'const Array<T>^' for 'in' and 'WriteOnlyArray<T>' or 'Array<T>^*' for 'out' on public APIs
3954 = '%$T': An array returned from a published method on a WinRT type must use the form 'Array<T>^'
3955 = '%$T': A public constructor cannot contain an 'out' parameter or 'WriteOnlyArray<T>'
3956 = '%$S': Type is marked as Exclusive To '%$T' and cannot be used as a base of '%$S'
3957 = '%$S': cannot use 'new' on a WinRT type; use 'ref new' instead
3958 = '%$S': cannot use '%$^[GC_NEW GCNEW]' on a WinRT type; use 'ref new' instead
3959 = 'ref new' may only be used to create an object with WinRT type
3961 = static constructor is not supported
3962 = generic class is not supported
3963 = multi-dimensional array is not supported
3964 = jagged array is not supported
3965 = parameter array is not supported
3966 = '%$S': generic function is not supported
3967 = error importing '%1$I' from module '%2s'
3968 = the token '%$L' is not valid as module name separator; use period ('.') instead
3969 = inconsistent module names: '%s' and '%s'
3970 = '%$I': '%$L' can only be applied to 'ref class' or 'ref struct' at global scope or namespace scope
3971 = '%$S': partial definition cannot appear after full definition
3972 = '%$S': 'partial' can only be applied to class declarations or definitions
3973 = Unimplemented feature: %$M
3974 = '%$S': index variable in OpenMP 'for' statement must have integral type
3975 = '%$B %$pS' was previously declared or defined with a different modifier
3976 = '%$S' must be declared as 'public' in order to use '%$S'
3977 = Usage requires a reference to an assembly that defines '%$T'
3978 = '%$I': a static property is not allowed as a member of a WinRT interface or value type
3979 = '%1$S': use attribute '%2$I' instead of '%3$S'
3980 = '%$*' cannot be emitted into metadata
3981 = '%$S': a value type cannot have any static data members '%$I'
3982 = '%$S': a value type cannot have any non-public data members '%$I'
3983 = '%$S': a value type cannot have any public non-data members '%$I'
3984 = '%$S': a non-value type cannot have any public data members '%$I'
3985 = '%$I': signature of public member contains private type '%$pS'
3986 = '%$I': signature of public member contains native type '%$pS'
3987 = '%$I': signature of public member contains native type '%$T'
3988 = '%$S': a native type cannot be public
3989 = '%$S': a nested type cannot be public
3990 = '%$S': attribute '%$pS' cannot be private or nested
3991 = '%$S': cannot implement a non-public or nested interface '%$S'
3992 = '%$I': signature of public member contains invalid type '%$T'
3993 = '%$S': a value type must contain at least one public field
3994 = '%$S': a value type cannot implement interfaces or have virtual functions
3995 = '%$S': a value type cannot have any event members '%$I'
3997 = Warbird: %s
3998 = 'c++%s': unsupported C++ version; defaulting to 'c++%s'
3999 = UNKNOWN ERROR %$N Please choose the Technical Support command on the Visual C++ %$N Help menu, or open the Technical Support help file for more information
4000 = UNKNOWN WARNING%$N    Please choose the Technical Support command on the Visual C++ %$N    Help menu, or open the Technical Support help file for more information
4001 = nonstandard extension 'single line comment' was used
4002 = too many arguments for function-like macro invocation '%$I'
4003 = not enough arguments for function-like macro invocation '%$I'
4005 = '%$I': macro redefinition
4006 = #undef expected an identifier
4007 = '%$S': must be '%$L'
4008 = '%$S': '%$L' attribute ignored
4010 = single-line comment contains line-continuation character
4013 = '%$I' undefined; assuming extern returning int
4015 = '%$S': type of bit field must be integral
4018 = '%$L': signed/unsigned mismatch
4019 = empty statement at global scope
4020 = '%s': too many actual parameters
4022 = '%s': pointer mismatch for actual parameter %d
4023 = '%s': based pointer passed to unprototyped function: parameter %d
4024 = '%s': different types for formal and actual parameter %d
4025 = '%s': based pointer passed to function with variable arguments: parameter %d
4026 = function declared with formal parameter list
4027 = function declared without formal parameter list
4028 = formal parameter %d different from declaration
4029 = declared formal parameter list different from definition
4030 = first formal parameter list longer than the second list
4031 = second formal parameter list longer than the first list
4032 = formal parameter %d has different type when promoted
4033 = '%$S' must return a value
4034 = sizeof returns 0
4035 = '%$S': no return value
4036 = --- defunct diagnostic ---
4038 = '%s': illegal class modifier
4041 = --- defunct diagnostic ---
4042 = '%$S': has bad storage class
4045 = '%$S': array bounds overflow
4047 = '%$L': '%$T' differs in levels of indirection from '%$T'
4048 = different array subscripts: '%$T' and '%$T'
4049 = compiler limit: terminating line number emission
4051 = type conversion; possible loss of data
4052 = function declarations different; one contains variable arguments
4053 = one void operand for '?:'
4054 = --- defunct diagnostic ---
4055 = --- defunct diagnostic ---
4056 = overflow in floating-point constant arithmetic
4057 = '%$L': '%$T' differs in indirection to slightly different base types from '%$T'
4060 = switch statement contains no 'case' or 'default' labels
4061 = enumerator '%1$S' in switch of enum '%2$pS' is not explicitly handled by a case label
4062 = enumerator '%1$S' in switch of enum '%2$pS' is not handled
4063 = case '%D' is not a valid value for switch of enum '%$pS'
4064 = switch of incomplete enum '%$pS'
4065 = switch statement contains 'default' but no 'case' labels
4066 = characters beyond first in wide-character constant ignored
4067 = unexpected tokens following preprocessor directive - expected a newline
4068 = unknown pragma '%$I'
4069 = long double is the same precision as double
4073 = initializers put in library initialization area
4074 = initializers put in compiler reserved initialization area
4075 = initializers put in unrecognized initialization area
4076 = '%$L': cannot be used with type '%s'
4077 = unknown check_stack option
4079 = unexpected token '%$L'
4080 = expected identifier for segment name; found '%$L'
4081 = expected '%$L'; found '%$L'
4083 = expected '%$L'; found identifier '%$I'
4085 = expected pragma parameter to be 'on' or 'off'
4086 = expected pragma parameter to be '1', '2', '4', '8', or '16'
4087 = '%s': declared with 'void' parameter list
4088 = '%s': pointer mismatch in actual parameter %d, formal parameter %d
4089 = '%s': different types in actual parameter %d, formal parameter %d
4090 = '%$L': different '%$L' qualifiers
4091 = '%s': ignored on left of '%$T' when no variable is declared
4092 = sizeof returns 'unsigned long'
4094 = untagged '%$B' declared no symbols
4096 = '%$S': interface is not a COM interface; will not be emitted to IDL
4097 = expected pragma parameter to be 'restore' or 'off'
4098 = '%$S': 'void' function returning a value
4099 = '%$pS': type name first seen using '%$L' now seen using '%$L'
4100 = '%$S': unreferenced formal parameter
4101 = '%$S': unreferenced local variable
4102 = '%$S': unreferenced label
4103 = alignment changed after including header, may be due to missing #pragma pack(pop)
4109 = unexpected identifier '%$I'
4112 = #line requires an integer between 1 and %d
4113 = '%$T' differs in parameter lists from '%$T'
4114 = same type qualifier used more than once
4115 = '%$S': named type definition in parentheses
4116 = unnamed type definition in parentheses
4117 = macro name '%$I' is reserved, '%s' ignored
4119 = different bases '%$pS' and '%$pS' specified
4120 = based/unbased mismatch
4121 = '%$S': alignment of a member was sensitive to packing
4122 = '%$I': alloc_text applicable only to functions with C linkage
4123 = different base expressions specified
4124 = __fastcall with stack checking is inefficient
4125 = decimal digit terminates octal escape sequence
4127 = conditional expression is constant
4129 = '%c': unrecognized character escape sequence
4130 = '%$L': logical operation on address of string constant
4131 = '%$S': uses old-style declarator
4132 = '%$S': const object should be initialized
4133 = '%$L': incompatible types - from '%$T' to '%$T'
4137 = --- defunct diagnostic ---
4138 = '*/' found outside of comment
4141 = '%s': used more than once
4142 = '%$pS': benign redefinition of type
4143 = pragma 'same_seg' not supported; use __based allocation
4144 = '%$L': relational expression as switch expression
4145 = '%$L': relational expression as switch expression; possible confusion with '%$L'
4146 = unary minus operator applied to unsigned type, result still unsigned
4150 = deletion of pointer to incomplete type '%$pS'; no destructor called
4152 = nonstandard extension, function/data pointer conversion in expression
4153 = function/data pointer conversion in expression
4154 = deletion of an array expression; conversion to pointer supplied
4155 = deletion of an array expression without using the array form of 'delete'
4156 = deletion of an array expression without using the array form of 'delete'; array form substituted
4157 = pragma was ignored by C compiler
4158 = assuming #pragma pointers_to_members(full_generality, %$M)
4159 = #pragma %s(pop,...): has popped previously pushed identifier '%$I'
4160 = #pragma %s(pop,...): did not find previously pushed identifier '%$I'
4161 = #pragma %s(pop...): more pops than pushes
4162 = '%$I': no function with C linkage found
4163 = '%$I': not available as an intrinsic function
4164 = '%$I': intrinsic function not declared
4165 = 'HRESULT' is being converted to 'bool'; are you sure this is what you want?
4166 = illegal calling convention for constructor/destructor
4167 = '%$I': only available as an intrinsic function
4168 = compiler limit: out of debugger types, delete program database '%s' and rebuild
4172 = returning address of local variable or temporary%s
4174 = '%s': not available as a #pragma component
4175 = #pragma component(browser, on): browser info must initially be specified on the command line
4176 = '%s': unknown subcomponent for #pragma component browser
4177 = #pragma '%s' should only be used at global scope or namespace scope
4178 = case constant '%D' too big for the type of the switch expression
4179 = --- defunct diagnostic ---
4180 = qualifier applied to function type has no meaning; ignored
4181 = --- defunct diagnostic ---
4182 = #include nesting level is %d deep; possible infinite recursion
4183 = '%$I': missing return type; assumed to be a member function returning 'int'
4185 = ignoring unknown #%s attribute '%s'
4186 = #%s attribute '%s' requires %d arguments; ignored
4187 = #import attributes '%s' and '%s' are incompatible; both ignored
4188 = constant expression is not integral
4189 = '%$S': local variable is initialized but not referenced
4190 = '%$I' has C-linkage specified, but returns UDT '%$pS' which is incompatible with C
4191 = '%1$L': unsafe conversion from '%2$T' to '%3$T'%$NMaking a function call using the resulting pointer may cause your program to fail
4192 = automatically excluding '%s' while importing type library '%s'
4193 = #pragma warning(pop): no matching '#pragma warning(push)'
4194 = #pragma start_map_region cannot be nested; ignored
4195 = #pragma stop_map_region used without matching #pragma start_map_region; ignored
4196 = expected '%$L' or '%$L'; found '%$L'
4197 = '%$T': top-level volatile in cast is ignored
4199 = %s
4200 = nonstandard extension used: zero-sized array in struct/union
4201 = nonstandard extension used: nameless struct/union
4202 = nonstandard extension used: '...': prototype parameter in name list illegal
4203 = --- defunct diagnostic ---
4204 = nonstandard extension used: non-constant aggregate initializer
4205 = nonstandard extension used: static function declaration in function scope
4206 = nonstandard extension used: translation unit is empty
4207 = nonstandard extension used: extended initializer form
4208 = nonstandard extension used: delete [exp] - exp evaluated but ignored
4210 = nonstandard extension used: function given file scope
4211 = nonstandard extension used: redefined extern to static
4212 = nonstandard extension used: function declaration used ellipsis
4213 = nonstandard extension used: cast on l-value
4214 = nonstandard extension used: bit field types other than int
4215 = nonstandard extension used: long float
4216 = nonstandard extension used: float long
4218 = nonstandard extension used: must specify at least a storage class or a type
4220 = varargs matches remaining parameters
4221 = nonstandard extension used: '%$S': cannot be initialized using address of automatic variable '%$pS'
4223 = nonstandard extension used: non-lvalue array converted to pointer
4224 = nonstandard extension used: formal parameter '%$S' was previously defined as a type
4226 = nonstandard extension used: '%$I' is an obsolete keyword
4227 = anachronism used: qualifiers on reference are ignored
4228 = nonstandard extension used: qualifiers after comma in declarator list are ignored
4229 = anachronism used: modifiers on data are ignored
4230 = anachronism used: modifiers/qualifiers interspersed; qualifier ignored
4232 = nonstandard extension used: '%$S': address of dllimport '%$pS' is not static, identity not guaranteed
4233 = nonstandard extension used: '%$I' keyword only supported in C++, not C
4234 = nonstandard extension used: '%$I' keyword reserved for future use
4235 = nonstandard extension used: '%$I' keyword not supported on this architecture
4237 = '%$I' keyword is not yet supported, but reserved for future use
4238 = nonstandard extension used: class rvalue used as lvalue
4239 = nonstandard extension used: '%$L': conversion from '%$T' to '%$T'
4240 = nonstandard extension used: access to '%$pS' now defined to be '%s', previously it was defined to be '%s'
4242 = '%$L': conversion from '%$T' to '%$T', possible loss of data
4243 = %$L conversion from '%$T' to '%$T' exists, but is inaccessible
4244 = '%$L': conversion from '%$T' to '%$T', possible loss of data
4245 = '%$L': conversion from '%$T' to '%$T', signed/unsigned mismatch
4250 = '%$C': inherits '%$C::%$pS' via dominance
4251 = '%$S': %$B '%$pC' needs to have dll-interface to be used by clients of %$B '%$C'
4254 = '%$L': conversion from '%$T':'%d' to '%$T':'%d', possible loss of data
4255 = '%$I': no function prototype given: converting '()' to '(void)'
4256 = '%$pD': constructor for class with virtual bases has '...'; calls may not be compatible with older versions of Visual C++
4258 = '%$I': definition from the for loop is ignored; the definition from the enclosing scope is used
4263 = '%$D': member function does not override any base class virtual member function
4264 = '%$pD': no override available for virtual member function from base '%$pC'; function is hidden
4265 = '%$S': class has virtual functions, but its non-trivial destructor is not virtual; instances of this class may not be destructed correctly
4266 = '%$pD': no override available for virtual member function from base '%$pC'; function is hidden
4267 = '%$L': conversion from 'size_t' to '%$T', possible loss of data
4268 = '%$S': 'const' static/global data initialized with compiler generated default constructor fills the object with zeros
4269 = '%$S': 'const' automatic data initialized with compiler generated default constructor produces unreliable results
4272 = '%$S': is marked __declspec(dllimport); must specify native calling convention when importing a function.
4273 = '%$S': inconsistent dll linkage
4274 = #ident ignored; see documentation for #pragma comment(exestr, 'string')
4275 = non dll-interface %$B '%$pC' used as base for dll-interface %$B '%$pC'
4276 = '%$S': no prototype provided; assumed no parameters
4277 = imported item '%$C::%$I' exists as both data member and function member; data member ignored
4278 = '%$I': identifier in type library '%s' is already a macro; use the 'rename' qualifier
4279 = '%$I': identifier in type library '%s' is a keyword; use the 'rename' qualifier
4280 = 'operator ->' was self recursive through type '%$pC'
4281 = 'operator ->' recursion occurred through type '%$pC'
4282 = then through type '%$pC'
4283 = and through type '%$pC'
4285 = return type for '%$C::operator ->' is recursive if applied using infix notation
4286 = '%$T': is caught by base class ('%$T') on line %d
4287 = '%$L': unsigned/negative constant mismatch
4288 = nonstandard extension used: '%$I': loop control variable declared in the for-loop is used outside the for-loop scope; it conflicts with the declaration in the outer scope
4289 = nonstandard extension used: '%$I': loop control variable declared in the for-loop is used outside the for-loop scope
4290 = C++ exception specification ignored except to indicate a function is not __declspec(nothrow)
4291 = '%$pD': no matching operator delete found; memory will not be freed if initialization throws an exception
4293 = '%$L': shift count negative or too big, undefined behavior
4295 = '%$S': array is too small to include a terminating null character
4296 = '%$L': expression is always %$M
4297 = '%$S': function assumed not to throw an exception but does
4298 = '%$I': identifier in type library '%s' is already a macro; renaming to '__%$I'
4299 = '%$I': identifier in type library '%s' is a keyword; renaming to '__%$I'
4301 = --- defunct diagnostic ---
4302 = '%$L': truncation from '%$T' to '%$T'
4303 = --- defunct diagnostic ---
4305 = '%$L': truncation from '%$T' to '%$T'
4306 = '%$L': conversion from '%$T' to '%$T' of greater size
4307 = '%$L': signed integral constant overflow
4308 = negative integral constant converted to unsigned type
4309 = '%$L': truncation of constant value
4310 = cast truncates constant value
4311 = '%$L': pointer truncation from '%$T' to '%$T'
4312 = '%$L': conversion from '%$T' to '%$T' of greater size
4313 = '%1s': '%%%2c' in format string conflicts with argument %3d of type '%4$T'
4314 = --- defunct diagnostic ---
4315 = '%$S': 'this' pointer for member '%$S' may not be aligned %d as expected by the constructor
4316 = '%$S': object allocated on the heap may not be aligned %d
4318 = --- defunct diagnostic ---
4319 = '%$L': zero extending '%$T' to '%$T' of greater size
4321 = automatically generating an IID for interface '%$S'
4322 = automatically generating a CLSID for class '%$S'
4323 = re-using registered CLSID for class '%$S'
4324 = '%$S': structure was padded due to alignment specifier
4325 = attributes for standard section '%s' ignored
4326 = return type of '%$I' should be '%$M' instead of '%$T'
4327 = --- defunct diagnostic ---
4328 = --- defunct diagnostic ---
4329 = alignment specifier is ignored on enum
4330 = attribute '%s' for section '%s' ignored
4333 = '%$L': right shift by too large amount, data loss
4334 = '%$L': result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
4335 = Mac file format detected: please convert the source file to either DOS or UNIX format
4336 = import cross-referenced type library '%s' before importing '%s'
4337 = cross-referenced type library '%s' in '%s' is being automatically imported
4338 = --- defunct diagnostic ---
4339 = '%$S': use of undefined type detected in %$&[CLR WINRT] meta-data - use of this type may lead to a runtime exception
4340 = '%$I': value wrapped from positive to negative value
4342 = behavior change: '%$S' called, but a member operator was called in previous versions
4343 = --- defunct diagnostic ---
4344 = --- defunct diagnostic ---
4346 = '%$*': dependent name is not a type
4348 = '%$pS': redefinition of default parameter: parameter %d
4350 = behavior change: '%$pD' called instead of '%$pD'
4352 = '%$I': intrinsic function already defined
4353 = nonstandard extension used: constant 0 as function expression.  Use '__noop' function intrinsic instead
4355 = 'this': used in base member initializer list
4356 = '%$S': static data member cannot be initialized via derived class
4357 = param array argument found in formal argument list for delegate '%1$pS' ignored when generating '%2$S'
4358 = '%$L': return type of combined delegates is not 'void'; returned value is undefined
4359 = '%$S': Alignment specifier is less than actual alignment (%d), and will be ignored.
4362 = --- defunct diagnostic ---
4364 = #using for assembly '%$I' previously seen at %s(%d) without as_friend attribute; as_friend not applied
4365 = '%$L': conversion from '%$T' to '%$T', signed/unsigned mismatch
4366 = The result of the unary '%$L' operator may be unaligned
4367 = Conversion from '%$T' to '%$T' may cause datatype misalignment exception
4368 = cannot define '%$I' as a member of managed '%$S': mixed types are not supported
4369 = '%$S':  enumerator value '%D' cannot be represented as '%$T', value is '%D'
4370 = '%$pS': layout of class has changed from a previous version of the compiler due to better packing
4371 = '%$pS': layout of class may have changed from a previous version of the compiler due to better packing of member '%$S'
4373 = '%$S': virtual function overrides '%$pS', previous versions of the compiler did not override when parameters only differed by const/volatile qualifiers
4374 = '%$pD': interface method will not be implemented by non-virtual method '%$pD'
4375 = non-public method '%$pD' does not override '%$pD'
4376 = access specifier '%s %s:' is no longer supported: please use '%s:' instead
4377 = native types are private by default; -d1PrivateNativeTypes is deprecated
4378 = Must obtain function pointers to run initializers; consider System::ModuleHandle::ResolveMethodHandle
4379 = --- defunct diagnostic ---
4380 = '%$S': A default constructor cannot be deprecated
4381 = '%$pD': interface method will not be implemented by non-public method '%$pD'
4382 = throwing '%$T': a type with __clrcall destructor or copy constructor can only be caught in /clr:pure module
4383 = '%$S': the meaning of dereferencing a handle can change, when a user-defined '%$L' operator exists; write the operator as a static function to be explicit about the operand
4384 = #pragma '%s' should only be used at global scope
4388 = '%$L': signed/unsigned mismatch
4389 = '%$L': signed/unsigned mismatch
4390 = ';': empty controlled statement found; is this the intent?
4391 = '%$D': incorrect return type for intrinsic function, expected '%$B'
4392 = '%$D': incorrect number of arguments for intrinsic function, expected '%d' arguments
4393 = '%$S': const has no effect on %$L data member; ignored
4394 = '%$S': per-appdomain symbol should not be marked with __declspec(%s)
4395 = '%$S': member function will be invoked on a copy of the initonly data member '%$S'
4396 = '%$S': the inline specifier cannot be used when a friend declaration refers to a specialization of a function template
4397 = DefaultCharSetAttribute is ignored
4398 = '%$S': per-process global object might not work correctly with multiple appdomains; consider using __declspec(appdomain)
4399 = '%$S': per-process symbol should not be marked with __declspec(%s) when compiled with /clr:pure
4400 = '%$T': const/volatile qualifiers on this type are not supported
4401 = '%$S': member is bit field
4402 = must use PTR operator
4403 = illegal PTR operator
4404 = period on directive ignored
4405 = '%$I': identifier is reserved word
4406 = operand on directive ignored
4407 = cast between different pointer to member representations, compiler may generate incorrect code
4408 = anonymous %$B did not declare any data members
4409 = illegal instruction size
4410 = illegal size for operand
4411 = '%$I': symbol resolves to displacement register
4412 = '%$pS': function signature contains type '%$T'; C++ objects are unsafe to pass between pure code and mixed or native.
4413 = --- defunct diagnostic ---
4414 = '%$S': short jump to function converted to near
4415 = duplicate __declspec(code_seg('%$I'))
4416 = __declspec(code_seg(...)) contains empty string: ignored
4417 = an explicit template instantiation cannot have __declspec(code_seg(...)): ignored
4418 = __declspec(code_seg(...)) ignored on an enum
4419 = '%$I' has no effect when applied to private ref class '%$S'.
4420 = --- defunct diagnostic ---
4423 = 'std::bad_alloc': will be caught by class ('%$T') on line %d
4424 = catch for '%1$T' preceded by '%2$T' on line %3d; unpredictable behavior may result if 'std::bad_alloc' is thrown
4425 = A SAL annotation cannot be applied to '...'
4426 = optimization flags changed after including header, may be due to #pragma optimize()
4427 = '%$L': overflow in constant division, undefined behavior
4429 = possible incomplete or improperly formed universal-character-name
4430 = missing type specifier - int assumed. Note: C++ does not support default-int
4431 = missing type specifier - int assumed. Note: C no longer supports default-int
4434 = a static constructor must have private accessibility; changing to private access
4435 = '%$S': Object layout under /vd2 will change due to virtual base '%$S'
4436 = dynamic_cast from virtual base '%$S' to '%$S' in constructor or destructor could fail with partially-constructed object
4437 = dynamic_cast from virtual base '%$S' to '%$S' could fail in some contexts
4438 = --- defunct diagnostic ---
4439 = '%$S': function definition with a managed type in the signature must have a __clrcall calling convention
4440 = calling convention redefinition from '%s' to '%s' ignored
4441 = calling convention of '%s' ignored; '%s' used instead
4442 = embedded null terminator in __annotation argument.  Value will be truncated.
4443 = expected pragma parameter to be '0', '1', or '2'
4444 = '%$I': top level '__unaligned' is not implemented in this context
4445 = '%$D': in a %$&[MANAGED WINRT] type a virtual method cannot be private
4446 = '%$S': cannot map member '%$I' into this type, due to conflict with the type name. The method was renamed to '%$I'
4447 = 'main' signature found without threading model. Consider using 'int main(Platform::Array<Platform::String^>^ args)'.
4448 = '%$S' does not have a default interface specified in metadata. Picking: '%$S', which may fail at runtime.
4449 = --- defunct diagnostic ---
4450 = --- defunct diagnostic ---
4451 = '%$S': Usage of ref class '%$S' inside this context can lead to invalid marshaling of object across contexts
4452 = '%$S': public type cannot be at global scope. It must be in a namespace that is a child of the name of the output .winmd file.
4453 = '%$S': A '[WebHostHidden]' type should not be used on the published surface of a public type that is not '[WebHostHidden]'
4454 = '%$S' is overloaded by more than the number of input parameters without having [DefaultOverload] specified. Picking '%$D' as the default overload
4455 = 'operator %$I': literal suffix identifiers that do not start with an underscore are reserved
4456 = declaration of '%$I' hides previous local declaration
4457 = declaration of '%$I' hides function parameter
4458 = declaration of '%$I' hides class member
4459 = declaration of '%$I' hides global declaration
4460 = %$&[CLR WINRT] operator '%$S', has parameter passed by reference. %$&[CLR WINRT] operator '%$L' has different semantics from C++ operator '%$L', did you intend to pass by value?
4461 = '%$S': this class has a finalizer '!%$S' but no destructor '~%$S'
4462 = '%$S' : cannot determine the GUID of the type. Program may fail at runtime.
4463 = overflow; assigning %s to bit-field that can only hold values from %s to %s
4464 = relative include path contains '..'
4465 = '%$I': use of dependent template requires ::template
4466 = --- defunct diagnostic ---
4467 = usage of ATL attributes is deprecated
4468 = 'fallthrough': attribute must be followed by a case label or a default label
4469 = --- defunct diagnostic ---
4470 = floating-point control pragmas ignored under /clr
4471 = '%$I': a forward declaration of an unscoped enumeration must have an underlying type
4472 = --- defunct diagnostic ---
4473 = '%s' : not enough arguments passed for format string
4474 = '%s' : too many arguments passed for format string
4475 = '%s' : length modifier '%s' cannot be used with type field character '%c' in format specifier
4476 = '%s' : unknown type field character '%s' in format specifier
4477 = '%s' : format string '%s' requires an argument of type '%$T', but variadic argument %d has type '%$T'
4478 = '%s' : positional and non-positional placeholders cannot be mixed in the same format string
4480 = nonstandard extension used: specifying underlying type for enum '%$T'
4481 = nonstandard extension used: override specifier '%$L'
4482 = --- defunct diagnostic ---
4483 = syntax error: expected C++ keyword
4484 = '%$S': matches base ref class method '%$S', but is not marked 'virtual', 'new' or 'override'; 'new' (and not 'virtual') is assumed
4485 = '%$S': matches base ref class method '%$S', but is not marked 'new' or 'override'; 'new' (and 'virtual') is assumed
4486 = '%$S': a private virtual method of a ref class or value class should be marked 'sealed'
4487 = '%$S': matches inherited non-virtual method '%$S' but is not explicitly marked 'new'
4488 = '%1$S': requires '%2$L' keyword to implement the interface method '%3$S'
4489 = '%$L': not allowed on interface method '%$I'; override specifiers are only allowed on ref class and value class methods
4490 = '%$L': incorrect use of override specifier; '%$S' does not match a base ref class method
4491 = '%s': has an illegal IDL version format
4492 = '%$S': matches base ref class method '%$S', but is not marked 'override'
4493 = delete expression has no effect as the destructor of '%$T' does not have 'public' accessibility
4494 = '%$S' : Ignoring __declspec(allocator) because the function return type is not a pointer or reference
4495 = nonstandard extension '__super' used: replace with explicit base class name
4496 = nonstandard extension 'for each' used: replace with ranged-for statement
4497 = nonstandard extension 'sealed' used: replace with 'final'
4498 = nonstandard extension used: '%$L'
4499 = '%$L': an explicit specialization cannot have a storage class (ignored)
4502 = 'linkage specification' requires use of keyword 'extern' and must precede all other specifiers
4503 = --- defunct diagnostic ---
4505 = '%$S': unreferenced function with internal linkage has been removed
4506 = no definition for inline function '%$D'
4508 = '%$S': function should return a value; 'void' return type assumed
4509 = --- defunct diagnostic ---
4510 = '%$pS': default constructor was implicitly defined as deleted
4511 = '%$pS': copy constructor was implicitly defined as deleted
4512 = '%$pS': assignment operator was implicitly defined as deleted
4513 = '%$pS': destructor was implicitly defined as deleted
4514 = '%$S': unreferenced inline function has been removed
4515 = '%$I': namespace uses itself
4516 = '%$C::%$S': access-declarations are deprecated; member using-declarations provide a better alternative
4517 = access-declarations are deprecated; member using-declarations provide a better alternative
4518 = '%s': storage-class or type specifier(s) unexpected here; ignored
4519 = default template arguments are only allowed on a class template
4521 = --- defunct diagnostic ---
4522 = --- defunct diagnostic ---
4523 = --- defunct diagnostic ---
4526 = '%$S': static member function cannot override virtual function '%$pD'%$Noverride ignored, virtual function will be hidden
4530 = C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc
4531 = --- defunct diagnostic ---
4532 = '%$*': jump out of %$^[__FINALLY FINALLY] block has undefined behavior during termination handling
4533 = initialization of '%1$pS' is skipped by 'goto %2$pS'
4534 = '%$D' will not be a default constructor for %$B '%$S' due to the default argument
4535 = calling _set_se_translator() requires /EHa
4536 = '%s': type-name exceeds meta-data limit of '%d' characters
4537 = '%$pS': '.' applied to non-UDT type
4538 = '%$T': const/volatile qualifiers on this type are not supported
4540 = dynamic_cast used to convert to inaccessible or ambiguous base; run-time test will fail ('%$T' to '%$T')
4541 = '%$L' used on polymorphic type '%$T' with /GR-; unpredictable behavior may result
4542 = Skipping generation of merged injected text file, cannot write %$M file: '%s': %$e
4543 = Injected text suppressed by attribute 'no_injected_text'
4544 = the default template argument for '%1$S' is ignored on this template declaration
4545 = expression before comma evaluates to a function which is missing an argument list
4546 = function call before comma missing argument list
4547 = '%$L': operator before comma has no effect; expected operator with side-effect
4548 = expression before comma has no effect; expected expression with side-effect
4549 = '%$L': operator before comma has no effect; did you intend '%$L'?
4550 = expression evaluates to a function which is missing an argument list
4551 = function call missing argument list
4552 = '%1$L': result of expression not used
4553 = '%1$L': result of expression not used; did you intend '%2$L'?
4554 = '%1$L': check operator precedence for possible error; use parentheses to clarify precedence
4555 = result of expression not used
4556 = value of intrinsic immediate argument '%D' is out of range '%d - %d'
4557 = '__assume' contains effect '%$L'
4558 = value of operand '%d' is out of range '%d - %d'
4559 = '%$S': redefinition; the function gains __declspec(%s)
4561 = '__fastcall' incompatible with the '/clr' option: converting to '__stdcall'
4562 = fully prototyped functions are required with the '/clr' option: converting '()' to '(void)'
4564 = method '%$I' of %$B '%$S' defines unsupported default parameter '%s'
4565 = '%$S': redefinition; the symbol was previously declared with __declspec(%s)
4566 = character represented by universal-character-name '%s' cannot be represented in the current code page (%d)
4568 = '%$S': no members match the signature of the explicit override
4569 = '%$S': no members match the signature of the explicit override
4570 = '%$S': is not explicitly declared as abstract but has abstract functions
4571 = --- defunct diagnostic ---
4572 = [ParamArray] attribute is deprecated under /clr, use '...' instead
4573 = the usage of '%$S' requires the compiler to capture 'this' but the current default capture mode does not allow it
4574 = '%$I' is defined to be '0': did you mean to use '#if %$I'?
4575 = '__vectorcall' incompatible with the '/clr' option: converting to '__stdcall'
4576 = a parenthesized type followed by an initializer list is a non-standard explicit type conversion syntax
4577 = 'noexcept' used with no exception handling mode specified; termination on exception is not guaranteed. Specify /EHsc
4578 = 'abs': conversion from '%$T' to '%$T', possible loss of data (Did you mean to call '%$I' or to #include <cmath>?)
4580 = [attribute] is deprecated; instead specify %$&[SYSTEM PLATFORMMETADATA]Attribute as a base class
4581 = deprecated behavior: '"%$I"' replaced with '%$I' to process attribute
4582 = '%$S': constructor is not implicitly called
4583 = '%$S': destructor is not implicitly called
4584 = '%$S': base-class '%$pS' is already a base-class of '%$pS'
4585 = '%$S': A WinRT 'public ref class' must either be sealed or derive from an existing unsealed class
4586 = '%$S': A public type cannot be declared in a top-level namespace called 'Windows'
4587 = '%$S': behavior change: constructor is no longer implicitly called
4588 = '%$S': behavior change: destructor is no longer implicitly called
4589 = Constructor of abstract class '%$S' ignores initializer for virtual base class '%$S'
4592 = '%$S': symbol will be dynamically initialized (implementation limitation)
4594 = class '%$S' can never be instantiated - indirect virtual base class '%$S' is inaccessible
4595 = '%$S': non-member operator new or delete functions may not be declared inline
4596 = '%$I': illegal qualified name in member declaration
4597 = undefined behavior: %$s
4598 = '#include %1c%2s%3c': header number %4z in the %5$M does not match %6$M at that position
4599 = '%s%s': %$M argument number %z does not match %$M
4600 = #pragma '%s': expected a valid non-empty string
4602 = #pragma pop_macro: '%$I' no previous #pragma push_macro for this identifier
4603 = '%$I': macro is not defined or definition is different after precompiled header use
4604 = '%$T': passing an argument of this type by value across the native/managed boundary requires the type to be move- or copy-constructible. Otherwise, the runtime behavior is undefined
4605 = '/D%s' specified on current command line, but was not specified when precompiled header was built
4606 = #pragma warning: '%d' ignored; Code Analysis warnings are not associated with warning levels
4608 = Initializing multiple members of union: '%$S' and '%$S'
4609 = '%$S' derives from default interface '%$S' on type '%$S'. Use a different default interface for '%$S', or break the base/derived relationship.
4610 = %$B '%$S' can never be instantiated - user defined constructor required
4611 = interaction between '%$S' and C++ object destruction is non-portable
4612 = error in include filename
4613 = '%$S': class of segment cannot be changed
4615 = #pragma warning: unknown user warning type
4616 = #pragma warning: warning number '%d' not a valid compiler warning
4618 = pragma parameters included an empty string; pragma ignored
4619 = #pragma warning: there is no warning number '%d'
4620 = no postfix form of 'operator ++' found for type '%$pS', using prefix form
4621 = no postfix form of 'operator --' found for type '%$pS', using prefix form
4622 = overwriting debug information formed during creation of the precompiled header in object file: '%s'
4623 = '%$S': default constructor was implicitly defined as deleted
4624 = '%$S': destructor was implicitly defined as deleted
4625 = '%$S': copy constructor was implicitly defined as deleted
4626 = '%$S': assignment operator was implicitly defined as deleted
4627 = --- defunct diagnostic ---
4628 = digraphs not supported with -Ze. Character sequence '%s' not interpreted as alternate token for '%s'
4629 = --- defunct diagnostic ---
4630 = '%$S': '%$L' storage-class specifier illegal on member definition
4631 = MSXML or XPath unavailable, XML document comments will not be processed. %s
4632 = XML document comment: %s - access denied: %s
4633 = XML document comment%s: error: %s
4634 = XML document comment%s: cannot be applied: %s
4635 = XML document comment%s: badly-formed XML: %s
4636 = XML document comment%s: tag requires non-empty '%s' attribute.
4637 = XML document comment%s: <include> tag discarded. %s
4638 = XML document comment%s: reference to unknown symbol '%s'.
4639 = MSXML error, XML document comments will not be processed. %s
4640 = '%$S': construction of local static object is not thread-safe
4641 = XML document comment has an ambiguous cross reference: 
4642 = '%1$S': could not import the constraints for generic parameter '%2$S'
4643 = Forward declaring '%$I' in namespace std is not permitted by the C++ Standard.
4644 = usage of the macro-based offsetof pattern in constant expressions is non-standard; use offsetof defined in the C++ standard library instead
4645 = function declared with 'noreturn' has a return statement
4646 = function declared with 'noreturn' has non-void return type
4647 = behavior change: __is_pod(%$S) has different value in previous versions
4648 = standard attribute '%1$I' is ignored
4649 = attributes are ignored in this context
4650 = debugging information not in precompiled header; only global symbols from the header will be available
4651 = '/D%s' specified for precompiled header but not for current compile
4652 = compiler option '%$M' inconsistent with precompiled header; current command-line option will override that defined in the precompiled header
4653 = compiler option '%$M' inconsistent with precompiled header; current command-line option ignored
4654 = Code placed before include of precompiled header line will be ignored. Add code to precompiled header.
4655 = '%$S': variable type is new since the latest build, or is defined differently elsewhere
4656 = '%$C': data type is new or has changed since the latest build, or is defined differently elsewhere
4657 = expression involves a data type that is new since the latest build
4658 = '%$S': function prototype is new since the latest build, or is declared differently elsewhere
4659 = #pragma '%s': use of reserved segment '%$I' has undefined behavior, use #pragma comment(linker, ...)
4661 = '%$pD': no suitable definition provided for explicit template instantiation request
4662 = explicit instantiation; template-class '%$pS' has no definition from which to specialize '%$pS'
4667 = '%$D': no function template defined that matches forced instantiation
4668 = '%$I' is not defined as a preprocessor macro, replacing with '0' for '%s'
4669 = '%$L': unsafe conversion: '%$S' is a %$&[MANAGED WINRT] type object
4670 = '%s': this base class is inaccessible
4671 = '%s': the copy constructor is inaccessible
4672 = '%s': ambiguous. First seen as '%s'
4673 = throwing '%$T' the following types will not be considered at the catch site
4674 = '%$I' should be declared 'static' and have exactly one parameter
4676 = '%s': the destructor is inaccessible
4677 = '%$I': signature of non-private member contains assembly private type '%$pS'
4678 = base class '%$pS' is less accessible than '%$I'
4679 = '%s': could not import item or its associated custom attribute
4680 = '%$S': coclass does not specify a default interface
4681 = '%$S': coclass does not specify a default interface that is an event source
4682 = '%$S': no directional parameter attribute specified, defaulting to [in]
4683 = '%$pD': event source has an 'out'-parameter; exercise caution when hooking multiple event handlers
4684 = '%s': WARNING!! attribute may cause invalid code generation: use with caution
4685 = --- defunct diagnostic ---
4686 = '%$S': possible change in behavior, change in UDT return calling convention
4687 = '%$S': a sealed abstract class cannot implement an interface '%$S'
4688 = '%$I': constraint list contains assembly private type '%$pS'
4689 = '%c': unsupported character in #pragma detect_mismatch; #pragma ignored
4690 = [ emitidl( pop ) ]: more pops than pushes
4691 = '%$T': type referenced was expected in unreferenced %$M '%s', type defined in current translation unit used instead
4692 = '%$I': signature of non-private member contains assembly private native type '%$pS'
4693 = '%$S': a sealed abstract class cannot have any instance members '%$I'
4694 = '%$S': a sealed abstract class cannot have a base-class '%$S'
4695 = #pragma execution_character_set: '%s' is not a supported argument: currently only 'UTF-8' is supported
4698 = '%$S' is for evaluation purposes only and is subject to change or removal in future updates.
4700 = uninitialized local variable '%s' used
4701 = potentially uninitialized local variable '%s' used
4702 = unreachable code
4703 = potentially uninitialized local pointer variable '%s' used
4706 = assignment within conditional expression
4709 = comma operator within array index expression
4710 = '%$pD': function not inlined
4711 = function '%s' selected for automatic inline expansion
4714 = function '%$pD' marked as __forceinline not inlined
4715 = '%s': not all control paths return a value
4716 = '%s': must return a value
4717 = '%s': recursive on all control paths, function will cause runtime stack overflow
4718 = '%s': recursive call has no side effects, deleting
4719 = Double constant found when Qfast specified - use 'f' as a suffix to indicate single precision
4720 = in-line assembler reports: '%s'
4721 = '%s': not available as an intrinsic
4722 = '%s': destructor never returns, potential memory leak
4723 = potential divide by 0
4724 = potential mod by 0
4725 = instruction may be inaccurate on some Pentiums
4726 = ARM arch4/4T supports only '<cpsr_f> or <spsr_f>' with immediate value
4727 = PCH named %s with same timestamp found in %s and %s.  Using first PCH.
4728 = /Yl- option ignored because PCH reference is required
4729 = function too big for flow graph based warnings
4730 = '%s': mixing _m64 and floating point expressions may result in incorrect code
4731 = '%s': frame pointer register '%s' modified by inline assembly code
4732 = intrinsic '%s' is not supported in this architecture
4733 = Inline asm assigning to 'FS:0': handler not registered as safe handler
4734 = More than 64k line numbers in a COFF debug info section; stop emitting COFF debug line numbers for module '%s'
4735 = align_function attribute argument '%d' is not a power of two and is not positive. Ignoring attribute
4736 = align_function attribute ignored because /Gy was not specified
4737 = Unable to perform required tail call. Performance may be degraded.
4738 = storing 32-bit float result in memory, possible loss of performance
4739 = reference to variable '%s' exceeds its storage space
4740 = flow in or out of inline asm code suppresses global optimization
4741 = /Oq option ignored for __fastcall function '%s'
4742 = '%s' has different alignment in '%s' and '%s': %d and %d
4743 = '%s' has different size in '%s' and '%s': %d and %d bytes
4744 = '%s' has different type in '%s' and '%s': '%s' and '%s'
4745 = volatile access of '%s' cannot be honored due to its size
4746 = volatile access of '%s' is subject to /volatile:<iso|ms> setting; consider using __iso_volatile_load/store intrinsic functions
4747 = Calling managed '%s': Managed code may not be run under loader lock, including the DLL entrypoint and calls reached from the DLL entrypoint
4749 = conditionally supported: %$s
4750 = '%s': function with _alloca() inlined into a loop
4751 = /arch AVX flag does not apply to Intel(R) Streaming SIMD Extensions that are within inline ASM
4752 = found Intel(R) Advanced Vector Extensions; consider using the appropriate /arch AVX flag
4753 = Cannot find bounds for pointer; MPX intrinsic function ignored
4754 = Conversion rules for arithmetic operations in the comparison at %s(%d) mean that one branch cannot be executed. Cast '%s' to '%s' (or similar type of %d bytes).
4755 = Conversion rules for arithmetic operations in the comparison at %s(%d) mean that one branch cannot be executed in an inlined function. Cast '%s' to '%s' (or similar type of %d bytes).
4756 = overflow in constant arithmetic
4757 = --- defunct diagnostic ---
4764 = Cannot align catch objects to greater than 16 bytes
4767 = section name '%s' is longer than 8 characters and will be truncated by the linker
4768 = __declspec attributes before linkage specification are ignored
4770 = partially validated enum '%s' used as index
4771 = Bounds must be created using a simple pointer; MPX intrinsic function ignored
4772 = #import referenced a type from a missing type library; '%s' used as a placeholder
4774 = '%s' : format string expected in argument %d is not a string literal
4775 = nonstandard extension used in format string '%s' of function '%s'
4776 = '%%%c' is not allowed in the format string of function '%s'
4777 = '%s' : format string '%s' requires an argument of type '%$T', but variadic argument %d has type '%$T'
4778 = '%s' : unterminated format string '%s'
4786 = '%s': object name was truncated to '%d' characters in the %$M information
4788 = '%Fs': identifier was truncated to '%d' characters
4789 = buffer '%s' of size %d bytes will be overrun; %d bytes will be written starting at offset %d
4792 = function '%s' declared using sysimport and referenced from native code; import library required to link
4793 = '%$pD': function compiled as native:
		%s
4794 = segment of thread local storage variable '%s' changed from '%s' to '%s'
4798 = native code generated for p-code function '%s' with exception handler or unwind semantics
4799 = function '%s' has no EMMS instruction
4800 = Implicit conversion from '%$T' to bool. Possible information loss
4801 = Return by reference is not verifiable: %s
4803 = '%$D': the raise method has a different storage class from that of the event, '%$pD'
4804 = '%$L': unsafe use of type 'bool' in operation
4805 = '%$L': unsafe mix of type '%$T' and type '%$T' in operation
4806 = '%$L': unsafe operation: no value of type '%$T' promoted to type '%$T' can equal the given constant
4807 = '%$L': unsafe mix of type '%$T' and signed bit field of type '%$T'
4808 = case '%ld' is not a valid value for switch condition of type 'bool'
4809 = switch statement has redundant 'default' label; all possible 'case' labels are given
4810 = value of pragma pack(show) == %d
4811 = value of pragma conform(forScope, show) == %s
4812 = obsolete declaration style: please use '%$S::%s%$I' instead
4813 = '%$S': a friend function of a local class must have been previously declared
4815 = '%$S': zero-sized array in stack object will have no elements (unless the object is an aggregate that has been aggregate initialized)
4816 = '%$S': parameter has a zero-sized array which will be truncated (unless the object is passed by reference)
4817 = '%$S': illegal use of '.' to access this member; compiler replaced with '->'
4819 = The file contains a character that cannot be represented in the current code page (%d). Save the file in Unicode format to prevent data loss
4820 = '%1$S': '%2u' bytes padding added after %3$M '%4$S'
4821 = Unable to determine Unicode encoding type, please save the file with signature (BOM)
4822 = '%$S': local class member function does not have a body
4826 = Conversion from '%$T' to '%$T' is sign-extended. This may cause unexpected runtime behavior.
4827 = A public 'ToString' method with 0 parameters should be marked as virtual and override
4828 = The file contains a character starting at offset 0x%x that is illegal in the current source character set (codepage %d).
4829 = Possibly incorrect parameters to function main. Consider 'int main(Platform::Array<Platform::String^>^ argv)'
4834 = discarding return value of function with 'nodiscard' attribute
4835 = '%$S': the initializer for exported data will not be run until managed code is first executed in the host assembly
4837 = trigraph detected: '??%c' replaced by '%c'
4838 = conversion from '%$T' to '%$T' requires a narrowing conversion
4839 = non-standard use of class '%$S' as an argument to a variadic function
4840 = non-portable use of class '%$S' as an argument to a variadic function
4841 = non-standard extension used: %s
4842 = the result of 'offsetof' applied to a type using multiple inheritance is not guaranteed to be consistent between compiler releases
4843 = '%$T': An exception handler of reference to array or function type is unreachable, use '%$T' instead
4844 = 'export module %s;' is now the preferred syntax for declaring a module interface
4845 = '__declspec(no_init_all)' is ignored unless '/d1initall[0|1|2|3]' or '/presetPadding' is specified on the command line
4846 = '%s' is not a valid argument for '/d1initall': command-line flag ignored
4847 = '%$S': '__declspec(no_init_all)' can only be applied to a function, a class type, or a local variable: ignored
4848 = support for attribute '%sno_unique_address' in C++17 and earlier is a vendor extension
4849 = OpenMP '%s' clause ignored in '%s' directive
4854 = binding dereferenced null pointer to reference has undefined behavior
4855 = implicit capture of 'this' via '[=]' is deprecated in '%1$M'
4856 = '%s' is not a valid argument for '/d1initAll:FillPattern' (value must be between 0 and 255). Command-line flag ignored
4857 = C++/CLI mode does not support C++ versions newer than C++%1s; setting language to /std:c++%2s
4858 = discarding return value: %s
4866 = compiler may not enforce left-to-right evaluation order for call to '%s'
4867 = '%$S': non-standard syntax; use '&' to create a pointer to member
4868 = compiler may not enforce left-to-right evaluation order in braced initializer list
4869 = 'nodiscard' may only be applied to classes, enumerations, and functions
4872 = floating point division by zero detected when compiling the call graph for the concurrency::parallel_for_each at: '%s'
4880 = casting from '%$T' to '%$T': casting away constness from a pointer or reference may result in undefined behavior in an amp restricted function
4881 = the constructor and/or the destructor will not be invoked for tile_static variable '%$S'
4882 = passing functors with non-const call operators to concurrency::parallel_for_each is deprecated
4883 = '%s': function size suppresses optimizations
4900 = Il mismatch between '%s' version '%ld' and '%s' version '%ld'
4905 = wide string literal cast to '%$T'
4906 = string literal cast to '%$T'
4910 = '%$S': '__declspec(dllexport)' and 'extern' are incompatible on an explicit instantiation
4912 = '%s': attribute has undefined behavior on a nested UDT
4913 = user defined binary operator ',' exists but no overload could convert all operands, default built-in binary operator ',' used
4916 = in order to have a dispid, '%$S': must be introduced by an interface
4917 = '%$S': a GUID can only be associated with a class, interface or namespace
4918 = '%c': invalid character in pragma optimization list
4920 = enum %s member %s=%d already seen in enum %s as %s=%d
4921 = '%s': attribute value '%s' should not be multiply specified
4925 = '%$pD': dispinterface method cannot be called from script
4926 = '%$pS': symbol is already defined: attributes ignored
4927 = illegal conversion; more than one user-defined conversion has been implicitly applied
4928 = illegal copy-initialization; more than one user-defined conversion has been implicitly applied
4929 = '%s': typelibrary contains a union; ignoring the 'embedded_idl' qualifier
4930 = '%$D': prototyped function not called (was a variable definition intended?)
4931 = we are assuming the type library was built for %d-bit pointers
4932 = __identifier(%s) and __identifier(%s) are indistinguishable
4934 = '__delegate(multicast)' is deprecated, use '__delegate' instead
4935 = assembly access specifier modified from '%s'
4936 = this __declspec is supported only when compiled with /clr or /clr:pure
4937 = '%s' and '%s' are indistinguishable as arguments to '%s'
4938 = '%$S': Floating point reduction variable may cause inconsistent results under /fp:strict or #pragma fenv_access
4939 = #pragma vtordisp is deprecated and will be removed in a future release of Visual C++
4944 = '%$I': cannot import symbol from '%s': as '%$pS' already exists in the current scope
4945 = '%$I': cannot import symbol from '%s': as '%$pS' has already been imported from another assembly '%s'
4946 = reinterpret_cast used between related classes: '%$pS' and '%$pS'
4947 = '%$S': marked as obsolete
4948 = return type of '%$pS' does not match the last parameter type of the corresponding setter
4949 = pragma '%s' is meaningful only when compiled with '/clr[:option]'
4950 = '%$S': marked as obsolete
4951 = '%s' has been edited since profile data was collected, function profile data not used
4952 = '%s': no profile data found in program database '%s'
4953 = Inlinee '%s' has been edited since profile data was collected, profile data not used
4954 = '%s': not profiled (contains __int64 switch expression)
4956 = '%$T': this type is not verifiable
4957 = '%$L': explicit cast from '%$T' to '%$T' is not verifiable
4958 = '%$L': pointer arithmetic is not verifiable
4959 = cannot define unmanaged %$B '%$S' in /clr:safe because accessing its members yields unverifiable code
4960 = '%s' is too big to be profiled
4961 = No profile data was merged into '%s', profile-guided optimizations disabled
4962 = '%s': Profile-guided optimizations disabled because optimizations caused profile data to become inconsistent
4963 = '%s': no profile data found; different compiler options were used in instrumented build
4964 = No optimization options were specified; profile info will not be collected
4965 = implicit box of integer 0; use nullptr or explicit cast
4971 = Argument order: <target object>, <target function> for delegate constructor is deprecated, use <target function>, <target object>
4972 = Directly modifying or treating the result of an unbox operation as an lvalue is unverifiable
4973 = '%$S': marked as deprecated
4974 = '%$S': marked as deprecated
4981 = Warbird: function '%$pD' marked as __forceinline not inlined because it contains exception semantics
4983 = '/analyze:sarif:hashname' ignored because the argument to '/analyze:log' is a single file rather than a directory
4984 = 'if constexpr' is a C++17 language extension
4985 = '%$pS': attributes not present on previous declaration.
4986 = '%$pS': exception specification does not match previous declaration
4987 = nonstandard extension used: 'throw (...)'
4988 = '%$S': variable declared outside class/function scope
4989 = '%s': type has conflicting definitions.
4990 = Warbird: %s
4991 = Warbird: function '%$pD' marked as __forceinline not inlined because protection level of inlinee is greater than the parent
4992 = Warbird: function '%$pD' marked as __forceinline not inlined because it contains inline assembly which cannot be protected
4995 = '%$I': name was marked as #pragma deprecated
4996 = '%$S': %$*
4997 = '%$S': coclass does not implement a COM interface or pseudo-interface
4998 = EXPECTATION FAILED: %s(%d)
4999 = UNKNOWN WARNING %$N Please choose the Technical Support command on the Visual C++ %$N Help menu, or open the Technical Support help file for more information
5024 = '%$pS': move constructor was implicitly defined as deleted
5025 = '%$pS': move assignment operator was implicitly defined as deleted
5026 = '%$S': move constructor was implicitly defined as deleted
5027 = '%$S': move assignment operator was implicitly defined as deleted
5028 = '%$I': Alignment specified in prior declaration (%d) not specified in definition
5029 = nonstandard extension used: alignment attributes in C++ apply to variables, data members and tag types only
5030 = attribute '%s' is not recognized
5031 = #pragma warning(pop): likely mismatch, popping warning state pushed in different file
5032 = detected #pragma warning(push) with no corresponding #pragma warning(pop)
5033 = '%$L' is no longer a supported storage class
5034 = use of intrinsic '%$S' causes function %$S to be compiled as guest code
5035 = use of feature '%s' causes function %$S to be compiled as guest code
5036 = varargs function pointer conversion when compiling with /hybrid:x86arm64 from type '%$T' to type '%$T'
5037 = '%$S': an out-of-line definition of a member of a class template cannot have default arguments
5038 = %$M '%$S' will be initialized after %$M '%$S'
5039 = '%1$S': pointer or reference to potentially throwing function passed to 'extern "C"' function under -EHc. Undefined behavior may occur if this function throws an exception.
5040 = dynamic exception specifications are valid only in C++14 and earlier; treating as noexcept(false)
5041 = '%$D': out-of-line definition for constexpr static data member is not needed and is deprecated in C++17
5042 = '%$D': function declarations at block scope cannot be specified 'inline' in standard C++; remove 'inline' specifier
5043 = '%$pS': exception specification does not match previous declaration
5045 = Compiler will insert Spectre mitigation for memory load if /Qspectre switch specified%s%s%s
5046 = '%$S': Symbol involving type with internal linkage not defined
5047 = use of nonstandard '%1$L' with modules is not supported
5048 = Use of macro '%1$I' may result in non-deterministic output
5049 = '%1$F': Embedding a full path may result in machine-dependent output
5050 = Possible incompatible environment while importing module '%s': %s
5051 = attribute '%1$s' requires at least '%2$M'; ignored
5052 = Keyword '%1$I' was introduced in C++%2d and requires use of the '%3$M' command-line option
5053 = support for 'explicit(<expr>)' in C++17 and earlier is a vendor extension
5054 = operator '%$L': deprecated between enumerations of different types
5055 = operator '%$L': deprecated between enumerations and floating-point types
5056 = operator '%$L': deprecated for array types
5057 = header unit reference to '%s' already exists.  Ignoring header unit '%s'
5058 = file system error: cannot find header file '%s' for header unit '%s'
5060 = /Qpar and address sanitizer not currently supported - disabling auto-parallelization
5061 = the use of a comma operator as a subscript expression has been deprecated
5062 = enum direct list initialization between '%1$T' and '%2$T' is no longer supported
5063 = 'std::is_constant_evaluated' always evaluates to true in manifestly constant-evaluated expressions
5064 = CastGuard has been disabled because the binary is too big for fast type system analysis and compiler throughput will be degraded. To override this behavior and force enable the type system so CastGuard can be used, specify the flag /d2:-CastGuardOption:force_type_system to the linker.
5065 = The CastGuard subsystem could not be enabled.
5066 = d2CastGuardOption:force_type_system should not be passed to the compiler, it should only be passed to the linker via /d2:-CastGuardOption:force_type_system. Passing this flag to the compiler directly will force the type system for all binaries this ltcg module is linked in to.
5067 = CastGuard is not compatible with d2notypeopt
5068 = CastGuard is not compatible with incremental linking
5069 = CastGuard cannot initialize the type system. An object is being used that was built with a compiler that did not include the necessary vftable type information (I_VFTABLETIS) which prevents the type system from loading. Object: %s
5070 = CastGuard cannot initialize the type system. An object is being used that was built with a compiler that did not include the necessary type information (I_TIS) which prevents the type system from loading. Object: %s
5071 = CastGuard cannot initialize the type system. An error occurred while trying to read the type information from the debug il. Object: %s
5072 = ASAN enabled without debug information emission. Enable debug info for better ASAN error reporting
5073 = '%s': AddressSanitizer requires the EBX register to be used as a frame pointer. You can avoid this warning by using a different register, or by disabling AddressSanitizer for this function with __declspec(no_sanitize_address).
5074 = read from FPSR
5075 = write to FPSR
5076 = read from FPCR
5077 = write to FPCR
5078 = read from NZCV
5079 = write to NZCV
5080 = accessing forbidden register '%s'
5081 = Secure hotpatch is not supported with /GENPROFILE, /FASTGENPROFILE or /LTCG:PGI, disabling secure hotpatch.
5082 = second argument to 'va_start' is not the last named parameter
5083 = Loads and stores exceeded AsanInstrumentationPerFunctionThreshold with %d checks, Address Sanitizer checks disabled for this function
5100 = __VA_ARGS__ is reserved for use in variadic macros
5101 = use of preprocessor directive in function-like macro argument list is undefined behavior
5102 = ignoring invalid command-line macro definition '%s'
5103 = pasting '%s' and '%s' does not result in a valid preprocessing token
5104 = found '%$I#%$I' in macro replacement list, did you mean '%$I""#%$I'?
5105 = macro expansion producing 'defined' has undefined behavior
5106 = macro redefined with different parameter names
5107 = missing terminating '%c' character
5108 = __VA_OPT__ is reserved for use in variadic macros
5200 = %1$M '%2$M' requires compiler flag '%3$M'
5201 = a module declaration can appear only at the start of a translation unit unless a global module fragment is used
5202 = a global module fragment can only contain preprocessor directives
5203 = a parenthesized declarator name after 'explicit' will be considered an explicit-specifier in C++20
5204 = '%$S': class has virtual functions, but its trivial destructor is not virtual; instances of objects derived from this class may not be destructed correctly
5205 = delete of an abstract class '%1$pC' that has a non-virtual destructor results in undefined behavior
5206 = deduced return types for coroutines is a non-standard extension
5207 = the simple requirement asserts the validity of expression 'e->id'. Did you mean '{ e } -> id'? You can suppress the warning using '{ e->id }'
5208 = unnamed class used in typedef name cannot declare members other than non-static data members, member enumerations, or member classes
5209 = the C++20 syntax for an init-capture has changed to '& ...opt identifier initializer'
5210 = '%s' is not a valid header unit reference; ignoring
5212 = '%s' is not a valid named reference; treating as reference to file
5213 = '%1s' named reference is treated as a named partition but the %2$M name is not specified; treating as reference to file
5214 = applying '%1$L' to an operand with a volatile qualified type is deprecated in C++20
5215 = '%1$*' a function parameter with a volatile qualified type is deprecated in C++20
5216 = '%1$T' a volatile qualified return type is deprecated in C++20
5217 = a structured binding declaration that includes volatile is deprecated in C++20
5218 = destroying delete may not behave as intended when non-conforming switches '/Zc:sizedDealloc-' or '/Zc:alignedNew-' are used
5219 = implicit conversion from '%$T' to '%$T', possible loss of data
5220 = '%1$pS': a non-static data member with a volatile qualified type no longer implies%$N that compiler generated copy/move constructors and copy/move assignment operators are not trivial
5221 = xfg::rename is deprecated.
5222 = '%1s': all unscoped attribute names are reserved for future standardization
5223 = all attribute names in the attribute namespace 'msvc' are reserved for the implementation
5224 = all attribute names in the attribute namespace '%1$I' are reserved for future standardization
5225 = '%$S': exported inline function defined in a private module fragment is a non-standard extension
5226 = '%$S': exported template defined in private module fragment has no reachable instantiation
5227 = nonstandard extension, resolved '%1$S' to '%2$pD' which is not visible with /permissive- on.
5228 = nonstandard extension, '%1$I' resolved to a member of a dependent base. This lookup is not allowed under /permissive-.
5229 = nonstandard extension, the hidden friend function '%1$I' was found by name lookup which isn't allowed under /permissive-.
5230 = nonstandard extension, '%1$I' was resolved to '%2$S' under /permissive. Under /permissive- it would resolve to '%3$S'.
5231 = the expression 'co_await promise.final_suspend()' must be non-throwing
5232 = in C++20 this comparison calls '%1$D' recursively
5233 = explicit lambda capture '%$I' is not used
5234 = file system error: '%s' is not a valid header-name; ignoring
5235 = JSON parse error: %1s; ignoring '%2$F'
5236 = JSON ill-formed: %1s; ignoring '%2$F'
5237 = cannot resolve header unit entry '%1s' to a header file in '%2$F'; ignoring entry
5238 = file system error: cannot open '%1$F' for reading; ignoring
5239 = '%$S': potentially-throwing function called from a function declared __declspec(nothrow). Undefined behavior may occur if an exception is thrown.
5240 = '%1s': attribute is ignored in this syntactic position
5241 = '/exportHeader' usage to lookup header-name is deprecated; prefer '/headerName:%1s %2s=%3$F'
5242 = syntax error in pragma '%$I'
5243 = '%1$T': using incomplete class '%2$pS' can cause potential one definition rule violation due to ABI limitation
5244 = '#include <%1s>' in the purview of module '%2s' appears erroneous.  Consider moving that directive before the module declaration, or replace the textual inclusion with 'import <%3s>;'.
5245 = '%1$S': unreferenced function with internal linkage has been removed
5246 = '%1$I': the initialization of a subobject should be wrapped in braces
5247 = section '%1$s' is reserved for C++ dynamic initialization. Manually creating the section will interfere with C++ dynamic initialization and may lead to undefined behavior
5248 = section '%1$s' is reserved for C++ dynamic initialization. Variables manually put into the section may be optimized out and their order relative to compiler generated dynamic initializers is unspecified
5249 = '%1$S' of type '%2$T' has named enumerators with values that cannot be represented in the given bit field width of '%3D'.
5250 = '%1$S': intrinsic function not declared
5251 = %1$I changed after including header
5252 = Multiple different types resulted in the same XFG type-hash %lx; the PDB will only record information for one of them
5253 = a non-local lambda cannot have a capture default
5254 = language feature 'terse static assert' requires compiler flag '%1$M'
5255 = unterminated bidirectional character encountered: 'U+%1x'
5256 = '%1$S': a non-defining declaration of an enumeration with a fixed underlying type is only permitted as a standalone declaration
5257 = '%1$S': enumeration was previously declared without a fixed underlying type
5258 = explicit capture of '%1$I' is not required for this use
5259 = '%1$S': explicit specialization requires 'template <>'
5260 = the constant variable '%1$S' has internal linkage in an included header file context, but external linkage in imported header unit context; consider declaring it 'inline' as well if it will be shared across translation units, or 'static' to express intent to use it local to this translation unit
5261 = no integer type can represent all enumerator values in enumeration '%1$S'
5262 = implicit fall-through occurs here; are you missing a break statement? Use [[fallthrough]] when a break statement is intentionally omitted between cases
5263 = calling 'std::move' on a temporary object prevents copy elision
5264 = '%1$S': 'const' variable is not used
5265 = cannot open search path '%1$F'
5266 = '%1$L' qualifier on return type has no effect
5300 = '#pragma omp atomic%1s': expression mismatch for lvalue being updated
5301 = '#pragma omp for': '%1$S' increases while loop condition uses '%2$L'; non-terminating loop?
5302 = '#pragma omp for': '%1$S' decreases while loop condition uses '%2$L'; non-terminating loop?
6001 = Conversion to void requires explicit cast (static_cast or C-style cast)
6002 = Expressions of type void cannot be converted to other types
6003 = Conversion is a valid standard conversion, which can be performed implicitly or by use of static_cast, C-style cast or function-style cast
6004 = Context does not allow for disambiguation of overloaded function
6005 = There are no conversions to function types, although there are conversions to references or pointers to functions
6006 = There are no conversions to array types, although there are conversions to references or pointers to arrays
6007 = There is no context in which this conversion is possible
6008 = This conversion requires an explicit cast (static_cast, C-style cast or parenthesized function-style cast)
6009 = Conversion to enumeration type requires an explicit cast (static_cast, C-style cast or parenthesized function-style cast)
6010 = The constant 0 can be converted to a null pointer constant by a standard conversion, static_cast, reinterpret_cast, C-style cast or function-style cast
6011 = Conversion from integral type to pointer type requires reinterpret_cast, C-style cast or parenthesized function-style cast
6012 = The constant 0 can be converted to a null pointer-to-member constant by a standard conversion, static_cast, reinterpret_cast, C-style cast or function-style cast
6013 = There are no conversions from integral values to pointer-to-member values
6014 = Conversions between enumeration and floating point values are no longer allowed
6015 = Conversion loses qualifiers
6016 = Types pointed to are unrelated; conversion requires reinterpret_cast, C-style cast or parenthesized function-style cast
6017 = Conversion from 'void*' to pointer to non-'void' requires an explicit cast
6018 = Conversion from pointer to base class to pointer to derived class requires an explicit cast (other than const_cast)
6019 = Conversion from non-__based pointer type to __based pointer type requires an explicit cast (other than const_cast)
6020 = The types differ in ways other than the qualifiers; const_cast cannot be used alone
6021 = Reason: cannot convert from '%$T' to '%$T'
6022 = The target is not large enough
6023 = This conversion requires a reinterpret_cast, a C-style cast or parenthesized function-style cast
6024 = Conversion from pointer-to-member of derived class to pointer-to-member of base class requires an explicit cast (other than const_cast)
6025 = Pointers to members have different representations; cannot cast between them
6026 = The expression being converted is not valid
6027 = Invalid aggregate initialization
6028 = None of the functions with this name in scope match the target type
6029 = Address of a function yields __clrcall calling convention in /clr:pure and /clr:safe; consider using __clrcall in target type
6030 = list-initialization requires a narrowing conversion from '%$T' to '%$T'
6031 = Integral expression required
6032 = Floating-point expression required
6033 = Expression of arithmetic or enumeration type required
6034 = Expression of pointer type required
6035 = static_cast and safe_cast to reference can only be used for valid initializations or for lvalue casts between related classes
6036 = A non-const reference may only be bound to an lvalue
6037 = The target type has no constructors
6038 = Conversion requires a constructor or user-defined-conversion operator, which can't be used by const_cast or reinterpret_cast
6039 = No constructor could take the source type, or constructor overload resolution was ambiguous
6040 = Conversion requires a second user-defined-conversion operator or constructor
6041 = No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called
6042 = Ambiguous user-defined-conversion
6043 = Reference cannot be directly bound to this type
6044 = use of undefined type '%$S'
6045 = a type representing an address in the gc heap can only be converted to integral type via pinning
6046 = Cannot cast an integral type to a pointer to a %$&[MANAGED WINRT] type
6047 = Constructor for %$B '%$C' is declared 'explicit'
6048 = Conversion from integral type to enum type is not strictly allowed
6049 = Cast from base to derived requires safe_cast or static_cast
6050 = Cannot convert a %$&[MANAGED WINRT] type to a native type
6051 = Cannot convert a native type to a %$&[MANAGED WINRT] type
6052 = sorry: 'inline' function definition for '%1$D' could not be written to module due to unrecognized expression or statement at '%2$P'.
	If possible please provide a repro here: https://developercommunity.visualstudio.com
6053 = Cast from base to derived requires dynamic_cast or static_cast
6054 = The value type must be boxed before this conversion is attempted
6055 = Cannot implicitly unbox, apply '&*' to the rvalue
6056 = Cannot convert between %$&[MANAGED WINRT] arrays of different ranks
6057 = A bound pointer-to-member must be a function call (missing argument list?)
6058 = User-defined conversion requires explicit cast
6060 = The initializer contains too many elements
6061 = '%$C': a %$^[GC_CLASS_OR_INTERFACE REF_CLASS_OR_INTERFACE] is not an aggregate
6062 = '%$C': Value types with constructors or private members are not aggregate
6063 = '%$C': Types with virtual member functions or virtual bases are not aggregate
6064 = '%$C': Types with user defined constructors are not aggregate
6065 = '%$C': Types with a base are not aggregate
6066 = '%$C': Types with private or protected data members are not aggregate
6067 = Conversion to generic type not allowed
6068 = Conversion from generic type not allowed
6069 = '%$T' is not an array or class: Types which are not array or class types are not aggregate
6070 = Compiler limit for line number is %d
6071 = Cannot copy construct %$B '%$C' due to ambiguous copy constructors or no available copy constructor
6072 = %$B '%$C' and %$B '%$C' are unrelated; conversion requires reinterpret_cast
6073 = because of the presence of %$M '%$pS' on %$B '%$pS'
6074 = A non-const reference may only be bound to an lvalue; copy constructor takes a reference to non-const
6075 = A non-const reference may only be bound to an lvalue; assignment operator takes a reference to non-const
6076 = Conversion between a %$^[WHOLE_OBJECT_PTR HANDLE_TYPE] and '%$T' requires reinterpret_cast
6077 = An array of unknown size cannot be initialized with an empty initializer list
6078 = Conversion from a built-in type or a value type to %$^[WHOLE_OBJECT_PTR HANDLE_TYPE] requires boxing
6079 = '%$C': Types that have non-fixed size arrays whose array elements have destructors are not aggregate
6080 = Conversion to a function with more restrictive exception specification requires reinterpret_cast
6081 = Objects of %$^[GC_CLASS REF_CLASS] type cannot be created on the stack
6082 = nullptr can only be converted to pointer or handle types
6083 = No standard conversion exists from the boxed form of the arithmetic type to the target type
6084 = Boxing of native enum types is not supported
6085 = a tracking reference can only be allocated on the stack
6086 = an interior %s can never be allocated on the gc heap
6087 = Standard conversion from pointer-to-derived to pointer-to-base is not applied for template arguments
6088 = Standard conversion from pointer-to-member of base to pointer-to-member of derived is not applied for template arguments
6089 = No user-defined-conversion operator available, or
6090 = '%$T' may be a value type at runtime: consider using '%$T()' instead
6093 = You should invoke the %$[FINALIZER DTOR], '%$[EXCLAIM TILDE]%$I' instead
6096 = It may be that you need to use delete instead of calling the Dispose() method directly
6097 = Conversion from delegate type to function pointer type is not allowed
6098 = Source expression must be a function symbol
6099 = Conversion from string literal loses const qualifier (see /Zc:strictStrings)
6100 = Exactly the same type
6101 = Integral promotion
6102 = Floating-point promotion
6103 = Integral standard conversion
6104 = Floating-point standard conversion
6105 = Standard conversion between integral and floating-point
6107 = Match to ellipsis performed integral promotion
6108 = Match to ellipsis required no conversion
6109 = Match to ellipsis performed floating-point promotion
6110 = Standard conversion from the constant 0 to a null pointer value constant
6111 = Standard conversion from the constant 0 to a null pointer-to-member value constant
6112 = Qualification conversion
6113 = Standard conversion of pointer type to 'void*'
6114 = Standard conversion of pointer to derived to pointer to base
6115 = Lvalue to rvalue conversion: array to pointer conversion
6116 = Lvalue to rvalue conversion: function to pointer-to-function conversion
6117 = Standard conversion of pointer-to-member of base to pointer-to-member of derived
6118 = '%$S': overloaded function was resolved to '%$pD'
6119 = Binding to reference
6120 = Binding to reference with added qualification
6121 = Call to constructor '%$pD'
6122 = Call to user-defined-conversion '%$pD'
6123 = Standard conversion to bool
6124 = conversion of pointer to %$&[MANAGED WINRT] type to pointer to %$&[MANAGED WINRT] type
6125 = Implicit conversion from wide character string to String *
6126 = Conversion allowed for error recovery
6127 = Conversion between %$^[COMARRAY MANAGED_ARRAY] and %$T
6128 = Conversion between %$^[COMARRAY MANAGED_ARRAY] and %$T
6129 = Conversion between %$^[COMARRAY MANAGED_ARRAY] and %$^[COMARRAY MANAGED_ARRAY]
6130 = Conversion from pointer to boxed type T to interior pointer to T
6131 = An object from the gc heap (%s) cannot be converted to a native reference
6132 = This member will be ignored by a defaulted constructor or copy/move assignment operator
6133 = Only standard conversions are allowed before or after a user-defined conversion (UDC)
6134 = while calling the constructor '%$p*'
6135 = Encountered while processing '%s(%$S)'
6136 = Conversion from string literal to %$&[SYSTEM PLATFORM]String^
6137 = Encountered while rewriting '%1$L' using '%2$D'
6138 = Conversion from %$&[MANAGED WINRT] enum to %$&[SYSTEM PLATFORM]Object^
6139 = Boxing conversion of built-in arithmetic type
6141 = operand can only be a reference type, value type, an unmanaged pointer to value type or a boxed value type
6142 = use 'dynamic_cast' to convert a %$^[WHOLE_OBJECT_PTR HANDLE_TYPE] to an interior pointer
6143 = must dereference pointer to value type before it can be boxed
6144 = use __box() intrinsic to box a value type
6145 = boxing is a standard conversion
6146 = cannot convert handle type to an interior pointer
6147 = Encountered while attempting operator synthesis for '%$L'
6148 = Unboxing of handle to built-in type or enum
6149 = An array of boxed value types is not covariant
6150 = because the base method is %$*
6151 = because the base method is explicitly overridden by '%$S'
6152 = A ref class or value class method is never implicitly 'virtual' (even if it matches a virtual method from a base)
6153 = 'new' or 'override' are only allowed when a matching base method from a ref class exists
6154 = Matching base method '%$S' is from an interface class (not a ref class)
6155 = Specify 'virtual' and 'override' to override the ref class virtual method
6156 = Specify 'virtual' and 'new' to hide the ref class virtual method with a new virtual method
6157 = Specify 'new' (and not 'virtual') to hide the ref class virtual method with a non-virtual method
6158 = Position for 'new' and 'override' keywords is after method parameter list
6159 = Specify 'override' (and 'virtual') to override the ref class virtual method
6160 = Specify 'new' (and 'virtual') to hide the ref class virtual method with a new virtual method
6161 = Position for '%$L' keyword is after method parameter list
6162 = You cannot bind an lvalue to an rvalue reference
6163 = A native nullptr can only be converted to bool or, using reinterpret_cast, to an integral type
6164 = Standard conversion of a null pointer constant to nullptr_t
6165 = only a null pointer constant can be converted to nullptr_t
6167 = 'override' is only allowed when a matching base method from a ref class exists
6168 = Consider using 'Platform::Agile<%$S>' instead
6169 = Consider making '%$S' public instead
6170 = Compile with /vd2 or define '%$S' with #pragma vtordisp(2) in effect
6171 = Element '%d': no conversion from '%$T' to '%$T'
6172 = Concatenating suffix '%s' with suffix '%s'
6173 = Literal operator must have a parameter list of the form '%$M' or 'const char *'
6174 = Literal operator must have a parameter list of the form '%$T'
6175 = Literal operator must have a parameter list of the form '%$M, std::size_t'
6176 = Did you forget a space between the string literal and the prefix of the following string literal?
6177 = Too many braces around initializer for '%$T'
6178 = An array can only be initialized with a brace-enclosed initializer list
6179 = An array of unknown size cannot be value-initialized
6180 = A reference type cannot be value-initialized
6181 = Array type '%$T' cannot be value-initialized
6182 = Non-class type '%$T' cannot be initialized with a parenthesized initializer list
6183 = Initialization of a %$&[MANAGED WINRT] array with an initializer list is not supported in this context; consider %$&[GCNEW REFNEW] %$S {...}
6184 = A const static data member of a %$&[MANAGED WINRT] type must be initialized at the point of declaration
6185 = The type of the string literal is not compatible with the type of the array
6186 = The string literal is too long
6187 = '%$T': cannot use this type here without a top-level '%$L'
6188 = copy-list-initialization of '%$T' cannot use an explicit constructor
6189 = the constructor and destructor will not be called; a bitwise copy of the class will be passed as the argument
6190 = '%$S' is non-trivial
6191 = Function pointer conversion
6192 = overloaded function used in a context where the intended overload cannot be determined
6193 = consider removing the parentheses or using 'explicit (true)' before the name
6194 = a conversion from '%1$T' to '%2$T' is not allowed in this context
6195 = '%1$I' is not a public base class
6196 = '%1$I' is not a public, non-mutable, non-static data member
6197 = '%1$I' is not a literal class type
6198 = '%1$T' type is not a scalar type, an lvalue reference type, or a literal class type
6199 = this conversion requires that '%1$S' is a complete class type
6200 = followed by
6202 = while checking that elided copy-constructor '%$pD' is callable
6203 = when converting from '%$T' to '%$T'
6206 = use 'enum class'
6208 = the %$^[GC_CLASS REF_CLASS] '%$S' is a base class of '%$S'
6209 = '%$S': assembly accessibility overridden as 'private' by enclosing type '%$pS'
6210 = use '[attribute]' to specify an attribute class
6211 = must have %$&[SYSTEM PLATFORMMETADATA]Attribute as a base class
6212 = '%$I' must be a data member which is not static, const or literal%$Nor a property which is read-write and not static
6216 = argument expression must be a constant-expression, an array-literal or a string-literal
6217 = missing ';' after attribute block?
6218 = missing delimiter in attribute
6219 = direct-list-initialization of an enumeration requires an enumeration with a fixed underlying type
6220 = add a /headerUnit:quote mapping or build the header unit with a header-name that is a partial path; quoted header-names can be ambiguous if the original header-name was not at least a partial path, i.e. prefer 'a/b/m.h' to 'm.h'
6250 = The function is extern "C" and /EHc was specified
6252 = __declspec(nothrow), throw(), noexcept(true), or noexcept was specified on the function
6253 = destructor or deallocator has a (possibly implicit) non-throwing exception specification
6275 = this line contains a '{' which has not yet been matched
6276 = consider using inheritance keywords on the forward declaration of the class to avoid the issue: '%s'
6300 = could be '%$D'
6301 = or       '%$D'
6302 = could be '%$T'
6303 = or       '%$T'
6304 = could be '%s'
6305 = or       '%s'
6306 = could be 'built-in C++ operator%1$*(%2$T, %3$T)'
6307 = could be 'built-in C++ operator%1$*(%2$T)'
6308 = or       'built-in C++ operator%1$*(%2$T, %3$T)'
6309 = or       'built-in C++ operator%1$*(%2$T)'
6310 = see declaration of '%$S'
6311 = see previous definition of '%$I'
6312 = '%$I' previously declared on the command line
6313 = could be '%$C'
6314 = or       '%$C'
6315 = could be '%$D'
6316 = or       '%$D'
6317 = '%$pD': is abstract
6318 = due to following members:
6319 = while trying to match the argument list '%$*'
6320 = see reference to %1$[CLASS ALIAS] %2$[TEMPLATE GENERIC] instantiation '%3$C' being compiled
6321 = see reference to function %1$[TEMPLATE GENERIC] instantiation '%2$D' being compiled
6322 = while compiling %1$[CLASS ALIAS] %2$[TEMPLATE GENERIC] member function '%3$D'
6323 = while compiling %1$[CLASS ALIAS] %2$[TEMPLATE GENERIC] static data member '%3$D'
6324 = while compiling helper functions for class '%$pC'
6325 = could be '%$C'
6326 = or       '%$C'
6327 = could be '%$D'
6328 = or       '%$D'
6329 = start of raw string literal
6330 = see previous in-class initialization of '%$S'
6331 = Assembly '%$I' already imported from the command line (/FU): as_friend ignored
6332 = could be '%$S'
6333 = or       '%$S'
6334 = could be '%$D' [found using argument-dependent lookup]
6335 = or       '%$D' [found using argument-dependent lookup]
6336 = compiler has generated '%$S' here
6337 = could be the friend function '%$I'  [may be found via argument-dependent lookup]
6338 = or the friend function       '%$I'  [may be found via argument-dependent lookup]
6339 = The following methods must be defined:
6340 = definition
6341 = existing declarations
6342 = '%$D'
6343 = This diagnostic occurred while importing type '%1$T' from assembly '%2$I'.
6345 = definition of '%$S' ignored
6346 = definition of '%$S' used
6347 = This diagnostic occurred while importing type '%s.%s' from assembly '%$I'.
6348 = This diagnostic occurred while importing token '%x' from assembly '%$I'.
6349 = note: qualification adjustment (const/volatile) may be causing the ambiguity
6350 = note: '%$pD': to compile this varargs function as managed code, use /clr:pure
6351 = _exception_code() outside an exception filter or __except block
6352 = _exception_info() outside an exception filter
6353 = _abnormal_termination() outside a %$^[__FINALLY FINALLY] block
6354 = using vararg in a global initialization code
6355 = try using the unquoted form of the argument
6356 = see previous usage of custom attribute
6357 = Add macro to precompiled header instead of defining here
6358 = use of precompiled header
6360 = type is '%$T'
6361 = did you intend to use '%$L' instead?
6362 = could be the '%1$I' in base '%2s'
6363 = or could be the '%1$I' in base '%2s'
6364 = could be the '%1$I' in '%2s'
6365 = or could be the '%1$I' in '%2s'
6366 = Please reference assembly '%s' before assembly '%s'
6367 = 'static const' cannot be represented in metadata
6368 = ref class has attribute value '%$S::%$*'
6369 = base class '%$S' has attribute value '%$S::%$*'
6370 = may not declare a global or static variable, or a member of a native type that refers to objects in the gc heap
6371 = the value type may not contain members of %$&[MANAGED WINRT] types
6372 = did you intend to define a destructor?
6373 = only simple value types are allowed
6374 = cannot use nested %$&[MANAGED WINRT] types in native types
6375 = virtual base classes are only initialized by the most-derived type
6376 = see reference to variable template '%$D' being compiled
6377 = '%1$S' is a %2s base class of '%3$S'
6378 = see instantiation of default argument expression required for '%1$D'
6379 = '%$I': function declaration must be available as none of the arguments depend on a template parameter
6380 = '%$I': function was not declared in the template definition context and can be found only via argument-dependent lookup in the instantiation context
6381 = '%$S': ambiguous base is not covariant
6382 = '%$S': base class is not accessible
6383 = could be '%1$D', which inherits '%2$D' via base class '%3$S'
6384 = or       '%1$D', which inherits '%2$D' via base class '%3$S'
6385 = could be header-name '%s' for header unit '%s'
6386 = or       header-name '%s' for header unit '%s'
6387 = see reference to function '%$D'
6388 = see module '%s' declaration
6389 = see enumerator '%1$S' with value '%2D'
6390 = see the lvalue expression here
6391 = see the first reference to '%1$S' in '%2$S'
6392 = see the first reference to '%1$S'
6395 = see data-sharing attributes for '#pragma omp %1s' here
6400 = override specifier 'new' is not supported
6401 = could be '%$U'
6402 = or       '%$U'
6403 = enters 'if constexpr' here
6410 = With the following template arguments:
6412 = '%s'
6413 = Did you intend 'typename... %$I'?
6420 = '%$S' is deleted
6421 = '%$S' is not deleted
6422 = could be '%$D' [rewritten expression '0 %$L (x <=> y)']
6423 = or '%$D' [rewritten expression '0 %$L (x <=> y)']
6424 = could be '%$D' [synthesized expression '(y <=> x) %$L 0']
6425 = or '%$D' [synthesized expression '(y <=> x) %$L 0']
6426 = could be '%$D' [synthesized expression 'y == x']
6427 = or '%$D' [synthesized expression 'y == x']
6428 = could be '%$D' [rewritten expression '!(x == y)']
6429 = or '%$D' [rewritten expression '!(x == y)']
6430 = An explicit override can only be used for a method that was first introduced in an interface and whose override qualifier is an interface 
6431 = could be '%$D' [synthesized expression '!(y == x)']
6432 = or '%$D' [synthesized expression '!(y == x)']
6433 = explicit instantiation has type '%$T'
6434 = primary template is '%$D'
6435 = '%1$D': function was implicitly deleted because '%2$C' is a union-like class
6436 = '%1$D': function was implicitly deleted because '%2$C' data member '%3$pS' of type '%4$T' has no valid 'operator<=>'
6437 = '%1$D': function was implicitly deleted because '%2$C' data member '%3$pS' of type '%4$T' is not contextually convertible to 'bool'
6438 = '%1$D': function was implicitly deleted because '%2$C' data member '%3$pS' of type '%4$T' is a reference type
6439 = '%1$D': function was implicitly deleted because overload resolution could not find a usable function for 'operator%2$L' which accepts '%3$C'
6440 = placeholders and their parameters expect %d variadic arguments, but %d were provided
6441 = this argument is used by a conversion specifier
6442 = this argument is used as a field width
6443 = this argument is used as a precision
6444 = this argument is used as a buffer size
6445 = the sizes of types '%$T' and '%$T' might differ on other platforms
6446 = e.g. instead of printf(name); use printf("%%s", name); because format specifiers in 'name' may pose a security issue
6447 = the missing variadic argument %d is required by format string '%s'
6448 = consider using '%%%s%s' in the format string
6449 = this warning is based on non-standard semantics used by Visual C++
6450 = the combination of length modifier '%s' with type field character '%c' is non standard
6451 = positional arguments are non standard
6452 = consider using constexpr specifier for named string literals
6453 = _Generic default previously specified here
6454 = _Generic compatible type previously '%$T' specified here
6455 = Immediate virtual functions are disabled by default, but can be enabled by specifying either /experimental:constevalVfuncVtable or /experimental:constevalVfuncNoVtable
6456 = These options have ABI impact and affect whether immediate virtual functions are stored in the virtual table or not
6457 = '%1$D': function was implicitly deleted because '%2$C' data member '%3$pS' is a promoted member of an anonymous union
6507 = This error occurred in injected text:%$N%s
6508 = This warning occurred in injected text:%$N%s
6509 = This diagnostic occurred in the compiler generated function '%$D'
6510 = Did you mean '%$&[CLI_ARRAY WINRT_ARRAY]<%$T>'?
6514 = see source of the previous compiler diagnostic
6515 = see specialization requested here
6548 = cannot allocate an interior pointer on the native heap
6549 = did you mean '%$T' (without the top-level '%$L')?
6550 = compiler replacing '%$t' with '%$t' to continue parsing
6551 = compiler injecting '%$t' to continue parsing
6552 = compiler using '%$T' to continue parsing
6560 = Cannot declare %$I to a handle type. Consider declaring %$I to one of the members of '%$S'
6600 = The event handler is one of:
6601 = The event source is one of:
6602 = There are no events:
6603 =     '%$D': is not an event
6604 = The event type of '%$S' is '%s'.
6607 = There are no acceptable handlers.
6610 = '%$S': class must be defined before using in a %$L
6611 = target type must be a pointer or reference to a defined class
6614 = first seen type is used; re-order imported assemblies to use the current type
6617 = The add_-method is '%$pD'
6618 = The remove_-method is '%$pD'
6620 = class does not define an 'operator()' or a user defined conversion operator to a pointer-to-function or reference-to-function that takes appropriate number of arguments
6621 = reference members cannot be default initialized
6622 = const members cannot be default initialized unless their type has a user defined default constructor
6623 = prefix with 'typename' to indicate a type
6624 = #pragma unmanaged is in effect
6625 = The function uses inline assembler or an unsupported intrinsic function
6627 = The function is marked as 'naked'
6628 = '%$pS': already explicitly overrides that method
6629 = Message: '%s'
6630 = Aligned data types not supported in managed code
6631 = Functions with direct calls to naked functions not supported in managed code
6633 = Functions containing references to '__ImageBase' not supported in managed code
6634 = varargs not supported under /clr
6635 = __ptr32 is not supported on 64-bit CLR
6637 = Found an intrinsic not supported in managed code
6638 = Inline native assembly not supported in managed code
6639 = non-clrcall vcall thunks must be compiled as native
6640 = Presence of '_setjmp' makes a function unmanaged
6641 = coroutines not supported in managed code
6642 = '%1$S': this coroutine must be a native function but it contains managed constructs
6650 = Only non-template functions named 'get' or 'set', or access specifiers, are allowed
6651 = Leading parameters must correspond to property dimensions
6652 = The last parameter's type must match the property type
6653 = Only non-template functions named 'add', 'remove', or 'raise', or access specifiers, are allowed
6670 = attribute can only be applied to: %s
6671 = missing quotes ("") around '%$I'?
6672 = pointer to member function expected
6673 = a non-virtual destructor must have 'protected private' or 'private' accessibility
6674 = a virtual destructor must have 'public' accessibility
6675 = define a destructor instead
6676 = Use /pathmap to map the path prefix to a fixed value to ensure the full path can be reconstructed at link time
6677 = error recovery skipped: '%s'
6678 = parsing resumes here
6679 = missing one of: %s ?
6699 = conversion to a function with less restrictive specifiers
6700 = conversion to a function with incompatible restriction specifiers
6701 = ellipsis ... is not supported
6702 = '%$T' is not a supported integral type
6703 = bool is not allowed as data member type or element type of array
6704 = '%$T' has virtual base class which is not supported
6705 = bit field is not supported
6706 = '%$T' function pointer, function reference, or pointer to member function is not supported
6707 = exception specification is not supported
6708 = virtual member function is not supported
6709 = volatile is not supported
6710 = long double is not supported
6711 = pointer or reference is not allowed as pointed to type, array element type or data member type (except reference to concurrency::array/texture)
6712 = concurrency::array and concurrency::graphics::texture cannot be used by value
6713 = a data member's offset must be a multiple of its natural alignment
6714 = base class, data member or array element must be at least 4 byte aligned
6715 = resolution error follows
6722 = tile_static can only be applied to a variable declaration
6723 = tile_static variables cannot have an initializer
6724 = tile_static variables cannot contain pointer or reference type
6725 = tile_static cannot be used in a non-amp restricted scope
6726 = default arguments or varargs are not allowed
6728 = the argument must be a non-volatile reference
6729 = the return type does not match the expected signature
6730 = unexpected CV-qualifier
6731 = the argument must be a non-const rvalue reference
6732 = offsetof has a builtin meaning; use /Zc:offsetof- to revert to old, non-conforming definition
6733 = failure was caused by evaluating a reinterpret_cast
6734 = failure was caused by a conversion from void* to a pointer-to-object type
6735 = failure was caused by dereferencing a null pointer-to-member
6736 = failure was caused by attempting to call a null pointer-to-function
6737 = failure was caused by attempting to access a member on an object of dynamic type '%$T' in which the member is not defined
6738 = failure was caused by an assignment that changes the active member of a union
6739 = failure was caused by evaluation exceeding call depth limit of %u (/constexpr:depth<NUMBER>)
6740 = while evaluating %2$[CONSTEXPR CONSTEVAL] function '%1$S'
6742 = failure was caused by non-constant arguments or reference to a non-constant symbol
6743 = failure was caused by call of undefined function or one not declared 'constexpr'
6744 = failure was caused by unevaluable pointer value
6745 = failure was caused by returning the address of or a reference to a temporary
6746 = failure was caused by taking the address of an immediate function
6747 = failure was caused by evaluation exceeding step limit of %u (/constexpr:steps<NUMBER>)
6748 = failure was caused by accessing a non-active member of a union
6749 = function violates 'constexpr' rules or has errors
6750 = see usage of '%$*'
6752 = failure was caused by cast of object of dynamic type '%$T' to type '%$T'
6753 = failure was caused by out of range index %D; allowed range is 0 <= index < %U
6754 = a non-constant (sub-)expression was encountered
6755 = failure was caused by evaluating a throw sub-expression
6756 = failure was caused by an undefined arithmetic operation
6757 = failure was caused by evaluating a lambda expression
6758 = failure was because type '%$T' is not a literal type
6759 = failure was caused by control reaching the end of a %$[CONSTEXPR CONSTEVAL] function
6760 = failure was caused by comparing pointers to different objects
6761 = failure was caused by an uninitialized variable declaration
6762 = failure was caused by '%2$[CONSTEXPR CONSTEVAL]' constructor not initializing member '%1$S'
6763 = failure was caused by '%2$[CONSTEXPR CONSTEVAL]' constructor not initializing any members in union '%1$T'
6764 = failure was caused by a statement or an expression that is not valid in a constexpr context
6765 = failure was caused by subtracting pointers to elements of different arrays
6766 = failure was caused by a read of an uninitialized symbol
6767 = failure was caused by a read of an expired temporary
6768 = failure was caused by a dynamic_cast expression
6769 = failure was caused by a read of a variable outside its lifetime
6770 = failure was caused by a pseudo-destructor call
6771 = type '%$S' is not a literal type because it has a user-defined destructor
6773 = type '%$S' is not a literal type because its direct base class '%$S' is not a literal type
6774 = type '%1$S' is not a literal type because its data member '%2$I' is of non-literal type '%3$T'
6775 = '%1$D': function was implicitly deleted because '%2$C' has a variant data member '%3$pS' with a non-trivial %4$M
6776 = '%1$D': function was implicitly deleted because '%2$C' has a user-defined %3$M
6777 = '%1$D': function was implicitly deleted because '%2$C' has an uninitialized data member '%3$pS' of reference type
6778 = '%1$D': function was implicitly deleted because '%2$C' has a const-qualified data member '%3$pS' with no user-provided default constructor
6779 = '%1$D': function was implicitly deleted because '%2$C' has a data member '%3$pS' of const-qualified non-class type
6780 = '%1$D': function was implicitly deleted because '%2$C' has a data member '%3$pS' with a deleted or inaccessible destructor
6781 = '%1$D': function was implicitly deleted because a %2$[DATA_MEMBER BASECLASS] '%3$pS' has either no appropriate %4$M or overload resolution was ambiguous
6782 = '%1$D': function was implicitly deleted because a %2$[DATA_MEMBER BASECLASS] invokes a deleted or inaccessible function '%3$D'
6783 = '%1$D': function was explicitly deleted
6784 = '%1$D': function was implicitly deleted because '%2$C' has a data member '%3$pS' of rvalue reference type
6785 = '%1$D': function was implicitly deleted because '%2$C' has a data member '%3$pS' of reference type
6786 = '%1$D': function was implicitly deleted because '%2$C' has an uninitialized const-qualified data member '%3$pS'
6787 = '%1$D': function was implicitly deleted because the %2$M of indirect virtual base class '%3$C' is inaccessible
6789 = binary boolean expression evaluated to false with values
		 left: %d
		 right: %d
6790 = to simplify migration, consider the temporary use of /Wv:18 flag with the version of the compiler with which you used to build without warnings
6791 = type '%$S' is not a literal type because it is not an aggregate type, a closure type, or does not have a constexpr constructor that is not a copy or move constructor
6792 = consider using 'if constexpr' statement instead
6793 = the system returned code %d: %$E
6794 = please visit https://aka.ms/pch-help for more details
6795 = '%1$T' in non-type template parameters requires at least '%2$M'
6796 = consider using explicit cast or comparison to %s to avoid this warning
6797 = type '%1$S' is not a literal type because it is incomplete
6798 = failure was caused by variable declaration with non-automatic storage
6799 = failure was caused by dereferencing a null pointer to array
6800 = #pragma warning(push)
6801 = try-catch blocks in constexpr functions requires at least '%1$M'
6802 = failure was caused by the an evaluation of an ill-formed bit_cast
6803 = 'bit_cast' cannot be applied to an object (or subobject) of type '%1$T'
6804 = conversion from 'nullptr_t' to 'bool' requires direct-initialization
6805 = failure was caused by object (or subobject) failing requirements of constant destruction
6806 = failure was caused by inline assembler
6807 = failure was caused by allocated storage not being deallocated
6808 = failure was caused by deallocation of already deallocated storage
6809 = failure was caused by read of deallocated object
6810 = PCH: Address is not a multiple of the system's allocation granularity
6811 = PCH: The chunk has not been previously reserved
6812 = PCH: Commit size too large
6813 = PCH: Unable to commit memory across file map
6814 = PCH: Exhausted chunk list before committing all bytes
6815 = PCH: Unexpected end of chunk list while trying to free 
6816 = PCH: Shouldn't be hitting a file map in the decommit case
6817 = PCH: Invalid chunk
6818 = PCH: Map size too large
6819 = PCH: Unable to map file: memory already committed
6820 = PCH: File map already in place
6821 = PCH: Unable to get the requested block of memory
6850 = in expansion of macro '%$I'
6851 = Please use '%s' command-line option to enable relevant extensions
6852 = Flowing off the end of a coroutine results in undefined behavior when promise type '%$T' does not declare 'return_void'
6853 = static virtual methods of interfaces are not supported and will be unavailable
6854 = this event or property has no associated methods that could be imported
6855 = statement that may fall through is here
6860 = the expression refers to the loop iteration variable '%$S'
6861 = a simple loop variable was expected on the left hand of '%$L'
6862 = the loop termination test expression must be a conditional expression with one of '<', '<=', '!=', '>=', '>'
6863 = the captured lvalue must be the one updated by this expression
6864 = the right hand side of the assignment must be a binary expression
6900 = the '%$S' constraint was not satisfied
6901 = note: index '%s' range checked by comparison on this line
6902 = note: feeds memory load on this line
6903 = note: feeds conditional branch on this line
6904 = note: feeds call on this line
6905 = note: in function '%s'
6907 = failure was caused by call to array delete with pointer to non-array object
6908 = failure was caused by call to non-array delete with pointer to array object
6909 = failure was caused by unexpected deallocation count; attempt to deallocate %z object(s) when %z object(s) are allocated at this address
6910 = failure was caused by call to non-replaceable allocation function
6911 = failure was caused by deallocation of pointer not allocated on the heap
6912 = failure was caused by deallocation of sub-object in contiguous heap allocated storage
6913 = polymorphic constexpr typeid() requires C++20 or later
6914 = (sub-)object points to memory which was deallocated during constant evaluation
6915 = failure was caused by the right operand of '%$L' being negative (undefined behavior)
6916 = failure was caused by the right operand of '%$L' being too large (undefined behavior)
6917 = (sub-)object points to memory which was heap allocated during constant evaluation
6918 = failure was caused by the '%$L' operation causing signed overflow during constant evaluation
6919 = failure was caused by the '%$L' operation dividing by zero
6920 = failure was caused by evaluating typeid on a polymorphic null pointer
6921 = failure was caused by control flowing through a definition of a variable of non-automatic storage duration
6922 = the call stack of the evaluation (the oldest call first) is
6923 = while evaluating function '%$D'
6924 = failure was caused by calling a member function using a null this pointer
6950 = the substitution failed
6951 = the constraint was not satisfied
6952 = the expression is potentially-throwing
6953 = the concept '%$S' evaluated to false
6954 = the expression is invalid
6955 = the type is invalid
6956 = '%$T' and '%$T' are different types
6957 = the parameter list is invalid
6999 = UNKNOWN MESSAGE %$N Please choose the Technical Support command on the Visual C++ %$N Help menu, or open the Technical Support help file for more information
7001 = Invalid register.           
7002 = Invalid branch offset.      
7003 = Invalid branch offset greater than 4094 or less than -4096
7004 = Invalid branch offset outside of __asm statement
7005 = Wrong number of arguments (missing comma?)  
7006 = BRA to register is illegal.  Using BRAF
7007 = Invalid double register.    
7008 = Invalid float register.     
7009 = Invalid argument            
7010 = Register not valid as arg   
7011 = Argument types not valid for opcode
7012 = label redefined
7013 = label was undefined
7014 = Variable not valid with opcode  
7015 = Inline Asm block too large.  Please use blocks of 3000 lines or less.   
7016 = Load / Store operation not valid in context
7017 = Invalid register(r0) in LOAD/STORE operation    
7018 = Could not find valid register  
7019 = Could not find valid register for argument 1  
7020 = Could not find valid register for argument 2  
7021 = Could not find valid register for argument 3  
7022 = Instruction invalid without /QSsh4   
7023 = Instruction invalid without /QSshx   
7024 = Instruction invalid without /QSdsp   
7025 = Branch into delay slot is illegal  
7026 = Final instruction has an empty delay slot 
7027 = Given instruction is invalid in a delay slot
7028 = Unrecognized opcode.  Treating unknown text as a label 
7029 = Final argument of PADD/PSUB can only be X0/Y0/A0/A1 
7030 = First argument of PMUL can only be X0/X1/Y0/A1 
7031 = Second argument of PMUL can only be Y0/Y1/X0/A1 
7032 = Final argument of PMUL can only be M0/M1/A0/A1 
7033 = Valid arguments are X0/X1/A0/A1/Y0/Y1/M0/M1 
7034 = Misaligned displacement value 
7050 = symbol already defined
7051 = the symbol wasn't found in local table
7052 = missing definition for label
7053 = floating point Opcode used without -QMFPE-
7054 = invalid floating point number
7055 = coprocessor3 is undefined for the architecture given
7056 = FPU uses the computation opcode space for coprocessor3 for MIPSIV
7057 = PC register not allowed here
7058 = SP register not allowed here
7059 = RA register not allowed here
7060 = Not allowed to use AT without .set noat
7061 = Int register not allowed here
7062 = Int32 register not allowed here
7063 = FP register not allowed here
7064 = condition code register not allowed here
7065 = particular condition code register given not valid
7066 = unrecognized register
7067 = integer or floating point constants are not allowed here
7068 = indirection not allowed here
7069 = expected SP register
7070 = expected PC register
7071 = expected Mips 16 register
7072 = expected character: ')'
7073 = memory references are not allowed here
7074 = expected index register, not integer offset
7075 = this is not a valid register number
7076 = index indirections not allowed here
7077 = expected register
7078 = this type of register is not allowed here
7079 = '$' is not followed by a valid register identifier
7080 = expected register - macro, not literal
7081 = this is not a valid argument register number
7082 = '%' is not followed by a valid register identifier
7083 = expected string constant
7084 = expected character: '
7085 = undefined symbol in expression
7086 = function literal used with call optimization
7087 = entering label into table failed
7088 = expected function, found label
7089 = expected label, found function
7090 = label not valid here
7091 = expected label name
7092 = unrecognized operand
7093 = unidentified .set directive
7094 = macro requires .set noreorder
7095 = macro instruction used
7096 = labels not allowed in repeat block
7097 = .endr without matching .repeat found
7098 = Immediate size is too large.  Using LI.
7099 = expected character: ','
7100 = expected character: ':'
7101 = expected character: %C
7102 = expected another operand
7103 = unidentified operand
7104 = expected a positive integer constant
7105 = expected character: ',' or ':'
7106 = Symbol is not a label. Can't branch to this location.
7107 = label or symbol redefinition
7108 = unidentified instruction
7109 = unsupported instruction
7110 = is not a global function
7111 = must use RA
7112 = nop must be inside .set noreorder section
7113 = did not find information on branch instruction
7114 = expected immediate
7115 = immediate too large
7116 = opcode used without -QMn32
7117 = must use label immediate in order to use PC offset
7118 = one of the registers must be a MIPS16 register
7119 = extra source text found beyond the end of instruction
7120 = opcode used without -QMFPE-
7121 = Invalid instruction for switches given.  Check instruction set against switches given.
7122 = unimplemented directive
7123 = symbol is not a label
7124 = LAU not supported in inline assembly
7125 = instruction has unhandled dope for form given
7126 = unable to branch to location given
7127 = valid function not given
7128 = invalid operand type
7129 = instruction is not supported for inline assembly
7130 = JALR should not use $31 alone or any register twice
7131 = shift amount not in the range [0, 63]
7132 = shift amount not in the range [0, 31]
7133 = immediate value not in the range [0, 31]
7134 = offset of the source operand not in the range [0, 7]
7135 = offset of the second source operand not in the range [0, 7]
7136 = vector-vector operation is not applicable for this instruction
7137 = shift amount not in the range [0, 7]
7138 = expected FP Control Register - 0 or 31
7139 = invalid hint
7140 = must use even register (64 bit register)
7141 = must use vector (64 bit floating point register)
7142 = invalid InlnExpression
7143 = '/': division by zero
7144 = '%': modulo by zero
7145 = bitwise operations are not applicable on a float constant
7146 = expected an operand
7147 = unable to evaluate indirection
7148 = undefined function
7149 = label or symbol redefinition
7150 = branch target is invalid
7151 = branch and link instructions not supported in inline assembly
7152 = BC1ANY2x can use only $fcc{0,2,4,6}
7153 = BC1ANY4x can use only $fcc{0,4}
7200 = '%s:' can only generate hybrid pop thunk for symbols with C linkage
7201 = can only generate hybrid thunks for non-static functions
7202 = '%s:' hybrid unsupported feature '%s.'
7203 = '%1$S': '__declspec(hybrid_patchable)' can only be applied to class declarations or definitions, or non-static functions
7204 = '%s': guest reference call signature does not match ('%s' != '%s')
7300 = only a call to '%s' is allowed in this function
7301 = __vectorcall calling convention is not currently supported
7302 = AVX types (__m256) are not currently supported in ARM64EC code
7303 = AVX512 types (__m512) are not currently supported in ARM64EC code
7500 = '%$I': no function satisfied its constraints
7507 = '%$S': the declared type of a variable concept shall be 'bool'
7508 = unrecognized partition name '%s' in metadata for module '%s'
7509 = '%s': malformed module metadata.
7510 = '%$I': use of dependent %$[TEMPLATE L_TYPE_decl] name must be prefixed with '%$[TEMPLATE TYPENAME]'
7511 = '%$I': 'typename' keyword must be followed by a qualified name
7512 = '%$L': is not a valid operator for a fold-expression
7513 = '%$I': cannot deduce the type of the placeholder
7514 = a binary fold expression cannot have an unexpanded parameter pack in both expressions
7515 = a fold expression must contain an unexpanded parameter pack
7516 = a unary fold expression over '%$L' must have a non-empty expansion
7517 = '%$L' in a binary fold expression both operators must be the same
7518 = fold expressions require at least '%1$M'
7519 = file system error: cannot open '%s' because there are too many open files
7520 = file system error: cannot open '%s' because it is inaccessible
7521 = file system error: cannot read the content of file '%s'
7522 = file system error: cannot determine the content size of file '%s'
7523 = file system error: cannot read all the content of file '%s'
7524 = 'inline' specifier cannot appear on a block-scope declaration or non-static data member
7525 = inline variables require at least '%1$M'
7526 = '%$I': inline variable is undefined
7527 = '%1$I': a template parameter name cannot be reused within its scope
7528 = '%1$S': A default constructor or its exception specification cannot be used within a data member initializer of the same class
7529 = multiple using-declarators require at least '%1$M'
7530 = applying a pack-expansion to a using-declaration requires at least '%1$M'
7531 = main function cannot be declared as '%$[CONSTEXPR CONSTEVAL]'
7532 = '%$I': a specialization of variable template cannot have type '%$T'
7533 = '%$S': template arguments not allowed in this context
7534 = syntax error: '%$L': expected class definition to end with '}'
7535 = '%$S': delegating constructor calls itself
7536 = ifc failed integrity checks.  Expected SHA2: '%s'
7537 = failed to properly compute SHA2 hash: '%s'
7538 = '%$I' is not a variable template
7539 = '%1$I': a class with user-declared constructors cannot have a member with the same name as the class
7540 = '%1$I': member cannot have the same name as the enclosing class
7541 = '%1$I': C++17 inline static data members are not compatible with managed types
7542 = '%1$S': expected a type
7543 = likelihood attributes can only be applied to statements and labels
7544 = standard attributes '%1$s' and '%2$s' are mutually exclusive
7545 = attribute '%sno_unique_address' can only be applied to a non-static data member that is not a bitfield
7546 = binary operator '<=>': unsupported operand types '%$T' and '%$T'
7547 = standard type '%$S' ill-formed: member '%$I' was not found
7549 = '%$S': defaulted comparison function cannot be declared to return a comparison category stronger than the common category among bases and members which was deduced to be '%$T'
7550 = '%1$S': the qualified name in this context names a constructor, not a type
7551 = '%1$qS': template parameter '%2$S': '%3$pS': purely intrinsic functions have no address for use as a non-type template argument
7552 = '%1$S': purely intrinsic functions have no address
7553 = inline assembler is not supported in a lambda
7554 = %1$pS is not an integral constant expression
7555 = use of designated initializers requires at least '%1$M'
7556 = cannot mix designated-initializers with non-designated-initializers
7557 = designated-initializers can only be used in brace-enclosed initializer lists
7558 = nested member access is not allowed in standard C++ designated initializers; use a nested initializer list
7559 = '%1$I': designator does not name a direct non-static data member of type '%2$T'
7560 = '%1$I': designators must appear in member declaration order of class '%2$S'
7561 = '%1$I': member designator appears multiple times
7562 = '%1$T': designated initialization can only be used to initialize aggregate class types
7563 = creating a lambda with a template parameter list requires at least '%1$M'
7564 = '%$pS': no non-explicit function available
7565 = the template parameter list associated with a lambda cannot be empty
7566 = applying a pack-expansion to an init-capture requires at least '%1$M'
7567 = '%1$L' is not supported with '/permissive-'
7568 = argument list missing after assumed function template '%1$I'
7569 = initializer list for union cannot have more than one element
7570 = '%1$pS': variable template has already been defined
7571 = '%1$pS': variable template has already been initialized
7572 = 'using enum %1$S;' requires at least '%2$M'
7574 = enumeration '%1$pS' is not defined
7575 = '%1$S': using enum declaration names a dependent type
7576 = declaration of '%1$I' shadows a template parameter
7577 = a global module fragment can only appear at the start of a translation unit
7578 = unexpected end of file in a global module fragment; expected a module-declaration
7579 = the module declaration following a global module fragment cannot be produced by macro expansion or header inclusion
7580 = member '%1$pS' for declspec(xfg_reuse_typehash) must be declared with declspec(xfg_virtual)
7581 = '%1$S': XFG declspecs can only be applied to global functions, or to data members of pointer-to-function type, with a this-pointer parameter
7582 = '%1$I': default member initializers for bit-fields requires at least '%2$M'
7583 = an unnamed bit-field cannot have a default member initializer
7584 = a for-range-declaration cannot define a class or an enumeration
7585 = a range-based for statement with an initializer requires at least '%1$M'
7586 = a '%$s' directive must end with a ';' on the same line
7587 = '%1$L' cannot appear in an unevaluated context
7588 = A definition of a class template %s must be provided for the return type of this coroutine to be deduced
7589 = defaulting comparison operators requires at least '%1$M'
7590 = a requirement body must contain at least one requirement
7591 = bit_cast requires that '%1$T' and '%2$T' have the same size
7592 = a non-type template-parameter of type '%1$T' requires at least '%2$M'
7593 = a return type requirement shall not be a trailing return type '-> T'. Consider using '-> std::convertible_to<T>' instead
7594 = invalid UTF-16 surrogate '0x%x'
7595 = '%1$S': call to immediate function is not a constant expression
7596 = '%1$S': cannot take address of immediate function outside of an immediate invocation
7597 = '%1$D': 'consteval': overriding function must match overridden function
7598 = the constraint expression cannot use the concept name '%1$I'
7599 = '%1$S': a trailing requires clause is only allowed on a templated function
7600 = '%1$S': the concept designated by a type constraint shall be a type concept
7601 = the associated constraints are not satisfied
7602 = '%1$pS': the associated constraints are not satisfied
7603 = '%1$S': concept definition doesn't have constraint expression
7604 = '%1$S': 'concept' can only be applied to concept definition at namespace scope
7605 = '%1$S': concept shall not have associated constraints
7606 = '%1$S': concept cannot be explicitly instantiated, explicitly specialized or partially specialized
7607 = atomic constraint should be a constant expression of type 'bool', not '%1$T'
7608 = atomic constraint should be a constant expression
7609 = '%1$S': type constraint expects a concept name
7610 = operator '%$L': not allowed between enumeration types and floating-point types
7611 = operator '%$L': not allowed for array types
7612 = could not find header unit for '%s'
7613 = input '%s' did not evaluate to a header unit
7614 = __VA_OPT__ must be followed by a '('
7615 = __VA_OPT__ must be terminated by a ')'
7616 = __VA_OPT__ cannot be nested within another __VA_OPT__
7617 = '%$S': A coroutine cannot have a return type containing 'auto'
7618 = module partition '%s' cannot be imported prior to declaring the primary module unit or interface
7619 = cannot export '%1$S' as module partition '%2s' does not contribute to the exported interface of module unit '%3s'
7620 = cannot export module partition '%1s' it is not an interface unit
7621 = module partition '%s' for module unit '%s' was not found
7622 = module interface file extension is incompatible with '/module:internalPartition' as the partition is not an interface
7623 = '%$pS': redefinition; different XFG declspecs
7624 = Type name '%1$pS' cannot appear on the right side of a class member access expression
7625 = The type of a coroutine promise return_value or return_void expression must be void
7626 = unnamed class used in typedef name cannot declare members other than non-static data members, member enumerations, or member classes
7627 = '%1$T': is not a valid template argument for '%2$qS'
7628 = '%1$D': cannot be defaulted because it is not declared as a friend of '%2$S'
7629 = '%1$D': cannot be defaulted; comparison function was defined as deleted
7630 = 'c%s': unsupported C version; using default
7631 = '%1$S': variable with internal linkage declared but not defined
7632 = '%1$S': a trailing requires clause is not allowed on a virtual function
7633 = a parameter in requirement parameter list shall not have a default argument
7634 = '%1$T': is not a valid comparison type; consider using '%2$T' instead
7635 = a module import declaration cannot appear %$M
7636 = '%1$T': invalid expression type for '%2$I'; must be pointer-to-data
7637 = %1$T: you cannot implicitly instantiate a class template while it is being defined
7638 = /newAlignment argument must be a power of two
7639 = /newAlignment requires at least /std:c++17
7640 = unrecognized attribute argument for '%1$s'
7641 = missing attribute argument for '%1$s'
7642 = unsupported IFC format version %d.%d
7643 = '%1$S': '%2$L' specifier cannot appear on a function parameter
7644 = destroying operator delete functions must be member functions
7645 = first formal parameter of destroying operator delete must be a pointer to the enclosing class type, but was '%$T'
7646 = destroying operator delete functions cannot be array delete operators 'operator delete[]'
7647 = destroying operator delete functions must be usual deallocation functions
7648 = a conversion function cannot have a trailing return type
7649 = attribute 'xfg::rename' may only be applied to structs, classes and virtual methods
7650 = attribute 'xfg::rename' must be passed a string argument
7651 = %1$I cannot be used with /await. Use '%2$M' or later for standard coroutine support
7652 = if a member function has a trailing requires clause then another member function with the same signature, ignoring any trailing requires clause, cannot be virtual
7653 = '%1$S': failed to select a destructor for the class
7654 = a private module fragment can only appear in a primary module interface
7655 = a declaration cannot be exported in the purview of a private module fragment
7656 = private module fragment cannot be redeclared
7657 = private module fragment cannot be declared before a module declaration
7658 = '%1$S': the initializer must be the address of a variable
7659 = attribute 'xfg::rename' may not be applied to nested class hierarchies
7660 = '%s': requires '%s' command line option(s)
7661 = header-name '%s' has an ambiguous resolution to header '%s'
7662 = '%$S': a coroutine cannot be constexpr or consteval
7663 = '%s': unsupported ABI version; using default
7664 = '%1$L': ordered comparison of pointer and integer zero ('%2$T' and '%3$T')
7665 = '%1$L': you cannot assign to 'this' as it is not an lvalue
7666 = you cannot apply '%1$L' to 'this' as it is not an lvalue
7667 = no global operator delete function found
7668 = a function with an explicit object parameter must be a member function
7669 = a function with an explicit object parameter cannot be declared 'static'
7670 = only the first parameter may be an explicit object parameter
7671 = a member function with an explicit object parameter may only have one such parameter
7672 = a member function with an explicit object parameter may not have trailing implicit object parameter specifiers
7673 = explicit object member functions requires at least '%1$M'
7674 = member function '%1$D' with explicit object parameter of type '%2$T' cannot overload member function '%3$D' with implicit object parameter of type '%4$T'
7675 = cannot overload static member function with member function declaring the same non-object parameter types
7676 = member functions with an explicit object parameter cannot be defaulted
7677 = constructors cannot contain an explicit object parameter
7678 = member functions with an explicit object parameter cannot be virtual
7679 = an explicit object parameter cannot be a parameter pack
7680 = only function parameters may be explicit object parameters
7681 = %1s
7682 = '%1$S': a non-defining declaration of an enumeration with a fixed underlying type is only permitted as a standalone declaration
7683 = you cannot create a reference to 'void'
7684 = module name '%s' has an ambiguous resolution to IFC
7685 = there is no type named '%1$I' in '%2$pS'
7686 = [[msvc::constexpr]] cannot be applied to a 'constexpr' or 'consteval' function
7687 = [[msvc::constexpr]] may only be applied to statements and functions
7688 = '#pragma omp atomic': expected an expression of scalar type
7689 = [[msvc::intrinsic]] cannot be applied to explicit specializations
7690 = [[msvc::intrinsic]] cannot be applied to a recursive function
7691 = '__super' is not supported as '/allowSuper-' was specified
7692 = '%$*': rewritten candidate function was excluded from overload resolution because a corresponding operator!= declared in the same scope
7693 = constraints are not supported for managed types and constructs
7694 = managed type '%$T' used in a constraint definition or evaluation or in an entity that uses constraints
7700 = type '%$T' in _Generic association compatible with previous association type '%$T'
7701 = default _Generic association previously specified
7702 = no compatible type for '%$T' in _Generic association list
7703 = inline nested namespaces requires at least '%1$M'
7704 = '_Alignas' specifier can be used on variables and structure fields only
7705 = '_Atomic' type '%1$T' cannot be an array or function
7706 = '_Atomic' type '%1$T' cannot be atomic or CVR qualiifed
7707 = call to '%1$L': argument type '%2$T' must be a pointer to an atomic type
7720 = bound for nested loop to be collapsed does not conform to the OpenMP specification
7721 = OPENMP RESERVED
7722 = OPENMP RESERVED
7723 = OPENMP RESERVED
7724 = OPENMP RESERVED
7725 = OPENMP RESERVED
7726 = OPENMP RESERVED
7727 = OPENMP RESERVED
8000 = UNKNOWN COMMAND-LINE ERROR
	    Please choose the Technical Support command on the Visual C++
	    Help menu, or open the Technical Support help file for more information
8003 = missing source filename
8004 = '/%s' requires an argument
8016 = '/%s%s' and '/%s%s' command-line options are incompatible
8018 = cannot create linker response file
8021 = invalid numeric argument '/%s%s'
8022 = cannot open '%s'
8027 = cannot execute '%s'
8029 = cannot execute '%s' out of environment memory
8030 = INTERNAL COMPILER ERROR in '%s'
	    Please choose the Technical Support command on the Visual C++
	    Help menu, or open the Technical Support help file for more information
8034 = error reading '%s'
8035 = response files nested too deeply
8036 = '/%s%s' not allowed with multiple source files
8037 = cannot create temporary il file; clean temp directory of old il files
8038 = invalid argument '%s'
8039 = cannot find entry point '%s' in file '%s', make sure the correct version of the compiler is used
8040 = error creating or communicating with child process
8041 = '%s': link-time code generation pdb must be differ from /Fd option
8042 = out of memory
8043 = unknown option '%s'
8045 = cannot compile C file '%s' with the /clr option
8047 = INTERNAL COMPILER ERROR (file %s, line %d)
	    Please choose the Technical Support command on the Visual C++
	    Help menu, or open the Technical Support help file for more information
8048 = cannot compile C file '%s' with the /ZW option
8049 = cannot execute '%s': command line is too long to fit in debug record
8050 = cannot execute '%s': failed to get command line into debug records
8051 = argument of '/%s' must be of the following form: %s
8052 = Coroutines are not supported on this target.
8053 = argument to /pathmap must be of the form STR1=STR2 where STR1 is not empty
8054 = cannot open file '%s'
8055 = some IL files differ from their baseline, treating as a fatal error
8830 = INTERNAL ASSEMBLER ERROR in '%s'
	    Please choose the Technical Support command on the Visual C++
	    Help menu, or open the Technical Support help file for more information
8847 = INTERNAL ASSEMBLER ERROR (file %s, line %d)
	    Please choose the Technical Support command on the Visual C++
	    Help menu, or open the Technical Support help file for more information
9000 = UNKNOWN COMMAND-LINE WARNING
	    Please choose the Technical Support command on the Visual C++
	    Help menu, or open the Technical Support help file for more information
9002 = ignoring unknown option '%s'
9007 = '%s' requires '%s'; option ignored
9014 = invalid value '%d' for '/%s'; assuming '%d'
9015 = invalid assembly listing configuration '%s%s'
9021 = no action performed
9024 = unrecognized source file type '%s', object file assumed
9025 = overriding '/%s%s' with '/%s%s'
9026 = options apply to entire command line
9027 = source file '%s' ignored
9028 = minimal rebuild failure, reverting to normal build
9030 = '%s' is incompatible with multiprocessing; ignoring /MP switch
9031 = inefficiently creating temporary il file; clean temp directory of old il files
9032 = '-doc' : XML documentation comments are not supported by the C compiler
9035 = option '%s' has been deprecated and will be removed in a future release
9036 = use '%s' instead of '%s'
9038 = /ZI is not supported on this platform; enabling /Zi instead
9040 = ignoring option '/analyze'; Code Analysis warnings are not available in this edition of the compiler
9041 = invalid value '%d' for '/%s'; assuming '%d'; add '/analyze' to command-line options when specifying this warning
9042 = invalid value '%d' for '/%s'; assuming '%d'; Code Analysis warnings are not available in this edition of the compiler
9043 = invalid value '%d' for '/%s'; assuming '%d'; Code Analysis warnings are not associated with warning levels
9044 = Before using /errorReport:send, you must read and agree to the Data Collection Policy at %s.
9045 = ignoring option '/%s'; This option is not supported on this target.
9046 = '%s' for file '%s' differs from its reference IL but should be the same
11001 =                          C/C++ COMPILER OPTIONS
	
11051 =                               -OPTIMIZATION-
	
11053 = /O1 maximum optimizations (favor space)
11054 = /O2 maximum optimizations (favor speed)
11055 = /Ob<n> inline expansion (default n=0)
11056 = /Od disable optimizations (default)
11057 = /Og enable global optimization
11058 = /Oi[-] enable intrinsic functions
11059 = /Os favor code space
11060 = /Ot favor code speed
11061 = /Ox optimizations (favor speed)
11101 =                              -CODE GENERATION-
	
11102 = /Gu[-] ensure distinct functions have distinct addresses
11103 = /Gw[-] separate global variables for linker
11104 = /GF enable read-only string pooling
11105 = /Gm[-] enable minimal rebuild
11106 = /Gy[-] separate functions for linker
11107 = /GS[-] enable security checks
11108 = /GR[-] enable C++ RTTI
11109 = /GX[-] enable C++ EH (same as /EHsc)
11110 = /guard:cf[-] enable CFG (control flow guard)
11111 = /guard:ehcont[-] enable EH continuation metadata (CET)
11112 = /EHs enable C++ EH (no SEH exceptions)
11113 = /EHa enable C++ EH (w/ SEH exceptions)
11114 = /EHc extern "C" defaults to nothrow
11115 = /EHr always generate noexcept runtime termination checks
11116 = /fp:<contract|except[-]|fast|precise|strict> choose floating-point model:
11117 =     contract - consider floating-point contractions when generating code
11118 =     except[-] - consider floating-point exceptions when generating code
11119 =     fast - "fast" floating-point model; results are less predictable
11120 =     precise - "precise" floating-point model; results are predictable
11121 =     strict - "strict" floating-point model (implies /fp:except)
11122 = /Qfast_transcendentals generate inline FP intrinsics even with /fp:except
11123 = /Qspectre[-] enable mitigations for CVE 2017-5753
11124 = /Qpar[-] enable parallel code generation
11125 = /Qpar-report:1 auto-parallelizer diagnostic; indicate parallelized loops
11126 = /Qpar-report:2 auto-parallelizer diagnostic; indicate loops not parallelized
11127 = /Qvec-report:1 auto-vectorizer diagnostic; indicate vectorized loops
11128 = /Qvec-report:2 auto-vectorizer diagnostic; indicate loops not vectorized
11129 = /GL[-] enable link-time code generation
11130 = /volatile:<iso|ms> choose volatile model:
11131 =     iso - Acquire/release semantics not guaranteed on volatile accesses
11132 =     ms  - Acquire/release semantics guaranteed on volatile accesses
11151 =                               -OUTPUT FILES-
	
11153 = /Fa[file] name assembly listing file
11154 = /FA[scu] configure assembly listing
11155 = /Fd[file] name .PDB file
11156 = /Fe<file> name executable file
11157 = /Fm[file] name map file
11158 = /Fo<file> name object file
11159 = /Fp<file> name precompiled header file
11160 = /Fr[file] name source browser file
11161 = /FR[file] name extended .SBR file
11162 = /Fi[file] name preprocessed file
11163 = /Fd: <file> name .PDB file
11164 = /Fe: <file> name executable file
11165 = /Fm: <file> name map file
11166 = /Fo: <file> name object file
11167 = /Fp: <file> name .PCH file
11168 = /FR: <file> name extended .SBR file
11169 = /Fi: <file> name preprocessed file
11170 = /Ft<dir> location of the header files generated for #import
11201 =                               -PREPROCESSOR-
	
11203 = /AI<dir> add to assembly search path
11204 = /FU<file> forced using assembly/module 
11205 = /C don't strip comments
11206 = /D<name>{=|#}<text> define macro
11207 = /E preprocess to stdout
11208 = /EP preprocess to stdout, no #line
11209 = /P preprocess to file
11210 = /Fx merge injected code to file
11211 = /FI<file> name forced include file
11212 = /U<name> remove predefined macro
11213 = /u remove all predefined macros
11214 = /I<dir> add to include search path
11215 = /X ignore "standard places"
11216 = /PH generate #pragma file_hash when preprocessing
11217 = /PD print all macro definitions
11251 =                                 -LANGUAGE-
	
11252 = /std:<c++14|c++17|c++20|c++latest> C++ standard version
	    c++14 - ISO/IEC 14882:2014 (default)
	    c++17 - ISO/IEC 14882:2017
	    c++20 - ISO/IEC 14882:2020
	    c++latest - latest draft standard (feature set subject to change)
11253 = /permissive[-] enable some nonconforming code to compile (feature set subject to change) (on by default)
11254 = /Ze enable extensions (default)
11255 = /Za disable extensions
11256 = /ZW enable WinRT language extensions
11257 = /Zs syntax check only
11258 = /Zc:arg1[,arg2] C++ language conformance, where arguments can be:
11259 =   forScope[-]           enforce Standard C++ for scoping rules
11260 =   wchar_t[-]            wchar_t is the native type, not a typedef
11261 =   auto[-]               enforce the new Standard C++ meaning for auto
11262 =   trigraphs[-]          enable trigraphs (off by default)
11263 =   rvalueCast[-]         enforce Standard C++ explicit type conversion rules
11264 =   strictStrings[-]      disable string-literal to [char|wchar_t]*
	                        conversion (off by default)
11265 =   implicitNoexcept[-]   enable implicit noexcept on required functions
11266 =   threadSafeInit[-]     enable thread-safe local static initialization
11267 =   inline[-]             remove unreferenced function or data if it is
	                        COMDAT or has internal linkage only (off by default)
11268 =   sizedDealloc[-]       enable C++14 global sized deallocation
	                        functions (on by default)
11269 =   throwingNew[-]        assume operator new throws on failure (off by default)
11270 =   referenceBinding[-]   a temporary will not bind to an non-const
	                        lvalue reference (off by default)
11271 =   twoPhase-             disable two-phase name lookup
11272 =   ternary[-]            enforce C++11 rules for conditional operator (off by default)
11273 =   noexceptTypes[-]      enforce C++17 noexcept rules (on by default in C++17 or later)
11274 =   alignedNew[-]         enable C++17 alignment of dynamically allocated objects (on by default)
11275 =   hiddenFriend[-]       enforce Standard C++ hidden friend rules (implied by /permissive-)
11276 =   externC[-]            enforce Standard C++ rules for 'extern "C"' functions (implied by /permissive-)
11277 =   lambda[-]             better lambda support by using the newer lambda processor (off by default)
11278 =   tlsGuards[-]          generate runtime checks for TLS variable initialization (on by default)
11279 =   zeroSizeArrayNew[-]   call member new/delete for 0-size arrays of objects (on by default)
11280 =   static_assert[-]      strict handling of 'static_assert' (implied by /permissive-)
11281 =   gotoScope[-]          cannot jump past the initialization of a variable (implied by /permissive-)
11282 =   templateScope[-]      enforce Standard C++ template parameter shadowing rules
11283 =   enumTypes[-]          enable Standard C++ underlying enum types (off by default)
11284 =   checkGwOdr[-]         enforce Standard C++ one definition rule violations
	                        when /Gw has been enabled (off by default)
11285 =   __STDC__              define __STDC__ to 1 in C
11286 = /await enable resumable functions extension
	/await:strict enable standard C++20 coroutine support with earlier language versions
11287 = /constexpr:depth<N>     recursion depth limit for constexpr evaluation (default: 512)
11288 = /constexpr:backtrace<N> show N constexpr evaluations in diagnostics (default: 10)
11289 = /constexpr:steps<N>     terminate constexpr evaluation after N steps (default: 100000)
11290 = /Zi enable debugging information
11291 = /Z7 enable old-style debug info
11292 = /Zo[-] generate richer debugging information for optimized code (on by default)
11293 = /ZH:[MD5|SHA1|SHA_256] hash algorithm for calculation of file checksum in debug info (default: SHA_256)
11294 = /Zp[n] pack structs on n-byte boundary
11295 = /Zl omit default library name in .OBJ
11296 = /vd{0|1|2} disable/enable vtordisp
11297 = /vm<x> type of pointers to members
11298 = /std:<c11|c17> C standard version
	    c11 - ISO/IEC 9899:2011
	    c17 - ISO/IEC 9899:2018
11301 =                               -MISCELLANEOUS-
	
11302 = @<file> options response file
11303 = /?, /help print this help message
11304 = /bigobj generate extended object format
11305 = /c compile only, no link
11306 = /errorReport:option deprecated. Report internal compiler errors to Microsoft
11307 =     none - do not send report                
11308 =     prompt - prompt to immediately send report
11309 =     queue - at next admin logon, prompt to send report (default)
11310 =     send - send report automatically         
11311 = /FC use full pathnames in diagnostics
11312 = /H<num> max external name length
11313 = /J default char type is unsigned
11314 = /MP[n] use up to 'n' processes for compilation
11315 = /nologo suppress copyright message
11316 = /showIncludes show include file names
11317 = /Tc<source file> compile file as .c
11318 = /Tp<source file> compile file as .cpp
11319 = /TC compile all files as .c
11320 = /TP compile all files as .cpp
11321 = /V<string> set version string
11322 = /Yc[file] create .PCH file
11323 = /Yd put debug info in every .OBJ
11324 = /Yl[sym] inject .PCH ref for debug lib
11325 = /Yu[file] use .PCH file
11326 = /Y- disable all PCH options
11327 = /Zm<n> max memory alloc (% of default)
11328 = /FS force to use MSPDBSRV.EXE
11329 = /source-charset:<iana-name>|.nnnn set source character set
11330 = /execution-charset:<iana-name>|.nnnn set execution character set
11331 = /utf-8 set source and execution character set to UTF-8
11332 = /validate-charset[-] validate UTF-8 files for only legal characters
11333 = /fastfail[-] enable fast-fail mode
11334 = /JMC[-] enable native just my code
11335 = /presetPadding[-] zero initialize padding for stack based class types
11336 = /volatileMetadata[-] generate metadata on volatile memory accesses
11337 = /sourcelink [file] file containing source link information
11351 =                                 -LINKING-
	
11353 = /LD Create .DLL
11354 = /LDd Create .DLL debug library
11355 = /LN Create a .netmodule
11356 = /F<num> set stack size
11357 = /link [linker options and libraries]
11451 =                               -DIAGNOSTICS-
	
11452 = /diagnostics:<args,...> controls the format of diagnostic messages:
	             classic   - retains prior format
	             column[-] - prints column information
	             caret[-]  - prints column and the indicated line of source
11453 = /Wall enable all warnings
11454 = /w   disable all warnings
11455 = /W<n> set warning level (default n=1)
11456 = /Wv:xx[.yy[.zzzzz]] disable warnings introduced after version xx.yy.zzzzz
11457 = /WX treat warnings as errors
11458 = /WL enable one line diagnostics
11459 = /wd<n> disable warning n
11460 = /we<n> treat warning n as an error
11461 = /wo<n> issue warning n once
11462 = /w<l><n> set warning level 1-4 for n
11463 = /external:I <path>      - location of external headers
11464 = /external:env:<var>     - environment variable with locations of external headers
11465 = /external:anglebrackets - treat all headers included via <> as external
11466 = /external:W<n>          - warning level for external headers
11467 = /external:templates[-]  - evaluate warning level across template instantiation chain
11468 = /sdl enable additional security features and warnings
11469 = /options:strict unrecognized compiler options are an error
12101 = /GA optimize for Windows Application
12102 = /Ge force stack checking for all funcs
12103 = /Gs[num] control stack checking calls
12104 = /Gh enable _penter function call
12105 = /GH enable _pexit function call
12106 = /GT generate fiber-safe TLS accesses
12108 = /RTC1 Enable fast checks (/RTCsu)
12110 = /RTCc Convert to smaller type checks
12111 = /RTCs Stack Frame runtime checking
12112 = /RTCu Uninitialized local usage checks
12114 = /clr[:option] compile for common language runtime, where option is:
12115 =     pure : produce IL-only output file (no native executable code)
12116 =     safe : produce IL-only verifiable output file
12117 =     netcore : produce assemblies targeting .NET Core runtime
12118 =     noAssembly : do not produce an assembly
12119 =     nostdlib : ignore the system .NET framework directory when searching for assemblies
12120 =     nostdimport : do not import any required assemblies implicitly
12121 =     initialAppDomain : enable initial AppDomain behavior of Visual C++ 2002
12122 =     implicitKeepAlive- : turn off implicit emission of System::GC::KeepAlive(this)
12123 = /fsanitize=address Enable address sanitizer codegen
12151 = /doc[file] process XML documentation comments and optionally name the .xdc file
12251 = /ZI enable Edit and Continue debug info
12252 = /openmp enable OpenMP 2.0 language extensions
12253 = /openmp:experimental enable OpenMP 2.0 language extensions plus select OpenMP 3.0+ language extensions
12254 = /openmp:llvm OpenMP language extensions using LLVM runtime
12351 = /MD link with MSVCRT.LIB
12352 = /MT link with LIBCMT.LIB
12353 = /MDd link with MSVCRTD.LIB debug lib
12354 = /MTd link with LIBCMTD.LIB debug lib
13051 = /Oy[-] enable frame pointer omission 
13052 = /favor:<blend|ATOM> select processor to optimize for, one of:
13053 =     blend - a combination of optimizations for several different x86 processors
13054 =     ATOM - Intel(R) Atom(TM) processors
13101 = /Gd __cdecl calling convention 
13102 = /Gr __fastcall calling convention
13103 = /Gz __stdcall calling convention
13104 = /GZ Enable stack checks (/RTCs)
13105 = /Gv __vectorcall calling convention
13110 = /hotpatch ensure function padding for hotpatchable images
13111 = /arch:<IA32|SSE|SSE2|AVX|AVX2|AVX512> minimum CPU architecture requirements, one of:
13112 =    IA32 - use no enhanced instructions and use x87 for floating point
13113 =    SSE - enable use of instructions available with SSE-enabled CPUs
13114 =    SSE2 - (default) enable use of instructions available with SSE2-enabled CPUs
13115 =    AVX - enable use of instructions available with AVX-enabled CPUs
13116 =    AVX2 - enable use of instructions available with AVX2-enabled CPUs
13117 =    AVX512 - enable use of instructions available with AVX-512-enabled CPUs
13118 = /Qimprecise_fwaits generate FWAITs only on "try" boundaries, not inside "try"
13119 = /Qsafe_fp_loads generate safe FP loads
13120 = /QIntel-jcc-erratum enable mitigations for Intel JCC erratum
13121 = /Qspectre-load Enable spectre mitigations for all instructions which load memory
13122 = /Qspectre-load-cf Enable spectre mitigations for all control-flow instructions which load memory
13123 = /fpcvt:<IA|BC> FP to unsigned integer conversion compatibility
13124 =    IA - results compatible with VCVTTSD2USI instruction
13125 =    BC - results compatible with VS2017 and earlier compiler
13401 =                               -CODE ANALYSIS-
	
13402 = /analyze[-] Enable native analysis
13403 = /analyze:quiet[-] No warning to console
13404 = /analyze:log<name> Warnings to file
13405 = /analyze:autolog Log to *.pftlog
13406 = /analyze:autolog:ext<ext> Log to *.<ext>
13407 = /analyze:autolog- No log file
13408 = /analyze:WX- Warnings not fatal
13409 = /analyze:stacksize<num> Max stack frame
13410 = /analyze:max_paths<num> Max paths
13411 = /analyze:only Analyze, no code gen
14101 = /G1 optimize for Itanium processor
14102 = /G2 optimize for Itanium2 processor
14103 = /GZ Enable stack checks (/RTCs)
14104 = /QIPF_Cx[-] enable C-stepping errata workarounds
14105 = /QIPF_fr32 use fewer float registers to speed up context switches
14106 = /QIPF_restrict_plabels assume user doesn't create functions at runtime
14107 = /QIPF_noPIC allow generation of position-dependent code
14251 = /Zx debuggable optimizations
15051 = /favor:<blend|AMD64|INTEL64|ATOM> select processor to optimize for, one of:
15052 =     blend - a combination of optimizations for several different x64 processors
15053 =     AMD64 - 64-bit AMD processors                                 
15054 =     INTEL64 - Intel(R)64 architecture processors                  
15055 =     ATOM - Intel(R) Atom(TM) processors                           
15101 = /homeparams Force parameters passed in registers to be written to the stack
15102 = /GZ Enable stack checks (/RTCs)
15103 = /Gv __vectorcall calling convention
15104 = /arch:<AVX|AVX2|AVX512> minimum CPU architecture requirements, one of:
15105 =    AVX - enable use of instructions available with AVX-enabled CPUs
15106 =    AVX2 - enable use of instructions available with AVX2-enabled CPUs
15107 =    AVX512 - enable use of instructions available with AVX-512-enabled CPUs
15108 = /QIntel-jcc-erratum enable mitigations for Intel JCC erratum
15109 = /Qspectre-load Enable spectre mitigations for all instructions which load memory
15110 = /Qspectre-load-cf Enable spectre mitigations for all control-flow instructions which load memory
15111 = /Qspectre-jmp[-] Enable spectre mitigations for unconditional jump instructions
15112 = /fpcvt:<IA|BC> FP to unsigned integer conversion compatibility
15113 =    IA - results compatible with VCVTTSD2USI instruction
15114 =    BC - results compatible with VS2017 and earlier compiler
15401 =                               -CODE ANALYSIS-
	
15402 = /analyze[-] Enable native analysis
15403 = /analyze:quiet[-] No warning to console
15404 = /analyze:log<name> Warnings to file
15405 = /analyze:autolog Log to *.pftlog
15406 = /analyze:autolog:ext<ext> Log to *.<ext>
15407 = /analyze:autolog- No log file
15408 = /analyze:WX- Warnings not fatal
15409 = /analyze:stacksize<num> Max stack frame
15410 = /analyze:max_paths<num> Max paths
15411 = /analyze:only Analyze, no code gen
16051 = /Oy[-] enable frame pointer omission 
16101 = /GA optimize for Windows Application
16102 = /Gd __cdecl calling convention 
16103 = /arch:<target> minimum CPU architecture requirements
16104 =     ARMv7VE - enable use of ARMv7VE instructions
16105 =     VFPv4 - enable use of VFPv4 instructions
16106 = /QRunaligned[-] enable unaligned memory access
16107 = /Gs[num] control stack checking calls
16108 = /GT generate fiber-safe TLS accesses
16109 = /RTC1 Enable fast checks (/RTCsu)
16110 = /RTCc Convert to smaller type checks
16111 = /RTCs Stack Frame runtime checking
16112 = /RTCu Uninitialized local usage checks
16113 = /clr[:option] compile for common language runtime, where option is:
16114 =     pure - produce IL-only output file (no native executable code)
16115 =     safe - produce IL-only verifiable output file
16116 =     initialAppDomain - enable initial AppDomain behavior of Visual C++ 2002
16117 =     nostdlib - ignore the default \clr directory
16151 = /doc[file] process XML documentation comments and optionally name the .xdc file
16351 = /MD link with MSVCRT.LIB
16352 = /MT link with LIBCMT.LIB
16353 = /MDd link with MSVCRTD.LIB debug lib
16354 = /MTd link with LIBCMTD.LIB debug lib
16401 =                               -CODE ANALYSIS-
	
16402 = /analyze[-] Enable native analysis
16403 = /analyze:quiet[-] No warning to console
16404 = /analyze:log<name> Warnings to file
16405 = /analyze:autolog Log to *.pftlog
16406 = /analyze:autolog:ext<ext> Log to *.<ext>
16407 = /analyze:autolog- No log file
16408 = /analyze:WX- Warnings not fatal
16409 = /analyze:stacksize<num> Max stack frame
16410 = /analyze:max_paths<num> Max paths
16411 = /analyze:only Analyze, no code gen
17101 = /QSsh4 compile for SH-4 Rev ES7
17102 = /QSsh4a compile for SH-4A
17103 = /QSfastd[-] compile for SH-4 floating-pt
17104 = /QSfast[-] /QSfastd with warnings
17105 = /Gt[n] data objects > n use long data
17106 = /QSimplicit-import[-] No implicit DLL imports
17351 = /MD link with MSVCRT.LIB
17352 = /MT link with LIBCMT.LIB
17353 = /MDd link with MSVCRTD.LIB debug lib
17354 = /MTd link with LIBCMTD.LIB debug lib
18101 = /QMmips1 MIPS I ISA
18102 = /QMmips2 MIPS II ISA (default)
18103 = /QMmips3 MIPS III ISA
18104 = /QMmips4 MIPS IV ISA
18105 = /QMmips5 MIPS V ISA
18106 = /QMmips16 MIPS 16 ASE
18107 = /QMmips32 MIPS 32 ISA
18108 = /QMmips64 MIPS 64 ISA
18109 = /QMn32[-] generate code for MIPS n32 mode
18110 = /QMR3900 optimize for r3900
18111 = /QMR4100 optimize for r4100
18112 = /QMR4200 optimize for r4200
18113 = /QMR4300 optimize for r4300
18114 = /QMR5400 optimize for r5400
18115 = /QMVIPER optimize for Viper
18116 = /QMRFWCE generic WinCE -QMFPE- MIPS
18117 = /QMRWCE generic WinCE MIPS (Default)
18118 = /QMFPE[-] use floating point emulation
18119 = /QMase3D use MIPS-3D ASE
18351 = /MD link with MSVCRT.LIB
18352 = /MT link with LIBCMT.LIB
18353 = /MDd link with MSVCRTd.LIB debug lib
18354 = /MTd link with LIBCMTd.LIB debug lib
19051 =                           MIPS ASSEMBLER OPTIONS
	
19101 =                              -CODE GENERATION-
	
19102 = /QMRWCE allow generic assembler (default)
19103 = /QMR3900 allow VR3900
19104 = /QMR4100 allow VR4100
19105 = /QMR4131 allow VR4100 with MIPS4
19106 = /QMR4200 allow VR4200
19107 = /QMR4300 allow VR4300
19108 = /QMR5400 allow VR5400
19109 = /QMViper allow Viper
19110 = /QMmips1 allow MIPS1 ISA
19111 = /QMmips2 allow MIPS2 ISA
19112 = /QMmips3 allow MIPS3 ISA
19113 = /QMmips4 allow MIPS4 ISA
19114 = /QMmips5 allow MIPS5 ISA
19115 = /QMmips16 allow MIPS16
19116 = /QMmips32 allow MIPS32
19117 = /QMmips32r2 allow MIPS32 release 2
19118 = /QMmips64 allow MIPS64
19119 = /QMmips64r2 allow MIPS64 release 2
19120 = /QMase3D allow MIPS-3D FP on MIPS64
19121 = /QMn32[-] generate code for MIPS n32 mode
19122 = /QMaseDSP allow MIPS DSP ASE on MIPS32
19123 = /QMaseMT allow MIPS MT on MIPS32
19124 = /QMcorextend allow MIPS CorExtend on MIPS32
19125 = /QMFPE[-] disallow floating point
19126 = /Gy generate separate functions
19151 =                               -OUTPUT FILES-
	
19152 = /Fa[file] name assembly listing file
19153 = /FA[sc] configure assembly listing
19154 = /Fe<file> name executable file
19155 = /Fm[file] name map file
19156 = /Fo<file> name object file
19201 =                               -PREPROCESSOR-
	
19202 = /C don't strip comments
19203 = /D<name>{=|#}<text> define macro
19204 = /E preprocess to stdout
19205 = /EP preprocess to stdout, no #line
19206 = /P preprocess to file
19207 = /FI<file> name forced include file
19208 = /U<name> remove predefined macro
19209 = /u remove all predefined macros
19210 = /I<dir> add to include search path
19211 = /X ignore include "standard places"
19251 =                                 -LANGUAGE-
	
19252 = /Zl omit default library name in .OBJ
19253 = /Zs syntax check only
19301 =                               -MISCELLANEOUS-
	
19302 = /?, /help print this help message
19303 = /c compile only, no link
19304 = /H<num> max external name length
19305 = /nologo suppress copyright message
19306 = /V<string> set version string
19307 = /w disable all warnings
19308 = /wd<n> disable warning n
19309 = /we<n> treat warning n as an error
19310 = /wo<n> issue warning n once
19311 = /w<l><n> set warning level 1-4 for n
19312 = /W<n> set warning level (default n=1)
19313 = /WL enable one line diagnostics
19314 = /WX treat warnings as errors
19315 = /errorReport:option deprecated. Report internal compiler errors to Microsoft
19316 =     none - do not send report                
19317 =     prompt - prompt to immediately send report
19318 =     queue - at next admin logon, prompt to send report (default)
19319 =     send - send report automatically         
19351 =                                 -LINKING-
	
19352 = /MC link with CORELIBC.LIB (default)
19353 = /ML link with LIBC.LIB
19354 = /LD Create .DLL
19355 = /LDd Create .DLL debug libary
19356 = /F<num> set stack size
19357 = /link [linker options and libraries]
20101 = /guard:signret[-] enable signed return instruction generation
20102 = /arch:armv8.[0-8] minimum CPU extension requirements for Armv8.x-A
20251 = /Zc:arm64-aliased-neon-types[-] determines whether neon vector types are
	                                distinct, or are typedef'd to a common type
	                                (on by default)
20301 = /arm64EC generate code compatible to the ARM64EC ABI
20351 = /MD link with MSVCRT.LIB
20352 = /MT link with LIBCMT.LIB
20353 = /MDd link with MSVCRTD.LIB debug lib
20354 = /MTd link with LIBCMTD.LIB debug lib

[ConcurrencyCheckui.dll]
100 = ConcurrencyCheckui
121 = '%1$s' is a new lock
122 = Lock count for '%1$s' has been incremented
123 = Lock count for '%1$s' has been decremented
124 = Lock count for '%1$s' with lock level %2$s has been incremented
125 = Lock count for '%1$s' with lock level %2$s has been decremented
126 = Lock of '%1$s' has been aliased to lock of '%2$s'
127 = Lock of '%1$s' has been moved to '%2$s'
128 = '%1$s' has released its lock and replaced by the lock from '%2$s'
129 = '%1$s' and '%2$s' have swapped their locks
130 = Lock count for '%1$s' has been set to '%2$d'
131 = Lock count for '%1$s' with lock level %2$s has been set to '%3$d'
132 = Lock count for '%1$s' did not change
26100 = Race condition. Variable '%1$s' should be protected by lock '%2$s'.
26101 = Failing to use interlocked operation properly for variable '%1$s'.
26102 = Race condition through parameter access. Parameter '%1$s' is passed to a function and may be used to access variable '%2$s' which is guarded by lock '%3$s'. But this lock is not held and the callee does not guarantee to do so.
26105 = Lock order violation. Acquiring lock '%1$s' with level %2$s causes order inversion.
26106 = Lock order violation. Releasing lock '%1$s' with level %2$s causes order inversion.
26110 = Caller failing to hold lock '%1$s' before calling function '%2$s'.
26111 = Caller failing to release lock '%1$s' before calling function '%2$s'.
26112 = Caller cannot hold any lock before calling function '%1$s'.
26115 = Failing to release lock '%1$s' in function '%2$s'.
26116 = Failing to acquire or to hold lock '%1$s' in function '%2$s'.
26117 = Releasing unheld lock '%1$s' in function '%2$s'.
26130 = Missing annotation _Requires_lock_held_(%1$s) or _No_competing_thread_ at function '%4$s'. Otherwise it could be a race condition. Variable '%2$s' should be protected by lock '%3$s'.
26135 = Missing annotation %1$s%2$s) at function '%3$s'.
26136 = Missing _Guarded_by_ annotation: variable '%2$s' is guarded by lock '%1$s'.
26137 = Missing annotation _Interlocked_ for variable %1$s.
26138 = Suspending a coroutine while holding lock %1$s.
26140 = Undefined lock kind '%1$s' in annotation _Has_lock_kind_(%2$s) on lock '%3$s'.
26160 = Caller possibly failing to hold lock '%1$s' before calling function '%2$s'.
26165 = Possibly failing to release lock '%1$s' in function '%2$s'.
26166 = Possibly failing to acquire or to hold lock '%1$s' in function '%2$s'.
26167 = Possibly releasing unheld lock '%1$s' in function '%2$s'.

[CppCoreCheckui.dll]
100 = CppCoreCheckui
121 = Object '%1$s' is moved.
122 = Object '%1$s' is swapped with moved object '%2$s'.
26400 = Do not assign the result of an allocation or a function call with an owner<T> return value to a raw pointer, use owner<T> instead (i.11).
26401 = Do not delete a raw pointer that is not an owner<T> (i.11).
26402 = Return a scoped object instead of a heap-allocated if it has a move constructor (r.3).
26403 = Reset or explicitly delete an owner<T> pointer '%1$s' (r.3).
26404 = Do not delete an owner<T> which may be in invalid state (r.3).
26405 = Do not assign to an owner<T> which may be in valid state (r.3).
26406 = Do not assign a raw pointer to an owner<T> (r.3).
26407 = Prefer scoped objects, don't heap-allocate unnecessarily (r.5).
26408 = Avoid malloc() and free(), prefer the nothrow version of new with delete (r.10).
26409 = Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11).
26410 = The parameter '%1$s' is a reference to const unique pointer, use const T* or const T& instead (r.32).
26411 = The parameter '%1$s' is a reference to unique pointer and it is never reassigned or reset, use T* or T& instead (r.33).
26414 = Move, copy, reassign or reset a local smart pointer '%1$s' (r.5).
26415 = Smart pointer parameter '%1$s' is used only to access contained pointer. Use T* or T& instead (r.30).
26416 = Shared pointer parameter '%1$s' is passed by rvalue reference. Pass by value instead (r.34).
26417 = Shared pointer parameter '%1$s' is passed by reference and not reset or reassigned. Use T* or T& instead (r.35).
26418 = Shared pointer parameter '%1$s' is not copied or moved. Use T* or T& instead (r.36).
26426 = Global initializer calls a non-constexpr function '%1$s' (i.22).
26427 = Global initializer accesses extern object '%1$s' (i.22).
26429 = Symbol '%1$s' is never tested for nullness, it can be marked as not_null (f.23).
26430 = Symbol '%1$s' is not tested for nullness on all paths (f.23).
26431 = The type of expression '%1$s' is already gsl::not_null. Do not test it for nullness (f.23).
26432 = If you define or delete any default operation in the type '%1$s', define or delete them all (c.21).
26436 = The type '%1$s' with a virtual function needs either public virtual or protected non-virtual destructor (c.35).
26437 = Do not slice (es.63).
26438 = Avoid 'goto' (es.76).
26439 = This kind of function should not throw. Declare it 'noexcept' (f.6).
26440 = Function '%1$s' can be declared 'noexcept' (f.6).
26441 = Guard objects must be named (cp.44).
26444 = Don't try to declare a local variable with no name (es.84).
26445 = Do not assign gsl::span or std::string_view to a reference. They are cheap to construct and are not owners of the underlying data. (gsl.view).
26446 = Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
26447 = The function is declared 'noexcept' but calls function '%1$s()' which may throw exceptions (f.6).
26448 = Consider using gsl::finally if final action is intended (gsl.util).
26449 = gsl::span or std::string_view created from a temporary will be invalid when the temporary is invalidated (gsl.view).
26450 = Arithmetic overflow: '%1$s' operation causes overflow at compile time. Use a wider type to store the operands (io.1).
26451 = Arithmetic overflow: Using operator '%1$s' on a %2$d byte value and then casting the result to a %3$d byte value. Cast the value to the wider type before calling operator '%1$s' to avoid overflow (io.2).
26452 = Arithmetic overflow: Left shift count is negative or greater than or equal to the operand size which is undefined behavior (io.3).
26453 = Arithmetic overflow: Left shift of a negative signed number is undefined behavior (io.4).
26454 = Arithmetic overflow: '%1$s' operation produces a negative unsigned result at compile time (io.5).
26455 = Default constructor should not throw. Declare it 'noexcept' (f.6).
26457 = (void) should not be used to ignore return values, use 'std::ignore =' instead (es.48).
26458 = Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
26459 = You called an STL function '%s' with a raw pointer parameter at position '%d' that may be unsafe - this relies on the caller to check that the passed values are correct. Consider wrapping your range in a gsl::span and pass as a span iterator (stl.1).
26460 = The reference argument '%s' for function '%s' can be marked as const (con.3).
26461 = The pointer argument '%s' for function '%s' can be marked as a pointer to const (con.3).
26462 = The value pointed to by '%1$s' is assigned only once, mark it as a pointer to const (con.4).
26463 = The elements of array '%1$s' are assigned only once, mark elements const (con.4).
26464 = The values pointed to by elements of array '%1$s' are assigned only once, mark elements as pointer to const (con.4).
26465 = Don't use const_cast to cast away const or volatile. const_cast is not required; constness or volatility is not being removed by this conversion (type.3).
26466 = Don't use static_cast downcasts. A cast from a polymorphic type should use dynamic_cast (type.2).
26467 = Converting from floating point to unsigned integral types results in non-portable code if the double/float has a negative value. Use gsl::narrow_cast or gsl::narrow instead to guard against undefined behavior and potential data loss (es.46).
26471 = Don't use reinterpret_cast. A cast from void* can use static_cast (type.1).
26472 = Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).
26473 = Don't cast between pointer types where the source type and the target type are the same (type.1).
26474 = Don't cast between pointer types when the conversion could be implicit (type.1).
26475 = Do not use function style casts (es.49). Prefer 'Type{value}' over 'Type(value)'..
26476 = Expression/symbol '%s' uses a naked union '%s' with multiple type pointers: Use variant instead (type.7).
26477 = Use 'nullptr' rather than 0 or NULL (es.47).
26478 = Don't use std::move on constant variables. (es.56).
26479 = Don't use std::move to return a local variable. (f.48).
26481 = Don't use pointer arithmetic. Use span instead (bounds.1).
26482 = Only index into arrays using constant expressions (bounds.2).
26483 = Value %1$lld is outside the bounds (0, %2$lld) of variable '%3$s'. Only index into arrays using constant expressions that are within bounds of the array (bounds.2).
26485 = Expression '%1$s': No array to pointer decay (bounds.3).
26486 = Don't pass a pointer that may be invalid to a function. Parameter %1$d '%2$s' in call to '%3$s' may be invalid (lifetime.3).
26487 = Don't return a pointer '%1$s' that may be invalid (lifetime.4).
26488 = Do not dereference a potentially null pointer: '%1$s'. '%2$s' was null at line %3$u (lifetime.1).
26489 = Don't dereference a pointer that may be invalid: '%1$s'. '%2$s' may have been invalidated at line %3$u (lifetime.1).
26490 = Don't use reinterpret_cast (type.1).
26491 = Don't use static_cast downcasts (type.2).
26492 = Don't use const_cast to cast away const or volatile (type.3).
26493 = Don't use C-style casts (type.4).
26494 = Variable '%1$s' is uninitialized. Always initialize an object (type.5).
26495 = Variable '%1$s' is uninitialized. Always initialize a member variable (type.6).
26496 = The variable '%1$s' does not change after construction, mark it as const (con.4).
26497 = You can attempt to make '%1$s' constexpr unless it contains any undefined behavior (f.4).
26498 = The function '%1$s' is constexpr, mark variable '%2$s' constexpr if compile-time evaluation is desired (con.5).
26800 = Use of a moved from object: ''%1$s'' (lifetime.1).
26810 = Lifetime of captured variable ''%1$s'' might end by the time the coroutine is resumed (lifetime.1).
26811 = Lifetime of the memory referenced by parameter ''%1$s'' might end by the time the coroutine is resumed (lifetime.1).
26813 = Use 'bitwise and' to check if a flag is set.
26814 = The const variable '%1$s' can be computed at compile-time. Consider using constexpr (con.5).
26815 = The pointer is dangling because it points at a temporary instance which was destroyed.
26816 = The pointer points to memory allocated on the stack.
26817 = Potentially expensive copy of variable '%1$s' in range-for loop. Consider making it a const reference (es.71).
26818 = Switch statement does not cover all cases. Consider adding a 'default' label (es.79).
26819 = Unannotated fallthrough between switch labels (es.78).
26820 = This is a potentially expensive copy operation. Consider using a reference unless a copy is required (p.9).
26821 = For '%1$s', consider using gsl::span instead of std::span to guarantee runtime bounds safety (gsl.view).
26822 = Dereferencing a null pointer '%1$s' (lifetime.1).
26823 = Dereferencing a possibly null pointer '%1$s' (lifetime.1).
26824 = Postcondition for null pointer '%1$s' requires it to be non-null (lifetime.1).
26825 = Postcondition for possibly null pointer '%1$s' requires it to be non-null (lifetime.1).
26826 = Don't use C-style variable arguments (f.55).
26827 = Did you forget to initialize an enum constant, or intend to use another type?.
26828 = Different enum types have overlapping values. Did you want to use another enum constant here?.
26829 = Empty optional ''%1$s'' is unwrapped.
26830 = Potentially empty optional ''%1$s'' is unwrapped.
26834 = Variable '%1$s' is assigned a value that is never read.
26836 = Variable '%1$s' is assigned a value that is never read at declaration.
26846 = Don't pass an invalid pointer to a function. Parameter %1$d '%2$s' in call to '%3$s' is invalid (lifetime.3).
26847 = Don't return an invalid pointer '%1$s' (lifetime.4).
26848 = Do not dereference a null pointer: '%1$s'. '%2$s' was null at line %3$u (lifetime.1).
26849 = Don't dereference an invalid pointer: '%1$s'. '%2$s' have been invalidated at line %3$u (lifetime.1).
26850 = Do not assign a raw pointer '%2$s' to an owner<T> '%1$s' (ownership.1).
26851 = Variable '%1$s' has ownership on heap memory, should be marked as owner<T> (ownership.2).
26852 = Variable '%1$s' has ownership on heap memory already. Please transfer or free the owned memory first. (ownership.3).
26853 = Do not delete a raw pointer that is not an owner<T> (ownership.4).
26854 = Transferring/freeing owner '%1$s' which has previously transferred ownership or points to garbage (ownership.5).
26855 = Owner '%1$s' is going out of scope, please transfer its ownership or free its owned memory (ownership.6).
26856 = Raw pointer '%1$s' is used as an owner argument (ownership.7).
26857 = Mark the raw pointers in the target function signature as owners if you expect to send or return heap allocated objects. (ownership.8).
26858 = Expected owner pointer '%1$s' to have ownership at the end of the function (ownership.9).
26859 = Empty optional ''%1$s'' is unwrapped, will throw exception.
26860 = Potentially empty optional ''%1$s'' is unwrapped, may throw exception.

[cvtresui.dll]
1100 = duplicate resource.  type:%s, name:%s, language:0x%04X
1101 = cannot open '%s' for reading
1102 = out of memory; %u bytes required
1103 = cannot read file
1104 = cannot get location in file
1105 = cannot seek in file
1106 = cannot write to file
1107 = '%s' is corrupt
1108 = cannot open %s for writing
1109 = target machine '%s' requires '%s'
1110 = resource type or name string exceeds limit of 65535
1111 = failed to update the time date stamp field in '%s'; error code %u
4001 = machine type not specified; assumed %s
5001 = adding resource. type:%s, name:%s, language:0x%04X, flags:0x%X, size:%u
	
5002 = converting %dbpp %s to %dbpp %s
	
8001 = CVTRES : fatal error CVT%04d:%c
8002 = CVTRES : warning CVT%04d:%c
8003 = Microsoft (R) Windows Resource To Object Converter Version %s
	
8004 = Copyright (C) Microsoft Corporation.  All rights reserved.
	
8010 = usage: CVTRES [options] [files]
	
	
8011 =    options:
	
	
8012 =       /DEFINE:symbol
	
8014 =       /FOLDDUPS
	
8016 =       /MACHINE:{ARM|ARM64|ARM64EC|ARM64X|EBC|IA64|X64|X86}
	
8018 =       /NOLOGO
	
8020 =       /OUT:filename
	
8022 =       /READONLY
	
8024 =       /VERBOSE
	

[EnumIndexui.dll]
100 = EnumIndexui
121 = Bounds check status of enum value '%1$s' remains unchanged.
122 = Enum value '%1$s' is checked for lower bound.
123 = Enum value '%1$s' is checked for upper bound.
124 = Enum value '%1$s' is fully checked bounds.
125 = Unsigned enum value '%1$s' is checked for bounds.
126 = Enum value '%1$s' is assigned an unchecked value '%2$s'.
127 = Enum value '%1$s' is assigned a lower bound checked value '%2$s'.
128 = Enum value '%1$s' is assigned an upper bound checked value '%2$s'.
129 = Enum value '%1$s' is assigned a fully checked value '%2$s'.
130 = Unsigned enum value '%1$s' is assigned a bounds checked value '%2$s'.
33010 = Unchecked lower bound for enum %1$s used as index..
33011 = Unchecked upper bound for enum %1$s used as index..

[EspxEngineui.dll]
100 = EspxEngineUI
121 = '%1$s' is assigned with '%2$s'
122 = Branching based on condition '%1$s'. '%2$s' branch is taken
123 = '%1$s' is declared with initialization
124 = '%1$s' is declared without initialization

[HResultCheckui.dll]
100 = HResultCheckui
33020 = Likely incorrect HRESULT usage detected.
33022 = Potentially incorrect HRESULT usage detected (low confidence).

[linkui.dll]
1000 =  unknown error at %p; consult documentation for technical support options
1101 =  incorrect MSPDB140.DLL version; recheck installation of this product
1102 =  out of memory
1103 =  debugging information corrupt; recompile module
1104 =  cannot open file '%s'
1105 =  cannot close file '%s'
1106 =  invalid file or disk full: cannot seek to 0x%X
1107 =  invalid or corrupt file: cannot read at 0x%X
1108 =  cannot write file at 0x%X
1109 =  cannot remove file '%s'
1111 =  invalid /BASE argument '%s'
1112 =  module machine type '%s' conflicts with target machine type '%s'
1113 =  invalid machine type 0x%hX
1114 =  cannot overwrite the original file '%s'; error code %u
1115 =  /MACHINE option required
1117 =  syntax error in option '%s'
1118 =  syntax error in '%s' statement
1119 =  invalid ordinal number '%s'
1120 =  %u unresolved externals
1121 =  duplicate ordinal number '%u'
1123 =  failure during conversion to COFF: file invalid or corrupt
1127 =  library is corrupt
1129 =  cannot find resolution for weak extern %s
1130 =  Linker miscalc (base relocations off by 0x%X)
1131 =  no library file specified
1132 =  invalid format for MS-DOS stub file '%s'
1136 =  invalid or corrupt file
1137 =  invalid argument '%s' specified with /SECTION
1140 =  too many modules for program database; link with /PDB:NONE
1141 =  failure during build of exports file
1143 =  invalid or corrupt file: no symbol for COMDAT section 0x%X
1144 =  error with LINK_REPRO var; cannot open '%s'
1145 =  /MERGE created circular link for section '%s'
1146 =  no argument specified with option '/%s'
1147 =  invalid number specified with option '/%s'
1148 =  failure during conversion to COFF: cannot copy temp file '%s'
1149 =  output filename matches input filename '%s'
1152 =  cannot resolve one or more undecorated symbols
1154 =  specified import library filename matches exports file '%s'
1155 =  special symbol '%s' already defined.
1156 =  .sbss section not supported
1158 =  cannot run '%s'
1159 =  no output file specified
1160 =  library with zero objects not allowed
1161 =  invalid export specification
1162 =  expected aux symbol for COMDAT section 0x%X
1163 =  invalid selection for COMDAT section 0x%X
1164 =  section 0x%X alignment (%u) greater than /ALIGN value
1165 =  link failed because of fixup errors
1167 =  invalid or corrupt file: file contains relocs but header has no machine type
1168 =  cannot open %s for writing
1169 =  one or more multiply defined symbols found
1170 =  line in command file contains %u or more characters
1171 =  unable to load %s (error code: %u)
1172 =  more than one object with the same name found in the library; rename object(s)
1173 =  unable to find entrypoint '%s' in %s
1174 =  unable to rebase '%s'; not a valid Win32 image
1175 =  failed to rebase '%s'; error %u
1178 =  missing MODEND record; file is invalid or corrupt
1179 =  invalid or corrupt file: duplicate COMDAT '%s'
1180 =  insufficient disk space to complete link
1181 =  cannot open input file '%s'
1182 =  cannot have more than 64K exports
1183 =  invalid or corrupt file: extended relocation count %u less than 65535
1184 =  invalid section name '%s' specified in option or directive '%s'
1185 =  invalid section name '%s' specified
1186 =  invalid or corrupt COFF object; reloc to undefined static symbol '%s'
1187 =  corrupt object - unmatched %s relocation
1188 =  invalid fixup target '%s'; possibly zero length section
1189 =  library limit of %u objects exceeded
1190 =  invalid fixup found, type 0x%04X
1194 =  cannot delay-load '%s' due to import of data symbol '%s'; link without /DELAYLOAD:%s
1195 =  target machine '%s' requires '%s'
1196 =  invalid or corrupt import object: unknown version
1197 =  invalid or corrupt import object: unknown type
1198 =  invalid or corrupt import object: unknown name type
1199 =  invalid or corrupt import object: non-zero reserved fields
1200 =  error reading program database '%s'
1201 =  error writing to program database '%s'; check for insufficient disk space, invalid path, or insufficient privilege
1207 =  incompatible PDB format in '%s'; delete and rebuild
1209 =  program database '%s' differs from previous link; relink or rebuild
1210 =  exceeded internal ILK size limit; link with /INCREMENTAL:NO
1211 =  precompiled type information not found; '%s' not linked or overwritten
1212 =  error opening program database; file is in use
1213 =  unexpected import object encountered
1214 =  initialization failed (%08X) : %s
1215 =  metadata operation failed (%08X) : %s
1216 =  invalid source map specification '%s'
1218 =  warning treated as error; no output file generated
1219 =  ILK corrupt or not found; link with full command line
1220 =  '%s' requires '%s' specification
1221 =  a subsystem can't be inferred and must be defined
1223 =  invalid or corrupt file: file contains invalid .pdata contributions
1224 =  invalid image base 0x%I64X
1227 =  conflicting weak extern definition for '%s'.  New default '%s' conflicts with old default '%s' in %s
1229 =  Commit size greater than reserve size in '%s'
1230 =  exceeded incremental image size limit; link with /INCREMENTAL:NO
1232 =  invalid selection for comdat symbol '%s'
1233 =  conversion to COFF object failed
1234 =  corrupt or invalid public symbols
1235 =  corrupt or invalid COFF symbol table
1236 =  corrupt or invalid COFF sections
1237 =  during code generation, compiler introduced reference to symbol '%s' defined in module '%s' compiled with /GL
1240 =  failed to compile IDL content
1241 =  resource file %s already specified
1242 =  '%s' is an invalid export symbol name
1243 =  invalid or corrupt file: COMDAT section 0x%X associated with following %s 0x%X
1244 =  invalid image type '%s'; link without '/%s'
1245 =  invalid subsystem '%s' specified; /SUBSYSTEM must be WINDOWS, WINDOWSCE, or CONSOLE
1246 =  '/%s' not compatible with '%s' target machine; link without '/%s'
1247 =  cannot recover from previous errors
1248 =  image size (%08I64X) exceeds maximum allowable size (%X)
1249 =  image exceeds maximum extent with base address %I64X and size 0x%X
1250 =  failed to merge IDL content
1252 =  Exports not supported for '%s' target machine
1253 =  illegal export of managed symbol '%s'
1255 =  link failed because of metadata errors
1256 =  ALINK operation failed (%08X) : %s
1257 =  code generation failed
1258 =  cannot merge '%s' with '%s' due to differing section attributes
1260 =  invalid or corrupt file: '%s' relocation target symbol '%s' must be defined with external linkage
1262 =  link failed due to mismatched versions of '%s' and LINK.EXE
1263 =  /USEPROFILE specified but no code generation required; optimization failed
1264 =  /GENPROFILE specified but no code generation required; instrumentation failed
1265 =  error writing to instrumentation file '%s'; %s
1266 =  error reading instrumentation file '%s'; %s
1267 =  error reading instrumentation file; '%s' not created with compatible version of LINK.EXE
1268 =  inconsistent option '%s' specified with /USEPROFILE but not with /GENPROFILE
1269 =  inconsistent file '%s' specified with /USEPROFILE but not with /GENPROFILE
1270 =  invalid file; timestamp does not match file linked with /GENPROFILE
1272 =  cannot merge '%s' with any section
1274 =  failure during PGOMGR
1276 =  invalid directive '%s' found; does not start with '/'
1277 =  object record not found in pgd (%s)
1279 =  invalid or corrupt file: file contains invalid %s contributions
1280 =  invalid load config structure for SAFESEH image.
1281 =  Unable to generate SAFESEH image.
1282 =  unable to rebase '%s'; it has been signed
1283 =  unable to rebase '%s'; it has been signed with a strong signature
1285 =  corrupt PDB file '%s'; delete and rebuild
1286 =  pure MSIL DLL cannot have entry point
1287 =  invalid managed entry point %s
1289 =  non-pure module detected; unable to create a pure MSIL image
1290 =  invalid or corrupt file: %s MSIL object contains invalid relocations
1291 =  cannot insert .netmodule into a library
1292 =  compiler '%s' does not support this input file format
1293 =  Can't get handler from '%s' (%08X)
1294 =  exports and import libraries are not supported with %s
1295 =  '/%s' not compatible with '/%s' specification; link without '/%s'
1297 =  no input files specified
1298 =  more than one input file specified
1299 =  no response file specified with '@'
1300 =  cannot connect to or launch MSPDBSRV.EXE; recheck installation of this product
1301 =  LTCG clr modules found, incompatible with %s
1302 =  only support linking safe .netmodules; unable to link %s .netmodule
1303 =  ALINK operation failed (%08X) : %s : Unable to import assembly module %s
1304 =  COFF section name exceeds string table limit
1305 =  invalid argument '%s' specified with /SYMBOL
1306 =  DLL entry point %s cannot be managed; compile to native
1307 =  cannot import from DLL '%s'; unable to convert name to ANSI codepage %u
1308 =  %s module detected; unable to infer clr image type; use /CLRIMAGETYPE:%s to link
1309 =  %s module detected; invalid with switch /CLRIMAGETYPE:%s
1310 =  Exports not supported for %s MSIL image
1311 =  %u unresolved module references
1312 =  invalid or corrupt file: unable to import assembly
1313 =  %s module detected; cannot link with %s modules
1314 =  corrupt or invalid COFF symbol table (undefined static or label symbol)
1315 =  assembly reference to mscorlib.dll not found in any input file
1316 =  duplicate managed resource name '%s'
1317 =  during code generation, compiler introduced reference to managed symbol %s defined in module '%s' compiled with /GL; try compiling the function as native with '#pragma unmanaged'
1318 =  Unexpected PDB error; %s (%u) '%s'
1319 =  %u mismatches detected
1320 =  /MAXILKSIZE value 0x%08X must be between 0x%08X and 0x%08X
1321 =  no instrumentation file specified
1322 =  cannot avoid potential ARM hazard (%s) in section 0x%X; please consider using compiler option /Gy if it was not used
1323 =  directive '/%s' not compatible with switch '/%s'
1324 =  MSIL object or .netmodule detected; cannot produce kernel mode image
1325 =  switch '/%s' only compatible with DLL; link without '/%s'
1327 =  failure during running %s
1328 =  missing string table
1329 =  invalid size for _load_config_used structure
1331 =  %u unresolved tokens
1332 =  detected %u Windows Runtime types imported in one module and defined in another module
1333 =  invalid address specification at line %u
1334 =  cannot layout section %s at the specified address %08X
1335 =  Warbird failed to initialize 0x%08X
1336 =  Warbird pre processing TCE graph failed 0x%08X
1337 =  binary contains more base relocations than said in its base relocation directory
1338 =  Warbird post processing failed 0x%08X
1339 =  Warbird: %s
1340 =  failed to create heap: error code = %u
1341 =  invalid page size %u; it has to be a power of 2 and no smaller than 4096
1342 =  failed to save a backup copy of the binary file to be edited
1343 =  the binary's resource directory contains corrupted information
1344 =  the binary does not have enough room to add a new section header for resource
1345 =  the binary does not have enough room to fit in the new %s
1346 =  ALINK operation failed (%08X) : %s : failed to close the assembly module %s
1347 =  failed to normalize PE since the output binary file was failed to be opened as memory mapped
1348 =  failed to normalize PE due to hashing failure
1349 =  invalid or corrupted %s debug directory entry
1350 =  failed to update the time date stamp field in '%s'; error code %u
1351 =  invalid number value (0x%llX) for symbol '%s' specified in /DYNAMICVALUEFIXUPSYM
1352 =  '%s' and '%s' cannot be merged into different sections
1353 =  invalid Return Flow Guard epilogue branch
1354 =  link failed due to error found in Control Flow Guard analysis
1355 =  invalid base address 0x%I64X; %s image cannot have base address below 4GB
1356 =  cannot find library `%s' specified to be whole archived
1357 =  a second specification of section '%s' at line %u
1358 =  invalid or corrupted %s directory entry
1359 =  invalid or corrupted COR metadata
1360 =  missing code address range table in hybrid binary
1361 =  non COMDAT symbol '%s' in hybrid binary
1362 =  missing pop thunk '%s' in hybrid binary for function '%s'
1363 =  cannot find the right module to resolve static references
1364 =  failed to load the module '%s' to resolve static references
1365 =  cannot resolve static reference to '%s' in module '%s'
1366 =  no hybrid function symbol specified
1367 =  no '%s' specified
1368 =  '%s' is not an external function in '%s'; ignored
1369 =  '%s' does not have corresponding push thunk in '%s'; ignored
1370 =  failed to copy file '%s'; error code %u
1371 =  conflicting hybrid map entries for function '%s': '%s' and '%s'
1372 =  hybrid map entry target function '%s' is not 4-byte aligned
1373 =  cannot find %s thunk for symbol '%s'
1375 =  /MAXILKSIZE value 0x%016llX must be between 0x%016llX and 0x%016llX
1376 =  /DLL and /WOWA64 are incompatible when producing an import library. Generate the import library separately.
1377 =  '%s' symbol not found in object. The containing library is corrupt.
1378 =  hybrid map is corrupt in object
1379 =  retpoline data is corrupt in object
1380 =  unexpected retpoline sequence in section 0x%x at offset 0x%x
1381 =  required symbol '%s' not found
1382 =  unexpected retpoline CFG pointer in section 0x%X at offset 0x%X
1383 =  invalid alignment specification at line %u
1384 =  missing alignment specification at line %u
1385 =  missing padding section name at line %u
1386 =  could not generate metadata for one or more modules not compiled with /guard:ehcont; use /force:guardehcont to link anyways
1387 =  no value provided for DVRT symbol '%s'
1388 =  cxx module data is corrupt in object
1389 =  CastGuard is enabled but the size of the vftable '%s' in the LTCG module is smaller than the size of the vftable in the native object '%s'. This indicates there is an ODR violation and/or RTTI is enabled for one module and not the other.
1390 =  ARM64X image cannot have entry point as ARM64 native function '%s'
1391 =  ARM64X image cannot have export of ARM64 native function '%s'
1392 =  Incompatible object type found. Did you mean /machine:arm64x or /machine:arm64ec?
1394 =  cannot infer default ASAN libraries; please specify them on the link command line
1396 =  cannot find the corresponding %s for export '%s'
1397 =  cannot infer the corresponding ARM64EC symbol name for export '%s'. Does the symbol refer to data but was incorrectly exported as code?
1398 =  invalid hybrid function map entry (%03X %03X %X) referencing symbol '%s'
1399 =  /PDBPAGESIZE value 0x%08X must be 4096, 8192, 16384 or 32768
1400 =  section 0x%X contains invalid volatile metadata
1401 =  function override and candidates are different from machine architecture
1402 =  unsupported version number (%u)
1406 =  /experimental:deterministic only supports editing one PE at a time
1561 =  entry point must be defined
2001 =  unresolved external symbol %s%s
2003 =  gp relative fixup to symbol not in short data section '%s'
2004 =  gp relative fixup overflow to '%s'; short section '%s' is too large or out of range.
2005 =  %s already defined in %s
2008 =  fixup target is not aligned '%s'
2009 =  fixup target must be absolute '%s' w/o /FIXED; fixup ignored
2011 =  precompiled object not linked in; image may not run
2013 =  %s fixup overflow.  Target '%s' is out of range
2014 =  TLS relative fixup overflow; .tls section ('%s') is too large
2015 =  JAL fixup opcode is not JAL
2016 =  absolute symbol '%s' used as target of %s relocation in section 0x%X
2017 =  '%s' relocation to '%s' invalid without /LARGEADDRESSAWARE:NO
2018 =  bad relocation detected in section 0x%X at offset 0x%X
2019 =  unresolved external symbol %s referenced in function %s%s
2020 =  unresolved token (%08X) %s
2021 =  Invalid .pdata fixup detected ('%s'); must be type '%s'
2022 =  metadata operation failed (%08X) : %s
2023 =  bad DLL or entry point %s
2024 =  Invalid fixup to .pdata
2026 =  module unsafe for SAFESEH image.
2027 =  unresolved module reference '%s'
2028 =  unresolved token (%08X) %s referenced in function %s
2029 =  metadata for symbol '%s' inconsistent with COFF symbol table
2030 =  metadata inconsistent with COFF symbol table: symbol '%s' (%08X) is different from '%s' in metadata
2031 =  unable to generate p/invoke for %s; calling convention missing in metadata
2032 =  metadata inconsistent with COFF symbol table: symbol '%s' (%08X) mapped to '%s' (%08X) in %s
2033 =  unresolved typeref token (%08X) for '%s'
2034 =  metadata inconsistent with COFF symbol table: symbol '%s' (%08X) has inconsistent metadata with (%08X) in %s
2035 =  metadata inconsistent with COFF symbol table: symbol '%s' (%08X) defined in metadata but not in symbol table
2036 =  metadata inconsistent for symbol '%s'
2037 =  symbol '%s' is referenced as '%s' (%08X) in metadata
2038 =  mismatch detected for '%s': value '%s' doesn't match value '%s' in %s
2039 =  importing ref class '%s' that is defined in %s; it should be either imported or defined, but not both
2040 =  relocation %s targeting '%s' (%08X) is invalid for the instruction (%08X) at section 0x%X offset 0x%X
2041 =  Warbird: %s
2042 =  invalid COFF symbol index (%X)
2043 =  symbol '%s' defined in module '%s' and used as target of '%s' relocation in section 0x%X has been removed by /OPT:REF before code generation
2044 =  section 0x%X contains valid indirect call target but has zero byte; image may not run
2045 =  relocation %s targeting '%s' (%08X) and '%s' (%08X) is invalid for the instruction (%08X) at section 0x%X offset 0x%X
2046 =  module contains _local_unwind but was not compiled with /guard:ehcont
2047 =  module contains C++ EH or complex EH metadata but was not compiled with /guard:ehcont
2048 =  relocation %s targeting '%s' (%08X) is invalid for the instruction (%08X at RVA %08X) at section 0x%X offset 0x%X, due to bad alignment of offset to target (%X); expected to be %u bytes aligned
2049 =  relocation %s targeting '%s' (%08X) and '%s' (%08X) is invalid for the instruction (%08X at RVA %08X) at section 0x%X offset 0x%X, due to bad alignment of offset to target (%08X); expected to be %u bytes aligned
4001 =  no object files specified; libraries used
4002 =  %s defined in %s
4003 =  invalid library format; library ignored
4006 =  %s already defined in %s; second definition ignored
4010 =  invalid subsystem version number %s; default subsystem version assumed
4012 =  invalid value '%s', must be '%s'; option ignored
4013 =  image size 0x%X exceeds specified maximum 0x%X
4014 =  cannot find member object %s
4017 =  %s statement not supported for the target platform; ignored
4018 =  too many type indexes in PDB '%s', discarding subsequent type information
4019 =  corrupt string table (table end); new end assumed
4020 =  a type record in '%s' is corrupted; some symbols and types may not be accessible from the debugger
4022 =  cannot find unique match for symbol '%s'
4030 =  invalid file offset 0x%X for %s; category not dumped
4031 =  no subsystem specified; CONSOLE assumed
4037 =  '%s' does not exist; ignored
4038 =  displaying raw data in %u units per line
4039 =  section '%s' specified with /SECTION option does not exist
4040 =  corrupt string table (size); string table ignored
4041 =  no edit options specified
4042 =  object specified more than once; extras ignored
4043 =  invalid '/%s' value %i (must be power of 2); assumed default
4044 =  unrecognized option '/%s'; ignored
4046 =  LINK_REPRO is set to current directory; ignored
4047 =  cannot edit library file '%s'; ignored
4048 =  Invalid format file; ignored
4049 =  symbol '%s' defined in '%s' is imported
4051 =  extra delimiter in /EXPORT specification
4052 =  using .EXP file; ignoring .DEF file '%s'
4056 =  extra arguments ignored for option '/%s'
4060 =  stub file missing full MS-DOS header; rebuild stub with /KNOWEAS 16-bit LINK option
4061 =  /NOSTUB ignored because no DOS stub is present
4062 =  '%s' not compatible with '%s' target machine; option ignored
4065 =  '%s' cannot be ordered; ignored
4066 =  DLL contains .sdata section
4067 =  ambiguous entry point; selected '%s'
4068 =  /MACHINE not specified; defaulting to %s
4069 =  cannot checksum image; checksum set to 0
4070 =  /OUT:%s directive in .EXP differs from output filename '%s'; ignoring directive
4071 =  cannot be incrementally linked on subsequent links
4072 =  section count %u exceeds max (%u); image may not run
4073 =  cannot create map for .ILK file; linking nonincrementally
4075 =  ignoring '/%s' due to '/%s' specification
4076 =  invalid incremental status file '%s' (which will be deleted); linking nonincrementally
4077 =  exports file '%s' used; ignoring other export specifications
4078 =  multiple '%s' sections found with different attributes (%08X)
4079 =  no write permission for incremental status file '%s'; linking nonincrementally
4081 =  insufficient disk space; linking nonincrementally
4085 =  more than %u comments; skipping exestr
4086 =  entrypoint '%s' is not __stdcall with %u bytes of arguments; image may not run
4087 =  CONSTANT keyword is obsolete; use DATA
4088 =  image being generated due to /FORCE option; image may not run
4092 =  shared writable section '%s' contains relocations; image may not run correctly
4093 =  Drive/Directory component ignored in '%s' statement
4094 =  '%s' is an MS-DOS executable; use EXEHDR to dump it
4097 =  duplicate name '%s' in order file; using last one
4098 =  defaultlib '%s' conflicts with use of other libs; use /NODEFAULTLIB:library
4099 =  PDB '%s' was not found with '%s' or at '%s'; linking object as if no debug info
4102 =  export of deleting destructor '%s'; image may not run correctly
4103 =  import of deleting destructor '%s'; image may not run correctly
4104 =  export of symbol '%s' should be PRIVATE
4105 =  no argument specified with option '/%s'; ignoring option
4108 =  %s specified without /DRIVER; image may not run
4194 =  /DELAYLOAD:%s ignored
4195 =  unable to load %s
4196 =  unable to find entrypoint '%s' in %s
4197 =  export '%s' specified multiple times; using first specification
4198 =  base key '%s' not found - using default
4199 =  /DELAYLOAD:%s ignored; no imports found from %s
4200 =  corrupt line number information in object file; ignored
4202 =  spawning full build due to '/%s' directive
4203 =  error reading program database '%s'; linking object as if no debug info
4204 =  '%s' is missing debugging information for referencing module; linking object as if no debug info
4205 =  '%s' is missing current debugging information for referencing module; linking object as if no debug info
4206 =  precompiled type information not found; '%s' not linked or overwritten; linking object as if no debug info
4207 =  '%s' compiled with /Yc /Yu /Z7; cannot create PDB; recompile with /Zi; linking object as if no debug info
4208 =  incompatible PDB format in '%s'; delete and rebuild; linking object as if no debug info
4209 =  debugging information corrupt; recompile module; linking object as if no debug info
4210 =  %s section exists; there may be unhandled static initializers or terminators
4216 =  Exported entry point %s
4217 =  symbol '%s' defined in '%s' is imported by '%s' in function '%s'
4220 =  invalid '/%s' value %i; assumed default
4221 =  This object file does not define any previously undefined public symbols, so it will not be used by any link operation that consumes this library
4222 =  exported symbol '%s' should not be assigned an ordinal
4223 =  the %s attribute specified for section '%s' is ineffective without the %s attribute
4224 =  %s is no longer supported;  ignored
4225 =  '%s' has an uneditable file format
4226 =  alignment specified (%u) exceeds target machine page size (%u); image may not run
4227 =  metadata operation warning (%08X) : %s
4228 =  '/%s' invalid for a DLL; ignored
4229 =  invalid directive '/%s' encountered; ignored
4232 =  name %s contains non-ASCII characters, DLL may not load on system with ANSI codepage other than %u
4233 =  name %s contains non-ASCII characters, DLL will not load if system does not have same ANSI codepage as the one used for linking this DLL
4236 =  %s statement is obsolete.  Use %s.
4237 =  /SUBSYSTEM:NATIVE specified when importing from '%s';  Use /SUBSYSTEM:CONSOLE or /SUBSYSTEM:WINDOWS.
4238 =  shared writable section '%s' contains the import address table; image may not run correctly
4239 =  invalid load config struct for SAFESEH image; generating non-SAFESEH image.
4240 =  SAFESEH table contained in incompatible target machine type '%s'
4241 =  invalid subsystem version number %s
4242 =  '%s' overriding source setting
4243 =  entry point '%s' already has loader optimization attribute; '%s' ignored
4244 =  unable to write LTCG object
4245 =  ignoring '/%s' because of %s MSIL image
4246 =  .netmodule entry point token (%08X) ignored
4247 =  entry point '%s' already has a thread attribute; '%s' ignored
4248 =  unresolved typeref token (%08X) for '%s'; image may not run
4249 =  directive '/%s' conflicts with command line or previous directive; ignored
4250 =  symbol '%s' specified with /SYMBOL option does not exist
4251 =  AllowPartiallyTrustedCallersAttribute assembly attribute used without specifying /CLRUNMANAGEDCODECHECK
4252 =  must read and agree to the Data Collection Policy at %s before using /ERRORREPORT:SEND
4253 =  section '%s' not merged into '%s';  already merged into '%s'
4254 =  section '%s' (%08X) merged into '%s' (%08X) with different attributes
4255 =  library contain multiple objects of the same name; linking object as if no debug info
4256 =  Profile Guided Optimization is not available in this edition of the product; '%s' ignored
4257 =  object file was not compiled for kernel mode; the image might not run
4258 =  directive '/%s' not compatible with switch '/%s'; ignored
4259 =  '%s' is not compatible with '%s'; image may not run
4260 =  duplicate name '%s' in weakorder file; using last one
4261 =  type mismatch detection relies on debug info; '%s' ignored because '%s' was not specified
4262 =  %u instances of type mismatch
4263 =  /DISASM not supported for machine type '%s'
4264 =  archiving object file compiled with /ZW into a static library; note that when authoring Windows Runtime types it is not recommended to link with a static library that contains Windows Runtime metadata unless /WHOLEARCHIVE is specified to include everything from the static library
4265 =  section %s not exist in the binary; line %u ignored
4266 =  missing load config symbol for image built with %s
4267 =  found total %u non COMDAT Control Flow Guard protected functions
4268 =  found duplicate image section '%s' (%08X) contributed by%s
4269 =  '/GUARD:CFW' used but no input module was compiled with /GUARD:CFW; image may not run
4270 =  Warbird: %s
4271 =  invalid '/%s' value %i; supported thread count is [1-%i]; assumed default to use %i threads
4272 =  library machine type '%s' conflicts with target machine type '%s'
4273 =  ignoring '%s' because '%s' was not specified
4274 =  IAT is supposed to be in read only section for Control Flow Guard protected binary; now it is in section '%s' with characteristics as '%s'
4275 =  '%s' statement cannot appear after %s; ignored
4276 =  hybrid function map entry (%03X %03X %X) contains unknow flag; ignored
4277 =  cannot find member object at offset %x
4278 =  cannot find hybrid icall push thunk for export %s
4279 =  function '%s' mapped to different icall push thunks: '%s' (in '%s') and '%s' (in '%s')
4280 =  module contains reference to setjmp but was not compiled with /guard:cf; image may not run
4281 =  undesirable base address 0x%I64X for x64 image; set base address above 4GB for best ASLR optimization
4282 =  native function '%s' mapped to different guest references: '%s' (in '%s') and '%s' (in '%s')
4283 =  '%s' C++ export symbol name could not be converted to a hybrid function name
4284 =  '%s' export symbol name is ambiguous, could be a __cdecl symbol
4285 =  '%s' export symbol name is already exported as '%s'
4286 =  symbol '%s' defined in '%s' is imported by '%s'
4287 =  object file is missing /guard:retpoline metadata
4288 =  invalid size for '%s' table
4289 =  padding section name '%s' specified at line %u is too long; will be truncated to '%s'
4290 =  section '%s' is missing specification in section layout file; will be put after all specified sections
4291 =  module may contain '__except' (Structured Exception Handling) but was not compiled with /guard:ehcont; generating conservative metadata
4292 =  incompatible delay load helper library `%s'
4293 =  ARM64EC symbol, %s, was unresolved. Attempting to resolve to native ARM64 symbol, %s. Image may not run correctly
4294 =  missing %s version of load config symbol for ARM64X image
4295 =  __chpe_metadata was missing for ARM64X image
4296 =  '%s' is an invalid name for a function export, treating it as a data export. (Did you forget 'DATA' in the .def file?)
4297 =  uses of runtime type information (RTTI) were detected in the image, but one or more modules had RTTI suppressed by /GR-. Incorrect runtime behavior may occur.
	%s
4298 =  uses of runtime type information (RTTI) were detected in the image, but the presence of RTTI could not be validated in one or more modules because they were built with a toolset that does not support RTTI usage reporting. Incorrect runtime behavior may occur.
	%s
4299 =  uses of runtime type information (RTTI) were not detected in the image, but RTTI uses may still exist because one or more modules were built with a toolset that does not support RTTI usage reporting. RTTI stripping was aborted.
	%s
4300 =  ignoring '%s' because input module contains ASAN metadata
4302 =  please add '%s' to the link command line for better ASAN error reporting
4304 = The binary was not built with /experimental:deterministic
4305 =  ignoring /experimental:deterministic for OBJ files
6001 =  insufficient disk space; performing full link
6002 =  invalid .ILK file found; performing full link
6003 =  LINK options changed (/%s); performing full link
6004 =  %s not found or not built by the last incremental link; performing full link
6005 =  exports changed; performing full link
6006 =  program database %s missing; performing full link
6007 =  can't delete file '%s'
6008 =  object file added; performing full link
6009 =  object file removed; performing full link
6010 =  import library changed; performing full link
6011 =  internal limit exceeded; performing full link
6012 =  precompiled types found; performing full link
6013 =  padding exhausted (%u): performing full link
6016 =  absolute symbol '%s' changed; performing full link
6018 =  multiple definitions found for %s; performing full link
6019 =  directives changed; performing full link
6020 =  ILK file not built by this linker; performing full link
6021 =  performing full link
6022 =  unable to load ILK file; performing full link
6023 =  unable to extend map for ILK file; performing full link
6026 =  obsolete DBI format found; performing full link
6027 =  performing a full relink with the following command line: '%s'
6028 =  file alignment: %u, section alignment: %u
6031 =  object file changed; merging IDL
6032 =  IDL content unchanged; skipping MIDL
6033 =  unsafe module introduced into a SAFESEH image; performing full link
6034 =  creating LINK_REPRO test case in dir '%s'
6035 =  MSIL .netmodule or module compiled with /GL found; restarting link with /LTCG; add /LTCG to the link command line to improve linker performance
6036 =  /LTCG specified but no code generation required; remove /LTCG from the link command line to improve linker performance
6037 =  Failed to spawn postlink tool, could not find it; ignoring error
6038 =  Failed to spawn postlink tool, arguments too big;  ignoring error
6039 =  Failed to spawn postlink tool, invalid executable image; ignoring error
6040 =  section '%s' (%08X) merged into '%s' (%08X)
6041 =  MSIL module encountered; incremental linking is disabled for MSIL; performing full link
6042 =  symbol '%s' was previously common and is now initialized; performing full link
6043 =  symbol '%s' was previously initialized and is now common; performing full link
6044 =  common symbol '%s' is bigger than in previous link; performing full link
6045 =  common symbol '%s' was previously defined in library, but is now defined in obj; performing full link
6046 =  symbol '%s' was previously weak but is now strong; performing full link
6047 =  symbol '%s' not defined by modified objects but referenced by non-modified objects; performing full link
6048 =  undefined symbol '%s' has alternate name; performing full link
6049 =  symbol '%s' was previously strong but is now weak; performing full link
6050 =  module '%s' in library '%s' is no longer referenced and may have side effects; performing full link
6051 =  data referenced by unmodified code moved; performing full link
6052 =  attributes for COMDAT '%s' changed across links; performing full link
6053 =  found %u undefined symbols; performing full link
6054 =  unexpected condition encountered; performing full link
6055 =  bss (uninitialized) data with multiple definitions encountered; performing full link
6056 =  User defined type '%s' has different definitions or layouts in the following modules:%s
6057 =  ODR violation can not be detected during incremental linking; performing full link
6058 =  the PDB filename written in binary's CV record was '%s' and now will be '%s'; performing full link
6059 =  gave up doing ICF on these two contributions: section 0x%X in %s and section 0x%X in %s
6060 =  %s: found non COMDAT Control Flow Guard protected function '%s' in section 0x%X
6061 =  safe SEH handler changed; performing full link
6062 =  %s is not supported when managed code is present; restarting link with /DEBUG:FULL
6063 =  found new dependent DLL; performing full link
6064 =  New file: %s
6065 =  Removed file: %s
6066 =  Changed import library: %s
6067 =  unable to extend map for ILK file; linking nonincrementally
6069 =  found multiply defined symbol; performing full link
6070 =  too many modules have changed since prior linking; performing full link
6071 =  %s fixup overflow; target '%s' is out of range, inserting thunk
6072 =  have to convert CIL %s '%s' due to /LTCG:OFF specification; unable to perform incremental linking; linking nonincrementally
6073 =  found ASAN metadata; incremental linking not supported; linking nonincrementally
6075 =  found volatile metadata; performing full link
6076 =  /INFERASANLIBS first seen as directive when processing libraries; restaring link with /INFERASANLIBS; add /INFERASANLIBS to the link command line to improve linker performance
9001 =    Creating library %s and object %s
9002 = Searching libraries
9003 = Finished searching libraries
9004 = Generating .exp file
9006 = Finished generating .exp file
9007 = Starting pass 1
9008 = Finished pass 1
9009 = Searching %s:
9010 = Found %s
9011 = Referenced in %s
9012 = Loaded %s
9013 = Starting pass 2
9014 = Finished pass 2
9015 = Processed /NODEFAULTLIB (suppressing all default libs)
9016 = Processed /NODEFAULTLIB:%s
9017 = Processed /DEFAULTLIB:%s
9018 = Discarded %s from %s
9019 = Discarded %s
9020 = Discarded '%s' from %s
9021 = Replacing %s
9022 = Processing /ORDER options
9023 = Finished processing /ORDER options
9024 =     External code objects not listed in the /ORDER file:
9025 =  Processed /DISALLOWLIB:%s
9026 =     Selected symbol:
9027 =     Replaced symbol(s):
9028 =     ICF total savings: %u bytes
9029 =         %s from %s
9030 =         '%s' from %s
9031 = Invoking %s:
9032 = Generating code
9033 = Finished generating code
9035 =   %s file found at '%s'
9036 =   %s file '%s' checked.  (%s)
9037 = Generating non-SAFESEH image.
9038 = module '%s' unsafe for SAFESEH image.
9039 = (press <return> to continue)
9040 = Generating clr %s image
9041 = Not loading %s
9042 = Search transition %s->%s
9043 = Merging metadata
9044 = Finished merging metadata
9045 = Importing assembly module %s
9046 = Converting %s
9047 = Unused libraries:
9048 =    Creating object %s
9049 =    For help on %s, type `link /%s' or `%s'
9050 =    For help on %s, type `link /%s'
9051 =    Creating library %s
9052 = Generating %s
9053 =  the 32-bit linker (%s) ran out of heap space and is going to restart linking with a 64-bit linker
9054 =  %u new modules and %u (out of %u) modules have changed since prior linking
9055 =  Resolving static references for `%s' in `%s'
9056 =  the 32-bit linker (%s) failed to do memory mapped file I/O on `%s' and is going to restart linking with a 64-bit linker for better throughput
9057 =  restarting link with 64-bit linker `%s'
9058 =  failed to locate a 64-bit linker based on current linker's location or on %%PATH%%, continuing the current linking; please consider switching to 64-bit linker
9059 = Unused delay load specifications:
9060 = Hint on symbols that are defined and could potentially match:
9061 =  The linker is going to restart linking to generate a repro case
9062 =  Failed to create a new GUID
9063 =  Ran out of heap space
9064 =  Failed to create repro directory `%s'
9065 =  Control Flow Guard XFG hazard detected in %S with RVA %#X, bytes %#llX
9066 = Runtime type information (RTTI) information was stripped from the final image for '%S'
9067 = Runtime type information (RTTI) was removed from the final image because no RTTI operations were found. Total RTTI bytes removed: %u
9068 = Runtime type information (RTTI) was kept in the final image because RTTI operations were found. Total RTTI bytes kept: %u
9069 = Runtime type information (RTTI) was kept in the final image because it was impossible to confirm that all linked modules are free of RTTI operations. Total RTTI bytes kept: %u
9070 = Cxx module weak ownship symbol resolution: %s -> %s
9071 = Updating PDB GUID and/or timestamp in %s
9200 =  usage: LINK [options] [files] [@commandfile]
9204 =    options:
9208 =       /ALIGN:#
9211 =       /ALLOWBIND[:NO]
9214 =       /ALLOWISOLATION[:NO]
9215 =       /APPCONTAINER[:NO]
9217 =       /ASSEMBLYDEBUG[:DISABLE]
9220 =       /ASSEMBLYLINKRESOURCE:filename
9223 =       /ASSEMBLYMODULE:filename
9226 =       /ASSEMBLYRESOURCE:filename[,[name][,PRIVATE]]
9229 =       /BASE:{address[,size]|@filename,key}
9232 =       /CLRIMAGETYPE:{IJW|PURE|SAFE|SAFE32BITPREFERRED}
9233 =       /CLRLOADEROPTIMIZATION:{MD|MDH|NONE|SD}
9235 =       /CLRSUPPORTLASTERROR[:{NO|SYSTEMDLL}]
9238 =       /CLRTHREADATTRIBUTE:{MTA|NONE|STA}
9241 =       /CLRUNMANAGEDCODECHECK[:NO]
9243 =       /DEBUG[:{FASTLINK|FULL|NONE}]
9247 =       /DEF:filename
9250 =       /DEFAULTLIB:library
9253 =       /DELAY:{NOBIND|UNLOAD}
9256 =       /DELAYLOAD:dll
9259 =       /DELAYSIGN[:NO]
9260 =       /DEPENDENTLOADFLAG:flag
9262 =       /DLL
9265 =       /DRIVER[:{UPONLY|WDM}]
9268 =       /DYNAMICBASE[:NO]
9269 =       /EMITVOLATILEMETADATA[:NO]
9270 =       /ENTRY:symbol
9271 =       /ERRORREPORT:{NONE|PROMPT|QUEUE|SEND}
9272 =       /EXPORT:symbol
9273 =       /EXPORTPADMIN[:size]
9274 =       /FASTFAIL[:NO]
9276 =       /FASTGENPROFILE[:{COUNTER32|COUNTER64|EXACT|MEMMAX=#|MEMMIN=#|NOEXACT|
9277 =                         NOPATH|NOTRACKEH|PATH|PGD=filename|TRACKEH}]
9278 =       /FILEALIGN:#
9280 =       /FIXED[:NO]
9283 =       /FORCE[:{MULTIPLE|UNRESOLVED}]
9286 =       /FUNCTIONPADMIN[:size]
9287 =       /GUARD:{CF|NO}
9288 =       /GENPROFILE[:{COUNTER32|COUNTER64|EXACT|MEMMAX=#|MEMMIN=#|NOEXACT|
9289 =                     NOPATH|NOTRACKEH|PATH|PGD=filename|TRACKEH}]
9290 =       /HEAP:reserve[,commit]
9291 =       /HIGHENTROPYVA[:NO]
9292 =       /IDLOUT:filename
9296 =       /IGNORE:#
9300 =       /IGNOREIDL
9301 =       /ILK:filename
9302 =       /IMPLIB:filename
9304 =       /INCLUDE:symbol
9306 =       /INCREMENTAL[:NO]
9307 =       /INTEGRITYCHECK
9308 =       /KERNEL
9309 =       /KEYCONTAINER:name
9310 =       /KEYFILE:filename
9312 =       /LARGEADDRESSAWARE[:NO]
9314 =       /LIBPATH:dir
9315 =       /LINKREPRO:dir
9316 =       /LINKREPROTARGET:filename
9317 =       /LTCG[:{INCREMENTAL|NOSTATUS|OFF|STATUS|}]
9318 =       /LTCGOUT:filename
9320 =       /MACHINE:{ARM|ARM64|ARM64EC|ARM64X|EBC|X64|X86}
9324 =       /MANIFEST[:{EMBED[,ID=#]|NO}]
9326 =       /MANIFESTDEPENDENCY:manifest dependency
9328 =       /MANIFESTFILE:filename
9330 =       /MANIFESTINPUT:filename
9332 =       /MANIFESTUAC[:{NO|UAC fragment}]
9334 =       /MAP[:filename]
9336 =       /MAPINFO:{EXPORTS|PDATA}
9338 =       /MERGE:from=to
9340 =       /MIDL:@commandfile
9341 =       /NATVIS:filename
9342 =       /NOASSEMBLY
9344 =       /NODEFAULTLIB[:library]
9345 =       /NOENTRY
9346 =       /NOEXP
9347 =       /NOIMPLIB
9348 =       /NOLOGO
9350 =       /NXCOMPAT[:NO]
9368 =       /OPT:{ICF[=iterations]|LBR|NOICF|NOLBR|NOREF|REF}
9370 =       /ORDER:@filename
9372 =       /OUT:filename
9374 =       /PDB:filename
9376 =       /PDBSTRIPPED[:filename]
9382 =       /PROFILE
9385 =       /RELEASE
9386 =       /SAFESEH[:NO]
9388 =       /SECTION:name,[[!]{DEKPRSW}][,ALIGN=#]
9389 =       /SOURCELINK:filename
9390 =       /STACK:reserve[,commit]
9392 =       /STUB:filename
9394 =       /SUBSYSTEM:{BOOT_APPLICATION|CONSOLE|EFI_APPLICATION|
9396 =                   EFI_BOOT_SERVICE_DRIVER|EFI_ROM|EFI_RUNTIME_DRIVER|
9398 =                   NATIVE|POSIX|WINDOWS|WINDOWSCE}[,#[.##]]
9400 =       /SWAPRUN:{CD|NET}
9402 =       /TLBID:#
9404 =       /TLBOUT:filename
9405 =       /TIME
9406 =       /TSAWARE[:NO]
9407 =       /USEPROFILE[:{AGGRESSIVE|PGD=filename}]
9408 =       /VERBOSE[:{CLR|ICF|INCR|LIB|REF|SAFESEH|UNUSEDDELAYLOAD|UNUSEDLIBS}]
9410 =       /VERSION:#[.#]
9412 =       /WINMD[:{NO|ONLY}]
9414 =       /WINMDDELAYSIGN[:NO]
9416 =       /WINMDFILE:filename
9418 =       /WINMDKEYCONTAINER:name
9420 =       /WINMDKEYFILE:filename
9421 =       /WHOLEARCHIVE[:library]
9424 =       /WX[:NO]
9425 =       /WX[:nnnn[,nnnn...]]
9500 = usage: EDITBIN [options] [files]
9502 =    options:
9506 =       /ALLOWBIND[:NO]
9508 =       /ALLOWISOLATION[:NO]
9509 =       /APPCONTAINER[:NO]
9510 =       /BIND[:PATH=path]
9512 =       /DYNAMICBASE[:NO]
9514 =       /ERRORREPORT:{NONE|PROMPT|QUEUE|SEND}
9515 =       /GUARD:{CF|NO}
9516 =       /HEAP:reserve[,commit]
9517 =       /HIGHENTROPYVA[:NO]
9518 =       /INTEGRITYCHECK[:NO]
9519 =       /LARGEADDRESSAWARE[:NO]
9520 =       /NOLOGO
9522 =       /NXCOMPAT[:NO]
9524 =       /REBASE[:[BASE=address][,BASEFILE][,DOWN]]
9526 =       /RELEASE
9528 =       /SECTION:name[=newname][,[[!]{CDEIKOMPRSUW}][A{1248PTSX}]]
9530 =       /STACK:reserve[,commit]
9532 =       /SUBSYSTEM:{BOOT_APPLICATION|CONSOLE|EFI_APPLICATION|
9534 =                   EFI_BOOT_SERVICE_DRIVER|EFI_ROM|EFI_RUNTIME_DRIVER|
9536 =                   NATIVE|POSIX|WINDOWS|WINDOWSCE}[,#[.##]]
9538 =       /SWAPRUN:{[!]CD|[!]NET}
9544 =       /TSAWARE[:NO]
9546 =       /VERSION:#[.#]
9550 = usage: LIB [options] [files]
9552 =    options:
9554 =       /DEF[:filename]
9555 =       /ERRORREPORT:{NONE|PROMPT|QUEUE|SEND}
9556 =       /EXPORT:symbol
9557 =       /EXTRACT:membername
9558 =       /INCLUDE:symbol
9559 =       /LIBPATH:dir
9561 =       /LINKREPRO:dir
9563 =       /LINKREPROTARGET:filename
9565 =       /LIST[:filename]
9567 =       /LTCG
9569 =       /MACHINE:{ARM|ARM64|ARM64X|EBC|X64|X86}
9573 =       /NAME:filename
9575 =       /NODEFAULTLIB[:library]
9577 =       /NOLOGO
9579 =       /OUT:filename
9581 =       /REMOVE:membername
9583 =       /SUBSYSTEM:{BOOT_APPLICATION|CONSOLE|EFI_APPLICATION|
9585 =                   EFI_BOOT_SERVICE_DRIVER|EFI_ROM|EFI_RUNTIME_DRIVER|
9587 =                   NATIVE|POSIX|WINDOWS|WINDOWSCE}[,#[.##]]
9589 =       /VERBOSE
9591 =       /WX[:NO]
9592 =       /WX[:nnnn[,nnnn...]]
9600 = usage: DUMPBIN [options] [files]
9602 =    options:
9604 =       /ALL
9605 =       /ARCHIVEMEMBERS
9606 =       /CLRHEADER
9607 =       /DEPENDENTS
9608 =       /DIRECTIVES
9609 =       /DISASM[:{BYTES|NOBYTES|NOWIDE|WIDE}]
9610 =       /ERRORREPORT:{NONE|PROMPT|QUEUE|SEND}
9611 =       /EXPORTS
9612 =       /FPO
9613 =       /HEADERS
9614 =       /IMPORTS[:filename]
9615 =       /LINENUMBERS
9616 =       /LINKERMEMBER[:{1|2|4|8|16|32}]
9617 =       /LOADCONFIG
9618 =       /NOLOGO
9619 =       /NOPDB
9620 =       /NOSECTION:name
9621 =       /OUT:filename
9622 =       /OTHERARCHEXPORTS (requires /EXPORTS)
9623 =       /PDATA
9624 =       /PDBPATH[:VERBOSE]
9626 =       /RANGE:vaMin[,vaMax]
9628 =       /RAWDATA[:{NONE|1|2|4|8}[,#]]
9630 =       /RELOCATIONS
9632 =       /SECTION:name
9634 =       /SUMMARY
9636 =       /SYMBOLS
9638 =       /TLS
9640 =       /UNWINDINFO
9700 = usage: CVTCIL [options] files
9702 =    options:
9715 =       /ERRORREPORT:{NONE|PROMPT|QUEUE|SEND}
9717 =       /LINKREPRO:dir
9719 =       /LINKREPROTARGET:filename
9721 =       /MACHINE:{ARM|ARM64|ARM64EC|ARM64X|EBC|X64|X86}
9727 =       /NOLOGO
9729 =       /OUT:filename
9731 =       /VERBOSE
9733 =       /WX[:NO]
9734 =       /WX[:nnnn[,nnnn...]]
9800 = usage: PUSHTHUNKOBJ [options] file
9802 =    options:
9805 =       /ARCHIVEMEMBER:membername
9807 =       /BATCH
9809 =       /ERRORREPORT:{NONE|PROMPT|QUEUE|SEND}
9811 =       /NOLOGO
9815 =       /OUT:filename
9816 =       /PUSHTHUNK:thunkname
9817 =       /SYMBOL:symbolname
9819 =       /VERBOSE
9823 =       /WX[:NO]
9824 =       /WX[:nnnn[,nnnn...]]

[mspdbcmfui.dll]
1000 =  internal error
1002 =  internal error (PDB error code = %u)
1101 =  out of heap space
1102 =  failed to initialize DIA
1103 =  failed to locate TEMP directory (error code = %u)
1104 =  failed to find a good TEMP filename
1105 =  failed to overwrite '%s' (error code = %u)
1106 =  failed to open input PDB file for reading (PDB error code = %u)
1107 =  input PDB file is not generated by /DEBUG:fastlink
1108 =  must read and agree to the Data Collection Policy at %s before using /errorreport:send
1109 =  warning treated as error; the PDB file is intact
1110 =  specified output filename is too long (exceeding %u characters)
1200 =  missing OBJ file '%s'; proceeding as if the OBJ has no debug info
1201 =  missing compiler generated PDB file '%s'; proceeding as if all its referencing OBJs have no debug info
1500 =  Initialization in progress ...
1505 =  done.
1510 =  Done (total) modules: %u (%u)   %s %3u%% done.
1515 =     %s %3u%%
1520 =  Finishing up generating a full PDB ...
1525 =  Overwriting the input PDB ...
1530 =  [%s] The input PDB file %s generated by the linker with /DEBUG:fastlink.
1800 =  usage: MSPDBCMF [options] <PDB>
1802 =    options:
1806 =      /?                   print this message
1807 =      /CHECK               just report whether input is a fastlink PDB; no conversion will be done
1808 =      /ERRORREPORT:mode    error reporting; mode={none|prompt|queue|send}
1810 =      /NOLOGO              skip logo info
1811 =      /OUT:filename        output PDB file name (optional)
1812 =      /STATUS              report progress
1814 =      /WX[:no]             warning treated as error
1816 =      <pdb>                input PDB file that was produced by /DEBUG:fastlink and will be overwritten
1818 =                           unless a different file name is specified in option /OUT

[mspft140ui.dll]
100 = Prefast
1000 = A model already exists for the specified function name.
1001 = Cannot access a removed object
1002 = Cannot modify a read-only object.
1003 = The document format is invalid.
1004 = An external already exists for the specified External ID.
1005 = A preferred function already exists with the specified function name.
1006 = Function is already a member of the specified review group.
1250 = Unable to load plug-in '%1$ls'.
1251 = Unable to load models.
1252 = Circular or missing dependency between plugins: '%1$ws' requires GUID '%2$ws'.
1253 = Unable to load model file '%1$ls'.
1254 = Plugin version mismatch : '%1$ls' version '%2$d' doesn't match the version '%3$d' of the PREfast driver.
1255 = PCH data for plugin '%1$ls' has incorrect length.
1256 = '%1$ls': PCH must be both written and read.
1257 = '%1$ls': Initialization Failure.
1258 = Failed to save XML Log file '%1$ls'. %2$ls
1259 = A fatal error was issued by a plugin.
1260 = The plugins '%1$ls' and '%2$ls' share the same id. It is not supported to load the same plugin twice.
2001 = No prior declaration found.
2002 = Prior unannotated declaration at %1$ls(%2$d).
2003 = * (dereference)
2004 = The first declaration uses typedef '%1$ls' at line %2$ls(%3$d).
2005 = Note: There are several prototypes for this function. This warning compares the first with instance number %1$d.
2006 = Other annotations found with _Use_decl_annotations_.
2007 = it
2008 = return/function
2009 = no annotated parameters
2010 = trailing unannotated parameters
2011 = no annotations
2012 = XML parser error.
2013 = Symbol conflict.
2014 = _Param_(%1$d) (out of range)
2015 = _On_failure_ requires _Success_.
2016 = It may only be unconditional.
2017 = It may only be applied to the base/return.
2018 = It may only be in post context.
2020 = _When_ expression with complex condition in precondition. (This error is ignored for certain simple _When_ expressions.)
2021 = _At_ expression.
2022 = annotation parameter %1$d uses 'return' of void function.
2023 = annotation parameter %1$d references 'return' in precondition.
2024 = _When_ expression uses 'return' of void function.
2025 = Incorrect syntax for cast<>().
2026 = deref mismatch
2027 = The first user-provided annotation on this built-in function is at line %1$ls(%2$d).
2028 = 'SAL_begin' expected.
2029 = Getting properties failed.
2030 = 'SAL_end' expected.
2701 = Incorrect parameter type.
2702 = [Warning applies to %1$ls at %2$ls(%3$d)]
2703 = unresolved location
3001 = The NAME parameter is absent or an empty string.
3002 = Annotation applied to a parameter (applies to functions only).
3003 = omitted
3004 = none given
3005 = Applied to a return (preconditions do not apply to returns)
3006 = allocates or frees memory
3007 = aliases memory
3008 = See line %1$d for an earlier location where this can occur
3009 = this function
3010 = The current function appears to be an allocator. See the documentation for a special case.
3011 = predicate
3012 = _Param_(%1$d)
3013 = temporary value
3014 = the result value
3015 = unresolved value
3016 = none
3017 = UNDEFINED exec result
3018 = unknown value
3019 = indeterminate value
3020 = dirty value
3021 = Internal Error Value
3022 = Annotate this function with _Success_(return) if returning FALSE indicates failure.
3101 = . This allocation was for a compiler-generated temporary for '%1$ls' at line %2$d.
3201 = This indicates a potential severe error. Buffer underrun or overrun can occur when when this is reported for scanf-like functions.
5006 = Unknown
5021 = symbol
5022 = branch condition
5023 = chosen case
5024 = alias
5025 = unknown function
5041 = '%1$ls' is not initialized
5042 = '%1$ls' is NULL
5043 = Declare '%1$ls'
5044 = '%1$ls' is a byte quantity
5045 = '%1$ls' may be NULL
5046 = '%1$ls' is equal to %2$ls
5047 = '%1$ls' may equal %2$ls
5051 = Defect occurs when '%1$ls' is used
5052 = '%1$ls' is used, but may not have been initialized
5053 = '%1$ls' is dereferenced, but may still be NULL
5054 = Expression mixes element counts and byte quantities
5055 = The value of '%1$ls' is not consistent with the function's SAL annotation
5056 = '%1$ls' should not be %2$ls, because this is not consistent with the SAL annotation on '%3$ls'
5057 = '%1$ls' is an _Out_ parameter that may not have been assigned to
5061 = Assume switch ( '%1$ls' ) resolves to the default case
5062 = Assume switch ( '%1$ls' ) resolves to %2$ls
5063 = Program execution continues at the default case
5064 = Program execution continues at %1$ls
5065 = Enter this loop
5066 = Enter this loop, (assume '%1$ls')
5067 = Skip this loop
5068 = Skip this loop, (assume '%1$ls' is false)
5069 = Enter this branch
5070 = Enter this branch, (assume '%1$ls')
5071 = Skip this branch
5072 = Skip this branch, (assume '%1$ls' is false)
5073 = Go to %1$ls
5074 = Program execution continues on line %1$ls
5075 = Continue this loop
5076 = Continue this loop, (assume '%1$ls')
5077 = Exit this loop
5078 = Exit this loop, ('%1$ls' is false)
5081 = '%1$ls' is an array
5082 = '%1$ls' is an array of %2$ls elements
5083 = '%1$ls' is an array of %2$ls elements (%3$ls bytes)
5084 = '%1$ls' is a %2$ls byte array
5091 = Invalid read from '%1$ls', (readable range is %2$ls to %3$ls)
5092 = Invalid read from '%1$ls', (outside its readable range)
5093 = Invalid write to '%1$ls', (writable range is %2$ls to %3$ls)
5094 = Invalid write to '%1$ls', (outside its writable range)
5095 = Length argument to '%1$ls' should be less than the length of '%2$ls'
5096 = Length argument to this function should be number of remaining characters in the buffer
5101 = (alias) '%1$ls' receives the value of '%2$ls'
5102 = (alias) '%1$ls' receives a byte quantity from '%2$ls'
5121 = (alias) '%1$ls' receives the value of '%2$ls' (which is in bytes)
5122 = (alias) '%1$ls' receives the value of '%2$ls' (which is NULL)
5123 = (alias) '%1$ls' receives the value of '%2$ls' (which may be NULL)
5124 = (alias) '%1$ls' receives the value of '%2$ls' (which is %3$ls)
5125 = (alias) '%1$ls' receives the value of '%2$ls' (which may be %3$ls)
5140 = line %1$ls
5141 = '%1$ls' is an Input to '%2$ls'
5142 = '%1$ls' is an Input to '%2$ls' (declared on line %3$ls)
5143 = '%1$ls' is an Input to '%2$ls' (declared at %3$ls:%4$ls)
5144 = '%1$ls' is an Output from '%2$ls'
5145 = '%1$ls' is an Output from '%2$ls' (declared on line %3$ls)
5146 = '%1$ls' is an Output from '%2$ls' (declared at %3$ls:%4$ls)
5147 = '%1$ls' is an In/Out argument to '%2$ls'
5148 = '%1$ls' is an In/Out argument to '%2$ls' (declared on line %3$ls)
5149 = '%1$ls' is an In/Out argument to '%2$ls' (declared at %3$ls:%4$ls)
5150 = '%1$ls' receives the Return value from '%2$ls'
5151 = '%1$ls' receives the Return value from '%2$ls' (declared on line %3$ls)
5152 = '%1$ls' receives the Return value from '%2$ls' (declared at %3$ls:%4$ls)
5153 = '%1$ls' is an Input to and receives the Return value from '%2$ls'
5154 = '%1$ls' is an Input to and receives the Return value from '%2$ls' (declared on line %3$ls)
5155 = '%1$ls' is an Input to and receives the Return value from '%2$ls' (declared at %3$ls:%4$ls)
5171 = This expression may not zero-terminate '%1$ls'
5172 = This call to '%1$ls' may not zero-terminate '%2$ls'
5173 = '%1$ls' is Output from '%2$ls', which may not zero-terminate it
5174 = '%1$ls' should be zero-terminated but may not be
5175 = '%1$ls' is required to be zero-terminated by a SAL annotation on '%2$ls'
5181 = A SAL annotation on '%1$ls' is: %2$ls
6001 = Using uninitialized memory '%1$ls'.
6011 = Dereferencing NULL pointer '%1$ls'. %2$ls
6014 = Leaking memory '%1$ls'. %2$ls
6029 = Possible buffer overrun in call to '%1$ls'.
6030 = Use attribute [[noreturn]] over __declspec(noreturn) in function '%1$ls'.
6031 = Return value ignored: '%1$ls'.
6053 = The prior call to '%1$ls' might not zero-terminate string '%2$ls'.
6054 = String '%1$ls' might not be zero-terminated.
6059 = Misuse of length parameter in call to '%1$ls'.  Pass the number of remaining characters, not the buffer size of '%2$ls'.
6063 = Missing string argument to '%1$ls' that corresponds to conversion specifier '%2$d'.
6064 = Missing integer argument to '%1$ls' that corresponds to conversion specifier '%2$d'.
6065 = Missing pointer to '%3$ls' argument to '%1$ls' that corresponds to argument '%2$d'.
6066 = Non-pointer passed as _Param_(%1$d) when pointer is required in call to '%2$ls' Actual type: '%3$ls'.
6067 = _Param_(%1$d) in call to '%2$ls' must be the address of a string. Actual type: '%3$ls'.
6101 = Returning uninitialized memory '%1$ls'.
6200 = Index '%1$ls' is out of valid index range '%2$I64u' to '%3$I64d' for non-stack buffer '%4$ls'.
6201 = Index '%1$ls' is out of valid index range '%2$I64u' to '%3$I64d' for possibly stack allocated buffer '%4$ls'.
6211 = Leaking memory '%1$ls' due to an exception. %2$ls  Is a local catch block needed to clean up memory?
6214 = Cast between semantically different integer types.
6215 = Cast between semantically different integer types.
6216 = Compiler-inserted cast between semantically different integral types.
6217 = Implicit cast between semantically different integer types.  Consider using SUCCEEDED or FAILED macro instead.
6219 = Implicit cast between semantically different integer types.  Consider using SUCCEEDED or FAILED macro instead.
6220 = Implicit cast between semantically different integer types.  Consider using SUCCEEDED or FAILED macro instead.
6221 = Implicit cast between semantically different integer types.  Consider using SUCCEEDED or FAILED macros instead.
6225 = Implicit cast between semantically different integer types.  Consider using S_FALSE instead.
6226 = Implicit cast between semantically different integer types.  Consider using E_FAIL instead.
6230 = Implicit cast between semantically different integer types.
6235 = (<non-zero constant> || <expression>) is always a non-zero constant.
6236 = (<expression> || <non-zero constant>) is always a non-zero constant.
6237 = (<zero> && <expression>) is always zero.  <expression> is never evaluated and might have side effects.
6239 = (<non-zero constant> && <expression>) always evaluates to the result of <expression>:  Did you intend to use the bitwise-and (`&`) operator? If not, consider removing the redundant '<non-zero constant>' and the `&&` operator.
6240 = (<expression> && <non-zero constant>) always evaluates to the result of <expression>:  Did you intend to use the bitwise-and (`&`) operator? If not, consider removing the redundant '<non-zero constant>' and the `&&` operator.
6242 = A jump from this scope forces local unwind.  This incurs a performance penalty. Return outside the try's scope by using __leave.
6244 = Local declaration of '%1$ls' hides previous declaration at line '%2$d' of '%3$s'.
6246 = Local declaration of '%1$ls' hides declaration of the same name in outer scope. For additional information, see previous declaration at line '%2$d' of '%3$s'.
6248 = Setting a SECURITY_DESCRIPTOR's DACL to NULL will result in an unprotected object.
6250 = Calling '%1$ls' without the MEM_RELEASE flag might free memory but not address descriptors (VADs).  This causes address space leaks.
6255 = `_alloca` indicates failure by raising a stack overflow exception.  Consider using _malloca instead.
6258 = Using TerminateThread does not allow proper thread clean up.
6259 = Labeled code is unreachable.
6260 = sizeof * sizeof is usually wrong.  Did you intend to use a character count or a byte count?
6262 = Function uses '%1$I64u' bytes of stack.  Consider moving some data to heap.
6263 = Using `_alloca` in a loop.
6268 = Incorrect order of operations: (<TYPE1>)(<TYPE2>)x + y.  Parentheses in (<TYPE1>)((<TYPE2>)x + y) might be missing.
6269 = Possibly incorrect order of operations.
6270 = Missing float argument to '%1$ls': add a float argument corresponding to conversion specifier '%2$d'.
6271 = Extra argument passed to '%1$ls'.
6272 = Non-float passed as argument '%1$d' when float is required in call to '%2$ls' Actual type: '%3$ls'.
6273 = Non-integer passed as _Param_(%1$d) when an integer is required in call to '%2$ls' Actual type: '%3$ls'.
6274 = Non-character passed as _Param_(%1$d) when a character is required in call to '%2$ls' Actual type: '%3$ls'.
6276 = Cast between semantically different string types.  Use of an invalid string can lead to undefined behavior.
6277 = NULL application name with an unquoted path in call to '%1$ls': results in a security vulnerability if the path contains spaces.
6278 = '%1$ls' is allocated with array new [], but deleted with scalar delete.  Destructors will not be called.
6279 = '%1$ls' is allocated with scalar new, but deleted with array delete [].
6280 = '%1$ls' is allocated with '%2$ls', but deleted with '%3$ls'.
6281 = Incorrect order of operations.
6282 = Incorrect operator.
6283 = '%1$ls' is allocated with array new [], but deleted with scalar delete.
6284 = Object passed as _Param_(%1$d) when a string is required in call to '%2$ls' Actual type: '%3$ls'.
6285 = (<non-zero constant> || <non-zero constant>) is always a non-zero constant.  Did you intend to use the bitwise-and operator?
6286 = (<non-zero constant> || <expression>) is always a non-zero constant.  <expression> is never evaluated and might have side effects.
6287 = Redundant code.
6288 = Incorrect operator.  Did you intend to use || instead?
6289 = Incorrect operator.  Did you intend to use && instead?
6290 = Bitwise operation on logical result.  Use && or (!(x & y)) instead.
6291 = Bitwise operation on logical result.  Use || or (!(x | y)) instead.
6292 = Ill-defined for-loop.
6293 = Ill-defined for-loop.
6294 = Ill-defined for-loop.  Loop body not executed.
6295 = Ill-defined for-loop.  Loop executes infinitely.
6296 = Ill-defined for-loop.  Loop body only executed once.
6297 = Arithmetic overflow.  Results might not be an expected value.
6298 = Argument '%1$d': using a read-only string as a writable string argument.  This will attempt to write into static read-only memory and cause random crashes.
6299 = Explicitly comparing a bit field to a Boolean type will yield unexpected results.
6302 = Format string mismatch.
6303 = Format string mismatch.
6305 = Potential mismatch between sizeof and countof quantities. Use sizeof() to scale byte sizes.
6306 = Incorrect call to '%1$ls': consider using '%2$ls' which accepts a va_list as an argument.
6308 = 'realloc' might return null pointer: assigning null pointer to '%1$ls', which is passed as an argument to 'realloc', will cause the original memory block to be leaked.
6310 = Illegal constant in exception filter can cause unexpected behavior.
6312 = Possible infinite loop.  Execution restarts in the protected block.
6313 = Incorrect operator.  Use an equality test to check for zero-valued flags.
6314 = Incorrect order of operations.  Add parentheses to clarify intent.
6315 = Incorrect order of operations.  Add parentheses to clarify intent.
6316 = Incorrect operator.  Use bitwise-and to determine whether bits are set.
6317 = Incorrect operator:  logical-not (`!`) is not interchangeable with ones-complement (`~`).
6318 = Ill-defined __try/__except.  The code in the exception handler block is not executed.
6319 = Use of the comma-operator in a tested expression causes the left argument to be ignored when it has no side-effects.
6320 = Exception-filter expression is the constant EXCEPTION_EXECUTE_HANDLER. This might mask exceptions that were not intended to be handled.
6322 = Empty _except block.
6323 = Use of arithmetic operator on Boolean type(s).
6324 = Potential incorrect use of '%1$ls': did you intend to use '%2$ls'?
6326 = Potential comparison of a constant with another constant.
6328 = Size mismatch: '%1$ls' passed as _Param_(%2$d) when '%3$ls' is required in call to '%4$ls'. %5$ls
6329 = Return value for a call to '%1$ls' should not be checked against '%2$d'.
6330 = '%1$ls' passed as _Param_(%2$d) when '%3$ls' is required in call to '%4$ls'.
6331 = Invalid parameter.  This causes the call to fail.
6332 = Invalid parameter.  This causes the call to fail.
6333 = Invalid parameter.  This causes the call to fail.
6334 = sizeof operator applied to an expression with an operator might yield unexpected results.
6335 = Leaking process information handle '%1$ls'.
6336 = Arithmetic operator has precedence over question operator, use parentheses to clarify intent.
6340 = Mismatch on sign: '%1$ls' passed as _Param_(%2$d) when some %3$ls type is required in call to '%4$ls'.
6381 = Shutdown API '%1$ls' requires a valid dwReason or lpMessage.
6383 = Buffer overrun due to conversion of an element count into a byte count.
6384 = Dividing sizeof a pointer by another value.
6385 = Reading invalid data from '%1$ls'.
6386 = Buffer overrun while writing to '%1$ls'.
6387 = '%1$ls' could be '%2$ls'.
6388 = '%1$ls' might not be '%2$ls'.
6389 = Move '%1$ls' to anonymous namespace or put a forward declaration in a common header included in this file.
6390 = According to the C++ standard, the value of 'this' is never null; some compilers will optimize this check out.
6391 = Avoid declaring multiple variables in one statement.
6400 = Using '%1$ls' to perform a case-insensitive compare to constant string '%2$ls'.  Yields unexpected results in non-English locales.
6401 = Using '%1$ls' in a default locale to perform a case-insensitive compare to constant string '%2$ls'.  Yields unexpected results in non-English locales.
6411 = Potentially reading invalid data from '%1$ls'.
6412 = Potential buffer overrun while writing to '%1$ls'.
6500 = Invalid annotation: value for '%1$ls' property is invalid.
6501 = Annotation conflict: '%1$ls' property conflicts with previously specified property.
6503 = Invalid annotation: references and arrays may not be marked Null=Yes or Null=Maybe: Function '%1$ls' %2$ls'.
6504 = Invalid annotation: 'Null' property may only be used on values of pointer, pointer-to-member, array, or reference type: Function '%1$ls' %2$ls. Actual type '%3$ls'.
6505 = Invalid annotation: 'MustCheck' property may not be used on values of void type: Function '%1$ls' %2$ls'.
6506 = Invalid annotation: '%1$ls' property (with element count) may only be used on values of pointer, array, or reference type: Function '%2$ls' %3$ls. Observed type: '%4$ls'.
6508 = Invalid annotation: annotation property '%1$ls' is not allowed on const values: '%2$ls'.
6509 = Invalid annotation: 'return' cannot be referenced in some contexts: Function '%1$ls' '%2$ls' annotation '%3$ls': %4$ls
6510 = Invalid annotation: 'NullTerminated' property may only be used on buffers whose elements are of integral or pointer type: Function '%1$ls' %2$ls.
6511 = Invalid annotation: 'MustCheck' property must be Yes or No.
6513 = Invalid annotation: 'ElementSize' requires additional size properties.
6514 = Invalid annotation: value of the '%1$ls' property exceeds the size of the array.
6515 = Invalid annotation: '%1$ls' property (with byte count) may only be used on values of pointer type: Function '%2$ls' %3$ls. Observed type: '%4$ls'.
6516 = Invalid annotation: no properties specified for %1$ls attribute.
6517 = Invalid annotation: '%1$ls' property may not be specified on buffers that are not readable: '%2$ls'.
6518 = Invalid annotation: '%1$ls' property may not be specified as a precondition on buffers that are not writable: '%2$ls'.
6522 = Invalid size specification: expression must be of integral type: annotation '%1$ls' on function '%2$ls' %3$ls
6525 = Invalid size specification: property value might not be valid.
6530 = Unrecognized format string style '%1$ls': Function '%2$ls' %3$ls.
6540 = The use of attribute annotations on this function will invalidate all of its existing __declspec annotations.
6551 = Invalid size specification: expression not parsable.
6552 = Invalid Deref= or Notref=: expression not parsable.
6553 = The annotation for function '%1$ls' on %2$ls does not apply to a value type.
6701 = The value is not a valid Yes/No/Maybe value: '%1$ls'.
6702 = The value is not a string value: '%1$ls'.
6703 = The value is not a number: '%1$ls'.
6704 = Unexpected Annotation Expression Error: %1$ls [%2$ls].
6705 = Annotation error expected %1$d arguments for annotation %2$ls found %3$d.
6706 = Unexpected Annotation Error for annotation %1$ls: %2$ls
6707 = Unexpected Model Error: %1$ls
6800 = The ruleset file specified through /analyze:ruleset or /analyze:external:ruleset option could not be parsed successfully and will be ignored.
6801 = /d1initall flags do not have any effect on Code Analysis.
6993 = Code analysis ignores OpenMP constructs; analyzing single-threaded code.
6997 = Annotations at this location are meaningless and will be ignored.
26433 = Function '%1$ls' should be marked with 'override' (c.128).
26434 = Method '%1$ls' hides a non-virtual method '%2$ls' (c.128).
26435 = Function '%1$ls' should specify exactly one of 'virtual', 'override', or 'final' (c.128).
26456 = Operator '%1$ls' hides a non-virtual operator '%2$ls' (c.128).
26812 = The enum type '%1$s' is unscoped. Prefer 'enum class' over 'enum' (Enum.3).
28001 = Error annotation: %1$ls.
28002 = Error annotation: %1$ls.
28003 = Error annotation: %1$ls.
28004 = Error annotation: %1$ls.
28011 = Consider using '%1$ls' instead of '%2$ls'. Reason: %3$ls
28012 = Consider using '%1$ls' instead of '%2$ls'. Reason: %3$ls
28013 = Consider using '%1$ls' instead of '%2$ls'. Reason: %3$ls
28014 = Consider using '%1$ls' instead of '%2$ls'. Reason: %3$ls
28020 = The expression '%1$ls' is not true at this call.
28021 = The parameter '%1$ls' being annotated with '%2$ls' must be a pointer.
28022 = The function class(es) '%1$ls' on this function do not match the function class(es) '%2$ls' on the typedef used to define it.
28023 = The function being assigned or passed should have a _Function_class_ annotation for at least one of the class(es) in: '%1$ls' Frequently, when only one function class is in use, this is caused by not declaring a callback to be of the appropriate type. Preceding the first declaration of the function by '<function class name> %2$ls' may fix this. <function class name> should be one of the function classes listed above.
28024 = The function pointer being assigned to is annotated with the function class '%1$ls', which is not contained in the function class(es) '%2$ls'.
28039 = The type of actual parameter '%1$ls' should exactly match the type '%2$ls'.
28051 = Inconsistent annotation for method '%1$ls': this instance has %2$ls. See %3$ls(%4$d). %5$ls
28052 = Inconsistent annotation for '%1$ls': this instance has %2$ls. See %3$ls(%4$d). %5$ls
28053 = Inconsistent annotation for method '%1$ls': this instance has %2$ls. See %3$ls(%4$d). %5$ls
28103 = Leaking the %1$ls stored in '%2$ls'.
28104 = The %1$ls that should have been acquired before function exit was not acquired.
28105 = Leaking %1$ls stored in '%2$ls' due to an exception.  Is a local catch block needed to release the resource?
28106 = The variable '%1$ls' already holds a %2$ls
28107 = The %1$ls '%2$ls' must be held when calling '%3$ls'.
28108 = The variable '%1$ls' holds a %2$ls when it should hold a %3$ls.
28109 = The %1$ls '%2$ls' cannot be held at the time '%3$ls' is called.
28112 = A variable (%1$ls) which is accessed via an Interlocked function must always be accessed via an Interlocked function. See line %2$ld.
28113 = Accessing a local variable %1$ls via an Interlocked function.
28125 = The function '%1$ls' must be called from within a try/except block.
28137 = The variable argument '%1$ls' should instead be a (literal) constant.
28138 = The constant argument '%1$ls' should instead be variable.
28159 = Consider using '%1$ls' instead of '%2$ls'. Reason: %3$ls
28160 = Error annotation: %1$ls.
28163 = The function '%1$ls' should never be called from within a try/except block.
28164 = The argument '%1$ls' is being passed to a function that expects a pointer to an object (not a pointer to a pointer).
28182 = Dereferencing NULL pointer. '%1$ls' contains the same NULL value as '%2$ls' did. %3$ls
28183 = '%1$ls' could be '%2$ls', and is a copy of the value found in '%3$ls'.
28191 = At least one resource of the class '%1$ls' must be held when this function is called.
28192 = No resource of the class '%1$ls' can be held when this function is called. '%2$ls' is currently held.
28193 = '%1$ls' holds a value that must be examined.
28194 = The function '%1$ls' was declared as aliasing the value in '%2$ls' and exited without doing so.
28195 = The function '%1$ls' was declared as acquiring memory in '%2$ls' and exited without doing so.
28196 = The requirement that '%1$ls' is not satisfied. (The expression does not evaluate to true.)
28197 = Possibly leaking memory '%1$ls'. %2$ls
28198 = Possibly leaking memory '%1$ls' due to an exception. %2$ls  Is a local catch block needed to clean up memory?
28199 = Using possibly uninitialized memory '%1$ls'.
28200 = Function %1$ls -- DEBUG: %2$ls '%3$ls' '%4$ls'.
28201 = Annotation in model file %1$ls applies to %2$ls at %3$ls: %4$ls.
28202 = Illegal reference to non-static member '%1$ls'.
28203 = Ambiguous reference to class member. Could be '%1$ls' or '%2$ls'.
28204 = '%1$ls' has an override at `%2$ls(%3$d)` and only the override is annotated for %4$ls: when an override is annotated, the base (this function) should be similarly annotated.
28205 = '%1$ls' : _Success_ or _On_failure_ used in an illegal context: %2$ls
28206 = '%1$ls' : left operand points to a struct, use '->'.
28207 = '%1$ls' : left operand is a struct, use '.'.
28208 = Function %1$ls was previously defined with a different parameter list at %2$ls(%3$d). Some analysis tools will yield incorrect results.
28209 = The declaration for symbol %1$ls has a conflicting declaration at %2$ls.
28211 = Static context name expected for SAL_context, found '%1$ls'.
28212 = Pointer expression expected for annotation '%1$ls', parameter %2$d, found '%3$ls'.
28213 = The _Use_decl_annotations_ annotation must be used to reference, without modification, a prior declaration. %1$ls
28214 = Attribute parameter names must be p1...p9.
28215 = The typefix '%1$ls' cannot be applied to a parameter that already has a typefix.
28216 = The checkReturn annotation only applies to postconditions for function '%1$ls' %2$ls.
28217 = For function '%1$ls' %2$ls, the number of parameters to annotation '%3$ls' does not match that found at %4$ls(%5$d).
28218 = For function '%1$ls' %2$ls, for annotation '%3$ls' the annotation's parameter %4$d does not match that found at %5$ls(%6$d).
28219 = Member of '%1$ls' expected for annotation '%2$ls', parameter %3$d, found '%4$ls'.
28220 = Integer expression expected for annotation '%1$ls', parameter %2$d, found '%3$ls'.
28221 = String expression expected for annotation '%1$ls', parameter %2$d, found '%3$ls'.
28222 = __yes, __no, or __maybe expected for annotation '%1$ls', parameter %2$d, found '%3$ls'.
28223 = Token/identifier expected for annotation '%1$ls', parameter %2$d, found '%3$ls'.
28224 = Annotation '%1$ls' requires parameters.
28225 = Annotation '%1$ls' requires %2$d parameters, found %3$d.
28226 = Annotation '%1$ls' cannot be more than one of Annotation, Qualifier or Intrinsic (in current declaration).
28227 = Annotation '%1$ls' cannot be more than one of Annotation, Qualifier or Intrinsic (see prior declaration).
28228 = Annotation '%1$ls' parameter %2$d: cannot use type '%3$ls' in annotations.
28229 = Annotation '%1$ls' does not support parameters.
28230 = The type of '%1$ls' has no member '%2$ls'.
28231 = '%1$ls' is not an array.
28232 = Pre, post, or deref not applied to any annotation.
28233 = Pre, post, or deref applied to a block.
28234 = _At_ expression does not apply to current function.
28235 = The function '%1$ls' cannot stand alone as an annotation.
28236 = The annotation '%1$ls' cannot be used in an expression.
28237 = '%1$ls': the annotation '%2$ls' on %3$ls is no longer supported.
28238 = '%1$ls': the annotation '%2$ls' on %3$ls has more than one of value, stringValue, and longValue. Use paramn=xxx.
28239 = '%1$ls': the annotation '%2$ls' on %3$ls has both value, stringValue, or longValue; and paramn=xxx. Use only paramn=xxx.
28240 = '%1$ls': the annotation '%2$ls' on %3$ls has param2 but no param1.
28241 = The annotation '%1$ls' for '%2$ls' on '%3$ls' is not recognized.
28242 = The IsMinSize annotation for function '%1$ls' on %2$ls has a multiplier inconsistent with the element size.
28243 = The annotation for function '%1$ls' on %2$ls requires more dereferences than the actual type annotated allows.
28244 = The annotation for function '%1$ls' %2$ls has an unparseable parameter/external annotation.
28245 = The annotation for function '%1$ls' annotates 'this' on a non-member-function.
28246 = The annotation for function '%1$ls', parameter '%2$ls' does not match the type of the parameter.
28247 = Model file annotation for function '%1$ls': annotation on %2$ls/%3$ls, '%4$ls' duplicates header file annotation '%5$ls'. Remove the duplicated annotations from the model file. (Header: %6$ls(%7$d).)
28248 = Model file annotation for function '%1$ls' duplicates existing model file definition. Remove the duplicated annotations from the model file.
28250 = Inconsistent annotation for '%1$ls': the prior instance has %2$ls. See %3$ls(%4$d). %5$ls
28251 = Inconsistent annotation for '%1$ls': this instance has %2$ls. See %3$ls(%4$d). %5$ls
28252 = Inconsistent annotation for '%1$ls': %2$ls has '%3$ls' on the prior instance. See %4$ls(%5$d). %6$ls
28253 = Inconsistent annotation for '%1$ls': %2$ls has '%3$ls' on this instance. See %4$ls(%5$d). %6$ls
28254 = dynamic_cast<>() is not supported in annotations.
28262 = A syntax error in the annotation was found in function %1$ls, for annotation '%2$ls': %3$ls
28263 = A syntax error in a conditional annotation was found for Intrinsic '%1$ls': %2$ls
28267 = A syntax error in the annotations was found for function %1$ls, for annotation '%2$ls': %3$ls.
28272 = The annotation for function %1$ls, parameter '%2$ls' when examining '%3$ls' is inconsistent with the function declaration.
28273 = For function %1$ls, the %2$ls '%3$ls' is inconsistent with the function declaration.
28275 = The parameter to _Macro_value_ is null.
28276 = Unable to find any macros -- internal error.
28278 = Function %1$ls appears with no prototype in scope.
28279 = For symbol '%1$ls', a 'begin' was found without a matching 'end'.
28280 = For symbol '%1$ls', an 'end' was found without a matching 'begin'.
28281 = For symbol '%1$ls' parameter '%2$ls', 'Invalid Check' value not a number or not in post context.
28282 = Format Strings must be in preconditions: Function '%1$ls' %2$ls.
28283 = For symbol '%1$ls', the specified size specification is not yet supported.
28284 = For symbol '%1$ls', Predicates are currently not supported for non-function symbols.
28285 = For function '%1$ls' '%2$ls' syntax error in '%3$ls' near '%4$ls'.
28286 = For function '%1$ls', error near the end of '%2$ls'.
28287 = For function '%1$ls', syntax Error in _At_() annotation (unrecognized parameter name).
28288 = For function '%1$ls', syntax Error in _At_() annotation (invalid parameter name).
28289 = For function '%1$ls' %2$ls: ReadableTo or WritableTo did not have a limit-spec as a parameter.
28290 = The annotation for function '%1$ls' contains more Externals than the actual number of parameters.
28291 = Post null/notnull at dereference level 0 of a parameter that is something other than a single-level pointer: %1$ls %2$ls. This may indicate a mis-annotation.
28292 = The annotations for function '%1$ls' '%2$ls' have more than one MinSize annotation.
28293 = The annotations for function '%1$ls' '%2$ls' have an unknown MinSize type.
28294 = The annotations for function '%1$ls' at slot %2$d have a bad parameter index.
28295 = The annotations for function '%1$ls' at slot %2$ls have unknown type.
28296 = Unexpected error while parsing XML model for function '%1$ls'. %2$ls
28297 = Model validation error: %1$ls.
28298 = Unexpected error while parsing Metadata model for function '%1$ls'. %2$ls
28299 = Unexpected data while parsing Metadata model for function '%1$ls'. %2$ls
28300 = '%1$ls': Expression operands of incompatible types for operator '%2$ls'. Types: %3$ls.
28301 = No annotations for first declaration of '%1$ls'.%2$ls See %3$ls(%4$d). %5$ls
28302 = For C++ reference-parameter '%1$ls', an extra _Deref_ operator was found on %2$ls.
28303 = For C++ reference-parameter '%1$ls', an ambiguous _Deref_ operator was found on %2$ls.
28304 = For C++ reference-parameter '%1$ls', an improperly placed _Notref_ operator was found applied to %2$ls.
28305 = An error while parsing '%1$ls' was discovered. %2$ls
28306 = The '%1$ls' annotation on '%2$ls' is obsolescent: use _String_length_ with the appropriate SAL2 annotation instead.
28307 = A '%1$ls' annotation was used with an expression other than symbol [+- <constant>] on '%2$ls'.
28308 = The format list argument position specified by the annotation is incorrect.
28309 = '%1$ls': Annotation operands must be integer/enum/pointer types. Void operands and C++ overloaded operators are not supported. Floats are approximated as integers. Types: %2$ls.
28310 = The '%1$ls' annotation on %2$ls %3$ls has no SAL version.
28311 = The '%1$ls' annotation on %2$ls %3$ls is an obsolescent version of SAL.
28312 = The '%1$ls' annotation on the repeated declaration of %2$ls %3$ls is an obsolescent version of SAL.
28313 = Analysis will not proceed past this point because of annotation evaluation. The annotation expression %1$ls cannot be true under any assumptions at this point in the program.
28350 = The annotation '%1$ls' describes a situation that is not conditionally applicable.
28351 = The annotation '%1$ls' describes where a dynamic value (a variable) cannot be used in the condition.
28500 = Details for %1$d %2$ls %3$ls %4$d %5$ls(%6$d) %7$ls: %8$ls
28504 = Declaration for "%1$ls" uses _Use_decl_annotations_.

[nmakeui.dll]
1 = file %s doesn't exist
2 = '%s' is up-to-date
3 = ** %s newer than %s
4 = %s %s %*c%s
5 = 	touch %s
6 = %*c%s target does not exist
7 = 
	INFERENCE RULES:
	
8 = 
	MACROS:
	
9 = 
	TARGETS:
	
10 = 
		commands:	
11 = 
		flags:	
12 = 
		dependents:	
13 = %s
	
14 = %13s = %s
	
15 = . NOTE: Attempted to execute the command via cmd, Reason: 
16 = Command contained one of the following characters: <>|&%
17 = Command used a pipe or multiple redirects
18 = Executable was not found on the PATH
19 = Executable was not a valid Win32 application
20 = fatal error
21 = error
22 = warning
23 = Stop.
	
24 = Microsoft (R) Program Maintenance Utility Version %s
25 = Copyright (C) Microsoft Corporation.  All rights reserved.
	
100 = Usage:  %s @commandfile
101 = 	%s [options] [/f makefile] [/x stderrfile] [macrodefs] [targets]
	
102 = Options:
	
103 = /A Build all evaluated targets
104 = /B Build if time stamps are equal
105 = /C Suppress output messages
106 = /D Display build information
107 = /E Override env-var macros
108 = /ERRORREPORT:{NONE|PROMPT|QUEUE|SEND} Report errors to Microsoft
109 = /G Display !include filenames
110 = /HELP Display brief usage message
111 = /I Ignore exit codes from commands
112 = /K Build unrelated targets on error
113 = /M Ignore extended/expanded memory
114 = /N Display commands but do not execute
115 = /NOLOGO Suppress copyright message
116 = /P Display NMAKE information
117 = /Q Check time stamps but do not build
118 = /R Ignore predefined rules/macros
119 = /S Suppress executed-commands display
120 = /T Change time stamps but do not build
121 = /V Inherit macros during recursion
122 = /U Dump inline files
123 = /Y Disable batch-mode
124 = /W Display full command of any failed child process
125 = /? Display brief usage message
	
1000 = syntax error : ')' missing in macro invocation
1001 = syntax error : illegal character '%c' in macro
1002 = syntax error : invalid macro invocation '$'
1003 = syntax error : '=' missing in macro
1004 = syntax error : macro name missing
1005 = syntax error : text must follow ':' in macro
1006 = syntax error : missing closing double quotation mark
1007 = double quotation mark not allowed in name
1017 = unknown directive '!%s'
1018 = directive and/or expression part missing
1019 = too many nested !IF blocks
1020 = end-of-file found before next directive
1021 = syntax error : !ELSE unexpected
1022 = missing terminating character for string/program invocation : '%c'
1023 = syntax error in expression
1024 = illegal argument to !CMDSWITCHES
1025 = syntax error : !ENDIF unexpected
1031 = filename missing (or macro is null)
1033 = syntax error : '%s' unexpected
1034 = syntax error : separator missing
1035 = syntax error : expected ':' or '=' separator
1036 = syntax error : too many names to left of '='
1037 = syntax error : target name missing
1038 = internal error : lexer
1039 = internal error : parser
1040 = internal error : macro expansion
1041 = internal error : target building
1042 = internal error : expression stack overflow
1043 = internal error : temp file limit exceeded
1045 = spawn failed for '%s' : 0x%x %s
1046 = internal error : out of search handles
1047 = argument before ')' expands to nothing
1048 = cannot write to file '%s'
1049 = macro or inline file too long (maximum : 64K)
1050 = %s
1051 = out of memory
1052 = file '%s' not found
1053 = file '%s' unreadable
1054 = cannot create inline file '%s'
1055 = out of environment space
1056 = cannot find command processor
1057 = cannot delete temporary file '%s'
1058 = terminated by user
1059 = syntax error : '}' missing in dependent
1060 = unable to close file : '%s'
1061 = /F option requires a filename
1062 = missing filename with /X option
1063 = missing macro name before '='
1064 = MAKEFILE not found and no target specified
1065 = invalid option '%c'
1069 = no match found for wildcard '%s'
1070 = cycle in macro definition '%s'
1071 = cycle in dependency tree for target '%s'
1072 = cycle in include files : '%s'
1073 = don't know how to make '%s'
1076 = name too long
1077 = '%s' : return code '0x%x'
1078 = constant overflow at '%s'
1079 = illegal expression : divide by zero
1080 = operator and/or operand usage illegal
1081 = '%s' : program not found
1082 = '%s' : cannot execute command; out of memory
1083 = target macro '%s' expands to nothing
1084 = cannot create temporary file '%s'
1085 = cannot mix implicit and explicit rules
1086 = inference rule cannot have dependents
1087 = cannot have : and :: dependents for same target
1088 = invalid separator '::' on inference rule
1089 = cannot have build commands for directive '%s'
1090 = cannot have dependents for directive '%s'
1092 = too many names in rule
1093 = cannot mix dot directives
1094 = syntax error : only KEEP, NOKEEP, or UNICODE allowed here
1095 = expanded command line '%s' too long%s%s
1096 = cannot open inline file '%s'
1097 = filename-parts syntax requires dependent
1098 = illegal filename-parts syntax in '%s'
1100 = macro '%s' is illegal in the context of batch rule '%s'
1102 = Parameter %d for text function '%s' can not be empty
1103 = Text function '%s' requires %d parameter(s), but %d were found
1104 = Unknown text function '%s'
2001 = no more file handles (too many files open)
4001 = command file can be invoked only from command line
4002 = resetting value of special macro '%s'
4004 = too many rules for target '%s'
4005 = ignoring rule '%s' (extension not in .SUFFIXES)
4006 = special macro undefined : '%s'
4007 = filename '%s' too long; truncating to 8.3
4008 = removed target '%s'
4010 = '%s' : build failed; /K specified, continuing ...
4011 = '%s' : not all dependents available; target not built
4012 = '%s' : NTVDM timeout in retrieving return code, assuming command was successful
4013 = '%s' : NTVDM timeout in retrieving return code, rerunning command
4014 = must read and agree to the Data Collection Policy at %s before using /errorreport:send

[pgort140ui.dll]
10000 = IbTraceAllocate: Trace allocation size exceeded
	
10001 = IrtClientAbort
10002 = Pogo Runtime: Invalid callback
	
10003 = Could not read base filename from object.
10004 = Windows 95/98 are not supported by the Pogo runtime
	
10005 = PCIAllocate: VirtualAlloc failed
	
10006 = PCILookupPGCHdr: CLIENTINFO not found
	
10007 = Pogo Runtime GenerateWin32Name: Prefix too long
10008 = FOpenMemoryRegion: OpenFileMapping failed
	
10009 = FOpenMemoryRegion: MapViewOfFileEx failed
	
10010 = CreateMemoryRegion: SystemTimeToFileTime failed
	
10011 = CreateMemoryRegion: CreateFileMapping failed
	
10012 = CreateMemoryRegion: MapViewOfFileEx failed
	
10013 = CreateMemoryRegion: VirtualAlloc (1) failed
	
10014 = CreateMemoryRegion: VirtualAlloc (2) failed
	
10015 = CreateMemoryRegion: VirtualAlloc (3) failed
	
10016 = Pogo runtime: binary pathname too long
10017 = IrtClientInitShared: CreateMutex failed
	
10018 = IrtClientInitShared: WaitForSingleObjectEx failed
	
10019 = IrtClientInitShared: ReleaseMutex failed
	
10020 = IrtClientInitPrivate: TlsAlloc failed
	
10021 = IrtPogoInit: GetModuleFileName failed
	
10022 = IrtPogoInit: GetModuleFileName result too long
	
10023 = Pogo Runtime BuildPath: path too long
10024 = Pogo Runtime Create Paths: Base PGC file name too long
10025 = Pogo Runtime Create Paths: VCPROFILE_PATH environment variable too long
10026 = Pogo Runtime Create Paths: GetModuleFileName failed
10027 = Pogo Runtime Create Paths: GetModuleFileName too long
10028 = Unable to write PGC file
10029 = WritePGC: WriteFile failed
	
10030 = WritePGC: FlushFileBuffers failed
	
10031 = WritePGC: SetFilePointer failed
	
10032 = WritePGC: CloseHandle(hFile) failed
	
10033 = Could not finish phase, invalid CLIENTINFO
10034 = Restart(): SystemTimeToFileTime() failed
10035 = Could not convert sweep phase name to Unicode.
10036 = IrtClientUnload: WaitForSingleObjectEx(pCI->hMutex) failed
	
10037 = PGORT couldn't SetEvent
	
10038 = IrtClientUnload: UnmapViewOfFile failed
	
10039 = IrtClientUnload: CloseHandle(pCI->hFileMapping) failed
	
10040 = IrtClientUnload: TlsFree failed
	
10041 = IrtClientUnload: ReleaseMutex failed
	
10042 = IrtClientUnload: CloseHandle(pCI->hMutex) failed
	
10043 = IrtUnload: VirtualFree failed
10044 = IrtClientAbort
10045 = PCIAllocate couldn't get memory for CLIENTINFO structure
	
10046 = PCIAllocate got called again (should never happen in kernel mode)
	
10047 = CreateMemoryRegion: Needed region too big
	
10048 = CreateMemoryRegion: ExAllocatePoolWithTag failed
	
10049 = PGORT: IrtPogoInit (%s)
	
10050 = Pogo tried to initialize twice
10051 = PGORT: IrtPogoInit complete
	
10052 = UnmapViewOfFile failed when growing data file
	
10053 = CloseHandle failed when growing data file
	
10054 = OpenFileMapping failed when growing data file
	
10055 = MapViewOfFileEx failed when growing data file
	
10056 = IbPGCGrowAllocation: Out of memory
	
10057 = IbPGCGrowAllocation: VirtualAlloc failed
	
10058 = IbPGCGrowAllocation: PGC size exceeded
	
10059 = Pogo Runtime: Invalid header signature
10060 = Pogo Runtime: Invalid header version
10061 = Directory for PGC file does not exist
10062 = InitializePGCHdr: Failed to create a PGC Id
	
10063 = InitializePGCHdr(0): Exceeded DWORD allocation size
	
10064 = InitializePGCHdr(1): Exceeded DWORD allocation size
	
10065 = InitializePGCHdr(2): Exceeded DWORD allocation size
	
10066 = InitializePGCHdr(3): Exceeded DWORD allocation size
	
10067 = InitializePGCHdr(4): Exceeded DWORD allocation size
	
10068 = InitializePGCHdr(5): Exceeded DWORD allocation size
	
10069 = InitializePGCHdr(6): Exceeded DWORD allocation size
	
10070 = InitializePGCHdr(9): Exceeded DWORD allocation size
	
10071 = InitializePGCHdr(10): Exceeded DWORD allocation size
	
10072 = InitializePGCHdr(11): Exceeded DWORD allocation size
	
10073 = IrtClientSetupCallbacks: Heap Code size exceeds CbVMPageSize()
	
10074 = IrtClientSetupCallbacks: FlushInstructionCache failed
	
10075 = IrtClientSetupCallbacks: Heap Code size exceeds CALLBACK_BUFFER_SIZE
	
10076 = IrtClientSetupCallbacks: ZwFlushInstructionCache failed
	
10077 = Callbacks overflowed callback buffer
	
10078 = CreateMemoryRegion: File mapping '%s' already exists
	
10080 = Out of profile memory
10081 = CreateMemoryRegion: PogoBaseFilename (%s) clashes with another driver on this system
	
10082 = Maximum memory specified for .pgc files is less than the minimum memory specified.
	

[pgoui.dll]
1 = An unexpected internal error was detected in source file '%1', line %2!d!.
2 = Out of memory.  Please increase the size of the page file.
3 = Unhandled exception: %1.
24 = The profile database '%1' has an incompatible format.
61 = The option '/%1' requires an argument.
62 = The option '/%1' must be provided.
63 = Unrecognized option '%1'.
65 = The argument '%2!ld!' provided for the option '/%1' is invalid.
66 = The option '/%2' conflicts with the option '/%1'.
67 = The option '%1' was specified more than once, last occurrence was used.
68 = The option '/%1' must be used with '/%2'.
69 = Please specify a .PGD file.
70 = Please specify exactly one .PGD file.
71 = '/%1' must be combined with an output option.
72 = Cannot get value of environment variable '%1'.
73 = Invalid warning number '%1'.
74 = Too many arguments (from command line and/or environment variables '%1' and '_%1_'), only the first %2!d! arguments will be used.
81 = Unable to open file '%1' for reading.
87 = Unable to open file '%1' for writing.
90 = Read I/O operation on file '%1' failed.
91 = Write I/O operation on file '%1' failed.
92 = Unable to get full path name for '%1'.
94 = Not enough virtual memory to map file %1.  Please increase the pagefile size.
95 = The specified filename '%1' does not appear to be a .PGD or .PGC file.
96 = Cannot determine windows system directory.
165 = Reading '%1' : '%2'.
166 = Missing or invalid stream '%1''%2' in '%3'.
167 = There was a problem updating .PGD file '%1'.
168 = Couldn't open func %s in module %s
	
169 = Couldn't open module %s in PGD file %s
	
181 = The .PGC file '%1' has already been merged (added) into the profile database '%2'.  Ignored.
182 = The .PGC file '%1' has already been merged (subtracted) from the profile database '%2'.
187 = The .PGC file '%1' is not valid.
188 = No .PGC files matching '%1' were found.
189 = PDB file for the PGI build was not found.
200 = .PGD file '%1' was generated for a different machine type than image.
201 = No machine specified, defaulting to '%1'.
202 = Unknown machine '%1' specified.
1000 = The .PGD file '%1' does not contain any profile data.
1001 = The .PGD file '%1' is already optimized; no changes made.  Use -force to force reoptimization.
1030 = Cannot dynamically load PSAPI.DLL.
1031 = PSAPI.DLL is invalid or out of date.
1032 = Can find no running instrumented instance of image '%1'.
1033 = Cannot access file mapping '%1'.
1034 = Cannot open PGODRIVER.SYS.
1035 = Cannot create PGC/PGD Id.
1036 = Interrupted by allocation.  Retrying...
1037 = DeviceIoControl failed to communicate with PGODRIVER.SYS.
1038 = Access denied while attempting to open a mutex '%1'
1039 = Failed waiting for quiet time to sweep.
1051 = The file '%1' is not a valid instrumentation data file (.PGC).
1052 = The instrumentation data file '%1' belongs to a different profile database.
1053 = The instrumentation data file '%1' is inconsistent because one or more threads terminated abnormally.
1054 = A later .PGC file must be merge-added before the .PGC file '%1' can be subtracted.
1056 = Please specify only one of /clear or .PGC files to merge, not both.
1058 = The .PGC file '%1' file was generated by an incompatible revision of the profile runtime.
1059 = The instrumented executable is not sweepable
1060 = Please specify '/merge', '/name', '/clear', or '/summary'.
1061 = Couldn't read profile data for '%s'.
1062 = Data diff failed.
1070 = The .PGD file '%1' contains inconsistent function information.
10000 = Copyright (C) Microsoft Corporation. All rights reserved.
10001 = fatal error
10002 = warning
10003 = error
10004 = access violation
10005 = breakpoint
10006 = datatype misalignment
10007 = illegal instruction
10008 = in page error
10009 = priviledged instruction
10010 = stack overflow
10011 = unknown exception
10012 = %s exception at 0x%p
10013 = %s attempting to %s at 0x%p
10014 = read
10015 = write
10016 = POGO
12000 = Microsoft (R) Profile Guided Optimization Manager
12001 = PGOMGR
12002 = Microsoft (R) PGO Manager
12100 = Usage: PGOMGR [options] [Profile-Count-Paths ...] Profile-Database
	
12101 = 
	
12102 = Options:
	
12103 = 
	
12104 = /?                  Display this help
	
12105 = /help               Display this help
	
12106 = /clear              Remove all merge data from this data base
	
12107 = /detail             Display verbose program statistics
	
12108 = /merge[:n]          Merge the given PGC file(s), with optional integer weight
	
12110 = /summary            Display program statistics
	
12111 = /unique             Display decorated function names
	
12113 = /name:<name>        Assign a friendly name to this PGD
	
12119 = %s: Used %4.1f%% (%lu / %lu) of total space reserved. %4.1f%% of the counts were dropped due to overflow.
	
12120 = Merging %s
	
12121 = PGD File: %s
	
12122 = Module Count: %d  Function Count: %d  Arc Count: %d  Value Count: %d
	
12123 = Reading and annotating function control flow graphs... 
12124 = Done
	
	
12125 = Module %s:
	
12126 =     Old # %d
	
12127 =     New # %d
	
12128 =     Merge # %d
	
12129 =     [Copy New; Old Synthesized]
	
12130 =     %d data sets
12131 = 
	%-20.20s  block: %5.1f%%  arc: %5.1f%%  inst: %5.1f%%
	%-20.20s  functions called: %5.1f%%
12132 = 
	Static instructions: %I64u  Basic blocks: %u  Average BB size:%4.1f
	
12133 = Dynamic instructions: %I64u
	
	
12134 = %-30.30s       entry  static       dynamic     %%     run
	
12135 = %-30.30s       count   instr         instr  total   total
	
12136 = Function Name
12137 = 
	Excel-friendly coverage follows
	
	module_name	function_name	
12138 = blocks_covered	total_blocks	arcs_covered	total_arcs	inst_covered	total_inst
	
12139 = block_coverage	arc_coverage	inst_coverage
	
12140 = Module name
12141 = Function name
12142 = Block %
12143 = Arc %
12144 = Instr %
12145 = 		case %3ld (%3d): taken %8I64u
	
12146 = 		 default: taken %8I64u
	
12147 = 		taken (%3d) %8I64u, not-taken %8I64u
	
12148 = Never executed
	
12149 = 		block %u: never executed
	
12150 = 		block %u: switch case %ld never seen
	
12151 = 		block %u: switch default case never seen
	
12152 = 		block %u: branch never taken
	
12153 = 		block %u: branch never falls through
	
12154 = Blk
12155 = Overall
12156 = Phase Name: %s
	
12157 = Modified Symbol: %S
	
12158 = Max Probe Counter: 0x%016llX (%.2f%%)
	
12159 = Consider /GENPROFILE:COUNTER32 for increased training performance.
	
14000 = Microsoft (R) Profile Guided Optimization Database to Object Converter
14001 = PGOCVT
14002 = Microsoft (R) PGO Database to Object Converter
14100 = Usage: PGOCVT [options] [files]
	
14101 = 
	
14102 = Options:
	
14103 = 
	
14104 = /NOLOGO
	
14105 = /OUT:filename
	
14106 = /MACHINE:targetmachine
	
14107 = /VERBOSE
	
15000 = Microsoft (R) Profile Guided Optimization Sweeping Utility
15001 = PGOSWEEP
15002 = Microsoft (R) PGO Sweeping Utility
15003 = Waiting for PID %u to terminate...
	
15100 = Usage: PGOSWEEP [options] Instrumented-Executable Output-PGC-Name
	
	
15101 = Options:
	
	
15102 = /?                          Display this help
	
15103 = /help                       Display this help
	
15104 = /reset                      Reset counts to zero after sweep (default)
	
15105 = /pid:n                      Only sweep the specified PID
	
15106 = /wait                       Wait for the specified PID to terminate before
	                            collecting counts
	
15107 = /onlyzero                   Do not save a PGC file, only zero counts
	
15108 = /pause                      Pause count collection on the system
	
15109 = /resume                     Resume count collection on the system
	
15110 = /noreset                    Do not reset counts to zero after sweep
	
20001 = Ok
20002 = Unspecified Error
20003 = File not found
20004 = Sharing violation
20005 = Unhandled PDB error
20006 = Not a PGD (signature mismatch)
20007 = PGD version is not supported (version mismatch)
20008 = PGD file is read-only
20010 = Out of memory
20011 = Bad function parameter
20012 = No data of the requested type
20013 = PGD not open
20014 = Module not open
20015 = Function not open
20016 = PGD stream '%s' is missing
20017 = PGD stream '%s' is invalid
20018 = Unable to replace PGD stream '%s'
20019 = Unable to write PGD stream '%s'
20020 = Unable to append to PGD stream '%s'
20021 = Unable to open PGD stream '%s'
20022 = Unknown error

[VariantClearui.dll]
100 = VariantClearui
121 = VARIANT '%1$s' is in unknown state
122 = VARIANT '%1$s' is a parameter without annotation
123 = VARIANT '%1$s' is an output parameter
124 = VARIANT '%1$s' has not been initialized
125 = VARIANT '%1$s' may have been initialized
126 = VARIANT '%1$s' has been initialized
33001 = VARIANT '%1$s' was cleared when it was uninitialized (expression '%2$s').
33002 = VARIANT '%1$s' was cleared when it may be uninitialized (expression '%2$s').
33003 = VARIANT '%1$s' is considered uninitialized but this is likely a false positive. If this is an array you should ignore this warning. (expression '%2$s').
33004 = VARIANT '%1$s', which is marked as _Out_ was cleared before being initialized (expression '%2$s').
33005 = VARIANT '%1$s' was provided as an _In_ or _InOut_ parameter but was not initialized (expression '%2$s').
33006 = VARIANT '%1$s' was provided as a parameter without SAL and may have been cleared when it was not initialized. (expression '%2$s').

